/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 16:31:01 GMT 2022
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.CharArrayWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber((-1516.2), 147, 147);
      node0.isTrue();
      node0.getDouble();
      Node node1 = new Node(29, node0, 42, 16);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.siblings();
      Node.newString(1473, "'v8dEGXW", 4095, 0);
      Node node2 = null;
      try {
        node2 = new Node(2268, node0, 12, 474);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(1104, node0);
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Wmu`}`8[]uG'+", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOptionalArg();
      node0.isOptionalArg();
      node0.isOptionalArg();
      simpleErrorReporter0.error("directives", "\n\nSubtree1: ", 46, 45);
      node0.isArrayLit();
      node0.isGetElem();
      node0.isVar();
      node0.isString();
      simpleErrorReporter0.error("Wmu`}`8[]uG'+", "directives", 310, 52);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(112, nodeArray0);
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(16, "", 954601, 52);
      node1.setSourceEncodedPosition(37);
      Node node2 = Node.newString(50, "", 38, 50);
      node2.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node2.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node2.isEquivalentTo(node0);
      node0.getAncestors();
      node1.getProp(29);
      node1.isEmpty();
      node1.isSetterDef();
      Node node3 = Node.newNumber((double) 30);
      node3.toString(false, false, false);
      node3.addChildToBack(node2);
      Node node4 = new Node(44, node1);
      Node node5 = node4.useSourceInfoIfMissingFrom(node1);
      node0.isNoSideEffectsCall();
      Node node6 = node1.useSourceInfoFromForTree(node2);
      node6.isNE();
      node3.copyInformationFrom(node5);
      node4.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      node0.isBlock();
      node0.isInstanceOf();
      node0.isGetElem();
      node0.isVar();
      node0.isString();
      Node node1 = Node.newNumber((-4012.04112269407));
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node.newString(949, "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(45, 45, 45);
      node0.getSourcePosition();
      node0.putBooleanProp(184365, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.newNumber((double) 53);
      int int0 = (-1400);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(53, "OGh");
      Node node1 = node0.cloneTree();
      node0.getInputId();
      node0.getSourceOffset();
      Node node2 = new Node(2498, node0, node0, node0);
      node1.getAncestors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.checkTreeEqualsImpl(node2);
      Node node3 = new Node(52);
      node0.isName();
      node0.isTypeOf();
      node3.isAssign();
      // Undeclared exception!
      try { 
        node2.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(5742, 5742, 5742);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(721, node0, node0, node0, node0, 302, 36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3293);
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node((-2063), 13, (-612));
      node0.hasMoreThanOneChild();
      node2.getAncestors();
      node1.getProp(306);
      node2.isEmpty();
      node2.isSetterDef();
      node1.isThrow();
      node0.isGetElem();
      node1.isVar();
      Node node3 = Node.newString("WU%yO*=Lit*U ", 2, 16);
      node3.removeProp(1428);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      boolean boolean0 = node0.isBlock();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isInstanceOf();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int0);
      
      boolean boolean2 = node0.isFalse();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertFalse(boolean2);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newNumber(1196.6600276, 809, 933);
      node0.setSourceEncodedPosition(809);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("<invalid>");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(4095, "<invalid>", 36, 2626);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(45);
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEquivalentTo(node1);
      node1.getAncestors();
      node1.putProp(7, "");
      node0.getProp(40);
      node1.isEmpty();
      node1.isSetterDef();
      node1.isThrow();
      node1.isGetElem();
      node0.isVar();
      node0.isString();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node.newString(782, "<invalid>");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.javascript.rhino.JSDocInfo$Visibility", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOptionalArg();
      node0.isOptionalArg();
      node0.isOptionalArg();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("directives", "0w-", 119, 30);
      node0.isArrayLit();
      node0.getChildCount();
      node0.isString();
      node0.isLabel();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(16, "", 954601, 52);
      node1.setSourceEncodedPosition(37);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("g$vk[");
      node1.setDirectives(linkedHashSet0);
      Node node2 = Node.newString(50, "", 38, 50);
      node2.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node2.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1328);
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node2.isEquivalentTo(node0);
      node0.getAncestors();
      node1.getProp(29);
      node1.isEmpty();
      node1.isSetterDef();
      node2.isThrow();
      node0.isGetElem();
      node0.useSourceInfoFrom(node2);
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      Node node0 = Node.newNumber(1382.85743593716);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = new Node(1479, 36, 1591);
      node0.isEquivalentTo(node1);
      node1.getAncestors();
      node0.getProp(12);
      node1.getBooleanProp(52);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = null;
      try {
        node3 = new Node((-304), node2, node2, node1, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      node_FileLevelJsDocBuilder0.append("EoN5zz_");
      node0.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.isFalse();
      node0.getStaticSourceFile();
      node0.isLabel();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(51);
      node_SideEffectFlags1.setReturnsTainted();
      Node node1 = new Node(51, node0, node0);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(30);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isNE();
      node0.setDirectives(linkedHashSet0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isEquivalentToTyped(node1);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1931);
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEquivalentTo(node1);
      node0.getAncestors();
      Node node2 = new Node(4095, node0, node0);
      node2.getProp(0);
      node2.isEmpty();
      node0.isSetterDef();
      node1.isThrow();
      node1.isGetElem();
      node2.isVar();
      Node.extractLineno(51);
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isNE();
      node0.setDirectives(linkedHashSet0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node0);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isEquivalentTo(node0);
      node0.getAncestors();
      node0.getProp(4);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
      node0.isVar();
      Node.extractLineno(48);
      Node node1 = new Node(336, node0, node0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.common.collect.Iterators$11");
      Node node0 = Node.newNumber(1.0);
      node0.getIntProp(26);
      node0.isUnscopedQualifiedName();
      node0.isCall();
      node0.setDouble(1.0);
      Node node1 = new Node(52, node0, node0, node0, 110, 188);
      node0.removeChildren();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isNull();
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF 110 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString("String n^de not created with No:e.newStri<g", 233, 233);
      node0.putIntProp(125, 233);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-153));
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node((-194), 16, 110);
      node0.isEquivalentTo(node1);
      node0.getAncestors();
      node0.getProp(233);
      node1.isEmpty();
      Node node2 = new Node(0, node0);
      node2.setIsSyntheticBlock(false);
      node2.isIn();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node3 = node1.useSourceInfoFrom(node0);
      node3.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.setCharno(153);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.addSuppression("String node not created with Node.newString");
      Node node1 = new Node(2);
      // Undeclared exception!
      try { 
        node1.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      node0.isOptionalArg();
      Node node1 = new Node(53, node0, (-422), 12);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isCase();
      Node node2 = new Node(30);
      node2.detachChildren();
      node1.setIsSyntheticBlock(false);
      node2.setLength(1912);
      node1.isUnscopedQualifiedName();
      node2.toString();
      Node node3 = Node.newString("NEW [length: com.google.javascript.rhino.Node$IntPropListItem@0000000006]");
      node3.getAncestors();
      node0.isDelProp();
      node3.setIsSyntheticBlock(false);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node4 = node2.useSourceInfoFrom(node3);
      node4.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.setCharno(4);
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      node0.isOptionalArg();
      node0.detachChildren();
      node0.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isCase();
      Node node1 = new Node(30);
      node1.detachChildren();
      node0.setIsSyntheticBlock(false);
      node1.setLength(1912);
      node0.isUnscopedQualifiedName();
      node1.toString();
      Node node2 = Node.newString("NEW [length: com.google.javascript.rhino.Node$IntPropListItem@0000000005]");
      node2.getAncestors();
      node0.isDelProp();
      node2.setIsSyntheticBlock(false);
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node3 = node1.useSourceInfoFrom(node2);
      node3.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.setCharno(4);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(19);
      Node node1 = Node.newString(16, "", 954601, 52);
      node1.setSourceEncodedPosition(37);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("g$vk[");
      node1.setDirectives(linkedHashSet0);
      Node node2 = Node.newString(50, "", 38, 50);
      node2.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node2.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1328);
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node2.isEquivalentTo(node0);
      node0.getAncestors();
      node1.getProp(29);
      node1.isEmpty();
      node2.isEquivalentTo(node1, false, true);
      node2.isThrow();
      node2.type = (-3525);
      node0.isGetElem();
      node0.isVar();
      node2.isString();
      node1.useSourceInfoIfMissingFromForTree(node2);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "2?", 93, 1207);
      simpleErrorReporter0.error("Number", "Jw f5M}^;x]ecJ|t!FV", 0, (-4756));
      Node node0 = Node.newString((-1), "Use SerializedForm");
      Node node1 = new Node(1207, node0, node0, 44, (-3485));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("8'/Le1]6qOZdyMMSO!");
      node_FileLevelJsDocBuilder0.append("c<H&!^>Z;QW\"$%e");
      node0.isBlock();
      node1.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.isFalse();
      node0.getProp(3511);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
      node1.getProp(15);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(40, "", 1328, 0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(147);
      node_SideEffectFlags2.valueOf();
      node0.isFalse();
      node0.getProp(44);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
      node0.getProp((-304));
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(41, node0, 2, 16);
      InputId inputId0 = new InputId("");
      Node node2 = Node.newNumber(2593.778);
      InputId inputId1 = new InputId("");
      node2.setInputId(inputId1);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(8506);
      Node node3 = new Node(4);
      node3.wasEmptyNode();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node4 = Node.newString(15, "|&HV/?daZHs_ ~\"DzX");
      node2.getSourceFileName();
      Node.mergeLineCharNo(43, 44);
      node4.isNumber();
      node0.getSourceOffset();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("jrF6I3;qtc");
      node0.isIf();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleAttributes();
      locale0.getScript();
      Locale locale1 = locale0.stripExtensions();
      Locale.getISOLanguages();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.isAssign();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING jrF6I3;qtc [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      simpleErrorReporter0.warning("", "", (-2495), 39);
      Node node2 = new Node(4683, node0, node1, node0, (-612), (-1287));
      Node node3 = node0.copyInformationFrom(node2);
      node2.isName();
      node2.isEquivalentTo(node0);
      node2.getAncestors();
      node3.getStaticSourceFile();
      node2.setCharno(999);
      node1.useSourceInfoFrom(node0);
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString((-2795), "com.google.common.collect.Lists$1", (-2795), 53);
      node0.isBreak();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "com.google.common.collect.Lists$1");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      linkedList1.removeIf(predicate2);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      Node node2 = new Node(49, node0);
      // Undeclared exception!
      try { 
        node1.removeChild(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Node node1 = new Node(33);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertEquals(33, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertEquals(33, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      node0.removeProp(47);
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node2 = node1.copyInformationFrom(node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertEquals(33, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertEquals(33, node2.getType());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertTrue(node2.isGetProp());
      assertFalse(node2.isWith());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isFromExterns());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean0 = node2.isNew();
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isCall());
      assertEquals(33, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertEquals(33, node2.getType());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertTrue(node2.isGetProp());
      assertFalse(node2.isWith());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isFromExterns());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(209, node0, 1046, 0);
      node1.detachChildren();
      Node node2 = Node.newString((-472), "", 1, 629);
      node1.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node3 = new Node(2, node2, node2, node0, node2, (-2695), 4041);
      node1.isEquivalentToTyped(node3);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.isWith();
      node1.hasChildren();
      node2.cloneTree();
      Node.newNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(5742, 5742, 5742);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(721, node0, node0, node0, node0, 302, 36);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3293);
      node_SideEffectFlags0.setAllFlags();
      Node node2 = new Node((-2063), 13, (-612));
      node2.isEquivalentTo(node1);
      node2.getAncestors();
      node1.getProp(306);
      node2.isEmpty();
      node2.isSetterDef();
      node1.isThrow();
      node0.isGetElem();
      node1.isVar();
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(16, "", 954601, 52);
      node1.setSourceEncodedPosition(37);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(1196.6600276, 809, 933);
      node0.setSourceEncodedPosition(809);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("<invalid>");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(4095, "<invalid>", 36, 2626);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(45);
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEquivalentTo(node1);
      node1.getAncestors();
      node0.getProp(40);
      node1.isEmpty();
      node1.isSetterDef();
      node1.isThrow();
      node1.isGetElem();
      node0.isVar();
      node0.isString();
      node1.useSourceInfoIfMissingFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(53, "OGh");
      Node node1 = Node.newNumber((-1476.3), 37, (-419));
      Node node2 = node0.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("OGh", "OGh", (-3787), 1742);
      simpleErrorReporter0.error("r", "r", 1, 183);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node2.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append("r.4c");
      node1.isBlock();
      node1.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.isFalse();
      node0.getStaticSourceFile();
      node1.isLabel();
      Node node3 = new Node(4, node0, node1, node0, node0, 8, 44);
      Node node4 = node1.copyInformationFromForTree(node3);
      node4.children();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(4683, node0, node1, node0, (-612), (-1287));
      Node node3 = node0.copyInformationFrom(node2);
      node2.isName();
      node2.isEquivalentTo(node0);
      node2.getAncestors();
      node3.getStaticSourceFile();
      node2.isLabel();
      node3.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(40, "", 1328, 0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node1);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isEquivalentTo(node1);
      node0.getAncestors();
      node0.getProp(4);
      node1.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node1.isGetElem();
      node1.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(53);
      Node node1 = Node.newNumber((-1476.3), 37, (-419));
      Node node2 = node0.cloneTree();
      node1.getInputId();
      node1.getSourceOffset();
      Node node3 = new Node(2498, node1, node1, node0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("String n^de not created with No:e.newStri<g", 220, 220);
      node0.isQualifiedName();
      Node node1 = Node.newNumber((double) 44, 35, 40);
      Node node2 = node0.clonePropsFrom(node1);
      node0.toString();
      node2.getQualifiedName();
      node0.getStaticSourceFile();
      Node node3 = Node.newString(39, "String n^de not created with No:e.newStri<g");
      node2.checkTreeEquals(node3);
      node0.setCharno(2);
      node3.removeFirstChild();
      node3.getSourceOffset();
      // Undeclared exception!
      try { 
        node1.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      int int0 = 111;
      Node node1 = Node.newString(499, "Xlawgu", (-2419), 111);
      Node node2 = node0.clonePropsFrom(node1);
      node2.toString();
      node1.getQualifiedName();
      Node node3 = new Node(35, node2, node2);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("String node not created with Node.newString", 233, 233);
      Node node1 = new Node(233, node0, node0, node0, node0, 125, 31);
      node1.isOr();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("String node not created with Node.newString", "", 77, 3591);
      simpleErrorReporter0.error("Q]bKL:Q", "", 4095, 43);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("Q]bKL:Q");
      node1.isBlock();
      node0.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.valueOf();
      node1.isFalse();
      node1.getStaticSourceFile();
      node1.isLabel();
      // Undeclared exception!
      try { 
        node1.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node2 = Node.newString((-204), "input_id", (-2052), (-1274));
      Node node3 = new Node(31, node1, node2, node1, node1, 32, 12);
      node1.setSourceFileForTesting("slash_v");
      // Undeclared exception!
      try { 
        node3.replaceChild(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      node0.setSourceEncodedPosition((-422));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isNE();
      node0.setDirectives(linkedHashSet0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node1 = new Node(0, node0, 16, 31);
      node0.isEquivalentToTyped(node1);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node1.isEquivalentTo(node0);
      node0.getAncestors();
      node1.getProp(4095);
      node0.isEmpty();
      node1.isSetterDef();
      node0.isThrow();
      node1.isGetElem();
      node1.isVar();
      Node.extractLineno(8);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      Node node0 = Node.newNumber(1382.85743593716);
      node0.setLineno((-19));
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = Node.newString("StringNode: str is null", 456, 42);
      node0.isEquivalentTo(node1);
      node0.getAncestors();
      node0.getProp(53);
      node0.isEmpty();
      Node node2 = Node.newString((-1769), "Dn@aaWhI");
      node2.isSetterDef();
      node1.isThrow();
      node1.isGetElem();
      node1.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(51);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 51
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(209, node0, 1019, 0);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isArrayLit();
      Node node2 = node1.clonePropsFrom(node0);
      node2.detachChildren();
      node2.setIsSyntheticBlock(false);
      node2.setLength(111);
      node0.isUnscopedQualifiedName();
      node1.setCharno(8);
      node0.toString();
      node1.isDelProp();
      node0.setIsSyntheticBlock(false);
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node3 = node0.useSourceInfoFrom(node1);
      node1.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      node0.isOptionalArg();
      Node node1 = new Node(53, node0, (-422), 12);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isCase();
      Node node2 = new Node(30);
      node2.detachChildren();
      node1.setIsSyntheticBlock(false);
      node2.setLength(1912);
      node1.isUnscopedQualifiedName();
      node2.toString();
      Node.newString("com.google.common.base.Objects");
      node1.isTrue();
      node0.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Not declared as a constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      node0.isOptionalArg();
      Node node1 = new Node(53, node0, (-422), 12);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isCase();
      Node node2 = new Node(30);
      node2.detachChildren();
      node1.setIsSyntheticBlock(false);
      node2.setLength(1912);
      node1.isUnscopedQualifiedName();
      node2.toString();
      Node node3 = Node.newString("com.google.common.base.Objects");
      node3.getAncestors();
      node0.isDelProp();
      node3.setIsSyntheticBlock(false);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node4 = node2.useSourceInfoFrom(node3);
      node4.getStaticSourceFile();
      node1.setStaticSourceFile((StaticSourceFile) null);
      node0.setCharno(4);
      node1.useSourceInfoFrom(node2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(4095, node0, node0, node0, (-4096), 46);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isDec();
      Node node2 = node1.clonePropsFrom(node0);
      node2.detachChildren();
      node2.setIsSyntheticBlock(false);
      node2.setLength(111);
      node0.isUnscopedQualifiedName();
      node1.setCharno(8);
      node0.toString();
      node1.isDelProp();
      node0.setIsSyntheticBlock(false);
      node0.setIsSyntheticBlock(false);
      node2.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(664);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node2.isAnd();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1196.6600276, 809, 933);
      node0.setSourceEncodedPosition(809);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("<invalid>");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(4095, "<invalid>", 36, 2626);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(45);
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node0.isEquivalentTo(node1);
      Node node2 = Node.newString(1514, "<invalid>");
      node2.getSourceFileName();
      Node.mergeLineCharNo((-3525), 34);
      InputId inputId0 = new InputId("<invalid>");
      node2.setInputId(inputId0);
      node1.isBlock();
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "2?", 93, 1207);
      simpleErrorReporter0.error("Number", "Jw f5M}^;x]ecJ|t!FV", 0, (-4756));
      Node node0 = Node.newString((-1), "Use SerializedForm");
      Node node1 = new Node(1207, node0, node0, 44, (-3485));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder1.append("8'/Le1]6qOZdyMMSO!");
      node_FileLevelJsDocBuilder1.append("c<H&!^>Z;QW\"$%e");
      node0.isBlock();
      node1.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.isFalse();
      node0.getProp(3511);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
      node1.getProp(15);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node0.isNE();
      node0.setDirectives(linkedHashSet0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node0);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isEquivalentTo(node0);
      node0.getAncestors();
      node0.getProp(4);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
      node0.isVar();
      Node.extractLineno(48);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      mockPrintWriter0.close();
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.setSourceEncodedPosition((-1711));
      node0.hasChildren();
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(43);
      node0.getAncestors();
      node0.children();
      node0.isEmpty();
      int int0 = 1559;
      node0.getBooleanProp((-986));
      Node node1 = new Node(16, node0, node0, node0, node0, 16, 39);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(43);
      node0.getAncestors();
      node0.children();
      node0.isEmpty();
      node0.getBooleanProp((-986));
      Node node1 = new Node(43);
      Node node2 = new Node(16, node1, node0, node0, node0, 40, 30);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node2.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(40, "", 1328, 0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.newString("0$uT@Rj/OcF>T5++{{k", 54, 52);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.setReturnsTainted();
      node1.setCharno(32);
      node1.isDebugger();
      node1.getAncestors();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(4095, node0, node0, node0, (-4096), 46);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isDec();
      Node node2 = node1.clonePropsFrom(node0);
      node2.detachChildren();
      node2.setIsSyntheticBlock(false);
      node2.setLength(111);
      node0.isUnscopedQualifiedName();
      node1.setCharno(8);
      node0.toString();
      node1.isDelProp();
      node0.setIsSyntheticBlock(false);
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node3 = node0.useSourceInfoFrom(node1);
      node1.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(5742, 5742, 5742);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = new Node(721, node0, node0, node0, node0, 302, 36);
      node0.isOr();
      node1.clonePropsFrom(node0);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5742
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((-754.362343), 0, 0);
      Node node1 = node0.getLastSibling();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.addChildToBack(node0);
      node0.isBlock();
      node1.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.isFalse();
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.putBooleanProp(44, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isOptionalArg();
      node1.isOptionalArg();
      node0.isOptionalArg();
      node0.isArrayLit();
      Node node2 = new Node(4095, node0, node1, node1);
      node2.getChildCount();
      node0.isString();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      node0.getProp((-1492));
      node0.isEmpty();
      node0.isString();
      Node node1 = new Node(153, node0, node0, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(2);
      node_SideEffectFlags1.setReturnsTainted();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString(16, "", 954601, 52);
      node1.setSourceEncodedPosition(37);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("g$vk[");
      node1.setDirectives(linkedHashSet0);
      Node node2 = Node.newString(50, "", 38, 50);
      node2.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node2.isEquivalentToTyped(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(1328);
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node2.isEquivalentTo(node0);
      node0.getAncestors();
      node1.getProp(29);
      node1.isEmpty();
      node1.isSetterDef();
      node2.isThrow();
      node0.isGetElem();
      node0.isVar();
      node2.isString();
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      node0.isVarArgs();
      node0.isTrue();
      node0.isVarArgs();
      node0.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeFunctionType((JSType) null);
      jSTypeRegistry0.createAnonymousObjectType();
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createDefaultObjectUnion((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = Node.newString("com.google.common.base.Predicates$OrPredicate", 35, 37);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertEquals(37, node1.getCharno());
      assertEquals(143397, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(35, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      boolean boolean0 = node0.isWith();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isEquivalentTo(node1, false, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertEquals(0, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertEquals(37, node1.getCharno());
      assertEquals(143397, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isHook());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(35, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      Node node0 = Node.newNumber(1382.85743593716);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = Node.newString((-19), "AXix=c+4E{XaX");
      node1.getSourceFileName();
      Node.mergeLineCharNo((-3525), (-927));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.mergeLineCharNo(102, 102);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      linkedList0.add((JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(50, node0);
      node1.getCharno();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node((-3), node0, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      Node node4 = node1.cloneNode();
      node4.setSourceEncodedPosition((-1749));
      node1.addSuppression("");
      node3.setCharno(22);
      node0.setDouble((-2910.0921127075558));
      Node node5 = node0.useSourceInfoFrom(node1);
      node0.getIntProp(2);
      node3.isVarArgs();
      node4.isName();
      node5.isGetterDef();
      node0.isVarArgs();
      node3.isTrue();
      node5.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Named type with empty name component");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = Node.newString((-2795), "com.google.common.collect.Lists$1", (-2795), 53);
      node0.isBreak();
      Node node1 = new Node(41);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node3 = new Node(38, node2, node0, node1);
      Node node4 = null;
      try {
        node4 = new Node(52, node3, node2, node2, 4, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "Q;uBb";
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      int int0 = 111;
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(209, node0, 1046, 28);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.isIn();
      Node node2 = node1.clonePropsFrom(node0);
      EvoSuiteFile evoSuiteFile0 = null;
      Node node3 = new Node(302, node2, 50, 46);
      Node node4 = null;
      try {
        node4 = new Node(44, node3, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node.extractLineno(47);
      Node node0 = Node.newString("I~~]>J_+iCHaSmPK1,Z", 172, 0);
      Node node1 = node0.cloneNode();
      node1.setType(172);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(209, node0, 1046, 0);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      node0.isLabelName();
      node0.setJSType((JSType) null);
      node0.isGetProp();
      node0.isDec();
      Node node2 = node1.clonePropsFrom(node0);
      node2.detachChildren();
      node2.setIsSyntheticBlock(false);
      node2.setLength(111);
      node0.isUnscopedQualifiedName();
      node1.setCharno(8);
      node0.toString();
      node1.isDelProp();
      node0.setIsSyntheticBlock(false);
      node0.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node3 = node0.useSourceInfoFrom(node1);
      node1.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      node3.isAnd();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      node0.getQualifiedName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(4683, node0, node1, node0, (-612), 30);
      Node node3 = node0.copyInformationFrom(node2);
      node2.isName();
      node0.hasChildren();
      node0.isThrow();
      node3.isGetElem();
      node1.isInstanceOf();
      node3.getCharno();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      node0.isBlock();
      node0.isInstanceOf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
      node0.isFalse();
      node0.getProp(1524);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = Node.newString("com.google.common.base.Predicates$OrPredicate", 35, 37);
      Node node2 = Node.newString("com.google.common.base.Predicates$OrPredicate");
      node0.isWith();
      node2.isEquivalentTo(node1, false, false);
      node1.setQuotedString();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = new Node(1846, node0, node0, node0, 51, 153);
      Node node2 = node1.copyInformationFrom(node0);
      node1.isName();
      node0.isWith();
      node1.setSourceEncodedPosition(45);
      node2.hasChildren();
      node2.isFunction();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(4683, node0, node1, node0, (-612), (-1287));
      Node node3 = node0.copyInformationFrom(node2);
      node2.isName();
      node3.isWith();
      node0.hasChildren();
      node1.cloneTree();
      Node.newNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
      Node node1 = new Node(48);
      node0.isName();
      node0.isGetterDef();
      node0.isVarArgs();
      node0.isTrue();
      node0.isVarArgs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node.extractLineno(83);
      Node node0 = Node.newString("input_id", 7, 7);
      Node node1 = node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.getAncestor((-1009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb");
      node0.getBooleanProp(111);
      node0.isVarArgs();
      node0.isOptionalArg();
      Node node1 = new Node(209, node0, 1046, 0);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("W%R}f#t", "Q;uBb", 36, 1);
      linkedList0.add(jSType0);
      node0.getIndexOfChild(node1);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      String string0 = ":^";
      simpleErrorReporter0.error("Not declared as a type name", "W%R}f#t", 87855567, 0);
      node1.siblings();
      node2.isExprResult();
      node2.getProp(47);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 209
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString(31, "", 33, 31);
      node0.getAncestors();
      node0.isUnscopedQualifiedName();
      node0.getSourcePosition();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.hasOneChild();
      node0.setStaticSourceFile(simpleSourceFile0);
      double double0 = (-2227.45070681561);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DELPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node0);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isEquivalentTo(node0);
      node0.getAncestors();
      node0.getProp(4);
      node0.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node0.isGetElem();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      Node node0 = Node.newNumber(1382.85743593716);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node0.wasEmptyNode();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = Node.newString((-19), "AXix=c+4E{XaX");
      node1.getSourceFileName();
      Node.mergeLineCharNo((-3525), (-927));
      node1.isNumber();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString(53, "OGh");
      Node node1 = Node.newNumber((-1476.3), 37, (-419));
      node0.cloneTree();
      node1.getInputId();
      node1.getSourceOffset();
      Node node2 = new Node(2498, node1, node1, node0);
      EvoSuiteFile evoSuiteFile0 = null;
      node0.getAncestors();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(38);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 38
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      Node node0 = Node.newNumber(1382.85743593716);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      node_SideEffectFlags0.setMutatesThis();
      Node node1 = Node.newString((-19), "AXix=c+4E{XaX");
      node1.getSourceFileName();
      Node.mergeLineCharNo((-3525), (-927));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertTrue(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFunction());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(7, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertTrue(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getCharno());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertTrue(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getCharno());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = Node.newString(40, "", 1328, 0);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertTrue(node1.isString());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean1 = node0.isGetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertTrue(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getCharno());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node2 = Node.newString("0$uT@Rj/OcF>T5++{{k", 54, 52);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isHook());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isNull());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertEquals(52, node2.getCharno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAdd());
      assertFalse(node2.hasOneChild());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isBlock());
      assertFalse(node2.isName());
      assertTrue(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCall());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(221236, node2.getSourcePosition());
      assertFalse(node2.isInstanceOf());
      assertEquals(40, node2.getType());
      assertFalse(node2.isAnd());
      assertEquals(54, node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      
      Node node3 = node1.cloneNode();
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotNull(node3);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertTrue(node1.isString());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFalse());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNot());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isName());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isStringKey());
      assertEquals(5439488, node3.getSourcePosition());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertEquals(40, node3.getType());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFunction());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isTry());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isNE());
      assertFalse(node3.isScript());
      assertEquals(1328, node3.getLineno());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isThis());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node4 = node3.getAncestor(125);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNull(node4);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertTrue(node1.isString());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertEquals(40, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFalse());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNot());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isName());
      assertFalse(node3.isBlock());
      assertTrue(node3.isString());
      assertFalse(node3.isStringKey());
      assertEquals(5439488, node3.getSourcePosition());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertEquals(40, node3.getType());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFunction());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isTry());
      assertFalse(node3.isFor());
      assertFalse(node3.isIf());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isNE());
      assertFalse(node3.isScript());
      assertEquals(1328, node3.getLineno());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isIn());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isThis());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node2.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.toString();
      node1.isDelProp();
      node2.setIsSyntheticBlock(false);
      node1.isIn();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
      node_SideEffectFlags0.setMutatesGlobalState();
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(true);
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node node3 = Node.newString(97, "");
      node3.isDefaultCase();
      node3.siblings();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString("String n^de not created with No:e.newStri<g", 233, 233);
      node0.putIntProp(125, 233);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-153));
      node_SideEffectFlags0.setAllFlags();
      Node node1 = new Node((-194), 16, 110);
      node0.isEquivalentTo(node1);
      node0.getAncestors();
      node0.getProp(233);
      node1.isEmpty();
      node1.isSetterDef();
      node0.isThrow();
      node1.isGetElem();
      node0.isVar();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      node0.setSourceEncodedPosition(4);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("input_id");
      node0.setDirectives(linkedHashSet0);
      Node node1 = Node.newString(40, "", 1328, 0);
      node0.isGetterDef();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isEquivalentToTyped(node1);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.isEquivalentTo(node1);
      node0.getAncestors();
      node0.getProp(4);
      node1.isEmpty();
      node0.isSetterDef();
      node0.isThrow();
      node1.isGetElem();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = Node.newString("com.google.common.base.Predicates$OrPredicate", 35, 37);
      Node node2 = Node.newString("com.google.common.base.Predicates$OrPredicate");
      node0.isWith();
      node2.isEquivalentTo(node1, false, false);
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      node1.setSourceFileForTesting("slash_v");
      node0.isWhile();
      Node node2 = new Node(15, 2, 1);
      node2.isVarArgs();
      node2.isDec();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node3.isRegExp();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry1.createParameters((List<JSType>) linkedList1);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      node2.useSourceInfoIfMissingFrom(node0);
      Node node5 = new Node(6158, node4, node3, node1, 43, 2);
      node5.setIsSyntheticBlock(false);
      node4.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      // Undeclared exception!
      try { 
        Node.newString(38, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(true);
      node0.getAncestors();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      Node.newString(97, "");
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      node0.appendStringTree(mockPrintWriter0);
      node0.isWhile();
      node0.isVarArgs();
      node0.setCharno(1942);
      node0.isTry();
      node0.isRegExp();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(4683, node0, node1, node0, (-612), 30);
      node0.copyInformationFrom(node2);
      node2.isName();
      node0.hasChildren();
      node1.cloneTree();
      Node node3 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = Node.newString(40, "", 1328, (-2));
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean1 = node0.isGetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean2 = node0.isEquivalentToTyped(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean2);
      
      node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean3 = node0.isEquivalentTo(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean3);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotSame(node0, node1);
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Object object0 = node0.getProp(4);
      assertNotSame(node0, node1);
      assertNull(object0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean4 = node1.isEmpty();
      assertNotSame(node1, node0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean4);
      
      boolean boolean5 = node0.isSetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertTrue(node0.isReturn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isTypeOf());
      assertEquals(4, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean5);
      
      boolean boolean6 = node1.isThrow();
      assertNotSame(node1, node0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean6);
      
      boolean boolean7 = node1.isGetElem();
      assertNotSame(node1, node0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean7);
      
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      assertNotNull(node0);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean0 = node0.getBooleanProp(111);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean1 = node0.isVarArgs();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      
      boolean boolean2 = node0.isOptionalArg();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      
      Node node1 = new Node(209, node0, 1046, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      
      Node node2 = Node.newString((-472), "", 1, 629);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      
      boolean boolean3 = node1.isGetterDef();
      assertNotSame(node0, node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node3 = new Node(2, node2, node2, node0, node2, (-2695), 4041);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node3.isWhile());
      assertEquals(2, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNew());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isWith());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      
      boolean boolean4 = node1.isEquivalentToTyped(node3);
      assertNotSame(node0, node2);
      assertNotSame(node1, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node3.isWhile());
      assertEquals(2, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNew());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isWith());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      
      node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean5 = node1.isEquivalentTo(node3);
      assertNotSame(node0, node2);
      assertNotSame(node1, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node3.isWhile());
      assertEquals(2, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNew());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isWith());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      assertNotSame(node0, node2);
      assertNotSame(node1, node3);
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isRegExp());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      
      Object object0 = node2.getProp(29);
      assertNotSame(node2, node0);
      assertNull(object0);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      
      boolean boolean6 = node3.isEmpty();
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node3.isWhile());
      assertEquals(2, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNew());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isWith());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      
      boolean boolean7 = node0.isSetterDef();
      assertNotSame(node0, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      
      boolean boolean8 = node2.isThrow();
      assertNotSame(node2, node0);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean7);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      
      boolean boolean9 = node3.isGetElem();
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean6);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertEquals(629, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertEquals((-472), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertEquals(1, node2.getLineno());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals(4725, node2.getSourcePosition());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node3.isWhile());
      assertEquals(2, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isAdd());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNew());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isDec());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isWith());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabel());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isString());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertFalse(node3.isNot());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isThrow());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = Node.newString(40, "", 1328, 0);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertEquals(5439488, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      boolean boolean1 = node0.isGetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean2 = node0.isEquivalentToTyped(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertEquals(5439488, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(boolean2);
      
      node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node2 = new Node((-1468), node0, node0, node1, 1491, 49);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertEquals(5439488, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(1491, node2.getLineno());
      assertFalse(node2.isVoid());
      assertEquals((-1468), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertTrue(node2.hasChildren());
      assertEquals(6107185, node2.getSourcePosition());
      assertFalse(node2.isIn());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertEquals(49, node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertEquals(5439488, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(1491, node2.getLineno());
      assertFalse(node2.isVoid());
      assertEquals((-1468), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertTrue(node2.hasChildren());
      assertEquals(6107185, node2.getSourcePosition());
      assertFalse(node2.isIn());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertEquals(49, node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean3 = node1.isEquivalentToTyped(node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIf());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertEquals(5439488, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(1491, node2.getLineno());
      assertFalse(node2.isVoid());
      assertEquals((-1468), node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertTrue(node2.hasChildren());
      assertEquals(6107185, node2.getSourcePosition());
      assertFalse(node2.isIn());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertEquals(49, node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      String string0 = null;
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      node1.setSourceFileForTesting("slash_v");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertEquals("slash_v", node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      
      Node node1 = new Node(0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node3.isNull());
      assertFalse(node3.isCall());
      assertFalse(node3.isSetterDef());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isFor());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isIf());
      assertFalse(node3.isFromExterns());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isFunction());
      assertFalse(node3.isContinue());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isCase());
      assertEquals(0, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      
      Node node4 = node1.cloneNode();
      assertSame(node0, node2);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertEquals(0, node4.getType());
      assertFalse(node4.isThrow());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertFalse(node4.isTrue());
      assertFalse(node4.isInc());
      assertFalse(node4.isNE());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isStringKey());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isHook());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFor());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isTry());
      assertFalse(node4.isParamList());
      assertFalse(node4.isScript());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isNumber());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isBlock());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isCall());
      assertFalse(node4.isVar());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isOr());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isFunction());
      assertFalse(node4.isVoid());
      assertFalse(node4.isBreak());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isDebugger());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isString());
      assertFalse(node4.isNot());
      
      node4.setSourceEncodedPosition((-1749));
      assertSame(node0, node2);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertEquals(0, node4.getType());
      assertEquals((-1749), node4.getSourcePosition());
      assertFalse(node4.isThrow());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertFalse(node4.isTrue());
      assertFalse(node4.isInc());
      assertFalse(node4.isNE());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIn());
      assertFalse(node4.isCatch());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isStringKey());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isHook());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isFor());
      assertEquals(1048575, node4.getLineno());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isTry());
      assertFalse(node4.isParamList());
      assertFalse(node4.isScript());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isNumber());
      assertFalse(node4.isReturn());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isBlock());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isContinue());
      assertFalse(node4.isCall());
      assertFalse(node4.isVar());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isNull());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isOr());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isComma());
      assertFalse(node4.isFunction());
      assertFalse(node4.isVoid());
      assertFalse(node4.isBreak());
      assertEquals(2347, node4.getCharno());
      assertFalse(node4.isFalse());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isString());
      assertFalse(node4.isNot());
      
      node1.addSuppression("");
      assertSame(node0, node2);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      
      node0.setDouble((-2905.32844));
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      
      Node node5 = node0.useSourceInfoFrom(node1);
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node5, node2);
      assertSame(node5, node0);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node5.isString());
      assertFalse(node5.isSwitch());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isIn());
      assertTrue(node5.isNumber());
      assertFalse(node5.isCase());
      assertFalse(node5.isInc());
      assertFalse(node5.isBreak());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isIf());
      assertFalse(node5.isComma());
      assertFalse(node5.isFor());
      assertFalse(node5.isNE());
      assertFalse(node5.isHook());
      assertFalse(node5.isThis());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNot());
      assertFalse(node5.isFunction());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isAnd());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isSetterDef());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isContinue());
      assertFalse(node5.isWhile());
      assertFalse(node5.isDo());
      assertEquals(39, node5.getType());
      assertFalse(node5.isBlock());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isOr());
      assertFalse(node5.isAssignAdd());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isDec());
      assertFalse(node5.isAssign());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isName());
      assertFalse(node5.isNull());
      assertFalse(node5.isReturn());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isCall());
      assertFalse(node5.isCatch());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isWith());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isTrue());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isTry());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isScript());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabel());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isArrayLit());
      
      node0.getIntProp(2);
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      
      boolean boolean0 = node3.isVarArgs();
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotSame(node3, node4);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node3.isNull());
      assertFalse(node3.isCall());
      assertFalse(node3.isSetterDef());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isFor());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isIf());
      assertFalse(node3.isFromExterns());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isFunction());
      assertFalse(node3.isContinue());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isCase());
      assertEquals(0, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      
      node3.setVarArgs(false);
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotSame(node3, node4);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node3.isNull());
      assertFalse(node3.isCall());
      assertFalse(node3.isSetterDef());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isVoid());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isFor());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isIf());
      assertFalse(node3.isFromExterns());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isFunction());
      assertFalse(node3.isContinue());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isComma());
      assertFalse(node3.isFalse());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isCase());
      assertEquals(0, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isString());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      
      boolean boolean1 = node4.isName();
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node4.equals((Object)node5));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      
      boolean boolean2 = node5.isGetterDef();
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node5, node2);
      assertSame(node5, node0);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = node0.isVarArgs();
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = node3.isTrue();
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotSame(node3, node4);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node5));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = node5.isVarArgs();
      assertSame(node0, node2);
      assertSame(node0, node5);
      assertNotSame(node1, node4);
      assertSame(node1, node3);
      assertSame(node5, node2);
      assertSame(node5, node0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Named type with empty name component");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 48;
      Node[] nodeArray0 = new Node[5];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber(615.98, (-841), 25);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInc());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      nodeArray0[1] = node1;
      Node node2 = new Node(35);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isRegExp());
      assertEquals(35, node2.getType());
      assertTrue(node2.isGetElem());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      nodeArray0[2] = node2;
      Node node3 = Node.newString((-1677), "X^ (Hd", 47, 2);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBlock());
      assertFalse(node3.isCall());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isContinue());
      assertFalse(node3.isOr());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertEquals(192514, node3.getSourcePosition());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isWith());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isTry());
      assertEquals(47, node3.getLineno());
      assertFalse(node3.isHook());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isIn());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAssign());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDelProp());
      assertEquals(2, node3.getCharno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAnd());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isComma());
      assertFalse(node3.isNot());
      assertFalse(node3.isTypeOf());
      assertEquals((-1677), node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isDec());
      assertFalse(node3.isFromExterns());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      nodeArray0[3] = node3;
      Node node4 = new Node(36, node2, node2, 4095, 39);
      assertNotNull(node4);
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isRegExp());
      assertEquals(35, node2.getType());
      assertTrue(node2.isGetElem());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertEquals(36, node4.getType());
      assertFalse(node4.isFunction());
      assertFalse(node4.isRegExp());
      assertEquals(39, node4.getCharno());
      assertFalse(node4.isCatch());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isIf());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isIn());
      assertFalse(node4.isVar());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isName());
      assertFalse(node4.isFalse());
      assertFalse(node4.isContinue());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isReturn());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isComma());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAssign());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isWhile());
      assertFalse(node4.isString());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isScript());
      assertFalse(node4.isWith());
      assertFalse(node4.isNot());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAnd());
      assertFalse(node4.isLabelName());
      assertEquals(4095, node4.getLineno());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isOr());
      assertFalse(node4.isThrow());
      assertFalse(node4.isDo());
      assertFalse(node4.isBlock());
      assertFalse(node4.isInc());
      assertFalse(node4.isHook());
      assertFalse(node4.isStringKey());
      assertEquals(16773159, node4.getSourcePosition());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isThis());
      assertFalse(node4.isParamList());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isNumber());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isCase());
      assertFalse(node4.isFor());
      assertFalse(node4.isTry());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      nodeArray0[4] = node4;
      Node node5 = null;
      try {
        node5 = new Node(48, nodeArray0, 933, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertTrue(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(4, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertTrue(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(4, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = node0.isNE();
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertTrue(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(4, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertTrue(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(4, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean1 = node0.isEquivalentToTyped(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertTrue(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(4, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertTrue(boolean1);
      
      node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      // Undeclared exception!
      try { 
        Node.newString(44, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
      Node node1 = new Node(48);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node1.getChildCount());
      assertEquals(48, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node0.isName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isGetterDef();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean1);
      
      boolean boolean2 = node0.isTrue();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isVarArgs();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean3);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      double double0 = node0.getDouble();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals((-1980.8033395), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 24;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2626, (Node) null, 98, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = Node.newString("com.google.common.base.Predicates$OrPredicate", 35, 37);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isFor());
      assertEquals(143397, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals(35, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      Node node2 = Node.newString("com.google.common.base.Predicates$OrPredicate");
      assertNotSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(40, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertTrue(node2.isString());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node0.isWith();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isHook());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isLocalResultCall();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isHook());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean1);
      
      JSDocInfo jSDocInfo0 = node2.getJSDocInfo();
      assertNotSame(node2, node1);
      assertNull(jSDocInfo0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertEquals(40, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDo());
      assertTrue(node2.isString());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node1.setJSDocInfo((JSDocInfo) null);
      assertNotSame(node1, node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isFor());
      assertEquals(143397, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertEquals(35, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      // Undeclared exception!
      try { 
        node2.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(809, 809, 933);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertEquals(3314597, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(933, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertEquals(809, node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertEquals(809, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = null;
      node0.setSourceEncodedPosition(809);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(809, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertEquals(809, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(809, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = new Node(31, 53, 54);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertEquals(54, node2.getCharno());
      assertFalse(node2.isOr());
      assertTrue(node2.isDelProp());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isWhile());
      assertEquals(31, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFor());
      assertEquals(217142, node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(53, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean0 = node2.isQuotedString();
      assertNotSame(node2, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertEquals(54, node2.getCharno());
      assertFalse(node2.isOr());
      assertTrue(node2.isDelProp());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isWhile());
      assertEquals(31, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFor());
      assertEquals(217142, node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(53, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean0);
      
      JSDocInfo jSDocInfo0 = node2.getJSDocInfo();
      assertNotSame(node2, node0);
      assertNull(jSDocInfo0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertEquals(54, node2.getCharno());
      assertFalse(node2.isOr());
      assertTrue(node2.isDelProp());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isWhile());
      assertEquals(31, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCall());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFor());
      assertEquals(217142, node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(53, node2.getLineno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("length", true);
      assertNotNull(simpleSourceFile0);
      assertEquals("length", simpleSourceFile0.toString());
      assertEquals("length", simpleSourceFile0.getName());
      assertTrue(simpleSourceFile0.isExtern());
      
      int int0 = 35;
      // Undeclared exception!
      try { 
        simpleSourceFile0.getLineOffset((-1653));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number -1653
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber((-754.362343), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node node1 = node0.getLastSibling();
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertEquals(39, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isDo());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      node2.addChildToBack(node0);
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isHook());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertEquals(39, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isDo());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean0 = node0.isBlock();
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(boolean0);
      
      boolean boolean1 = node1.isInstanceOf();
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int0);
      
      boolean boolean2 = node0.isFalse();
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(boolean2);
      
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      
      int int1 = node_SideEffectFlags0.valueOf();
      assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
      assertTrue(int1 == int0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int1);
      
      boolean boolean3 = node0.isFalse();
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(boolean3);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertNull(staticSourceFile0);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      boolean boolean4 = node2.isLabel();
      assertSame(node0, node2);
      assertSame(node0, node1);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node0);
      assertSame(node2, node1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getSourcePosition());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isHook());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertEquals(39, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isName());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNull());
      assertFalse(node2.isDo());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNot());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        node1.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Wmu`}`8[]uG'+", true);
      assertNotNull(simpleSourceFile0);
      assertTrue(simpleSourceFile0.isExtern());
      assertEquals("Wmu`}`8[]uG'+", simpleSourceFile0.getName());
      assertEquals("Wmu`}`8[]uG'+", simpleSourceFile0.toString());
      
      node0.setStaticSourceFile(simpleSourceFile0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(simpleSourceFile0.isExtern());
      assertEquals("Wmu`}`8[]uG'+", simpleSourceFile0.getName());
      assertEquals("Wmu`}`8[]uG'+", simpleSourceFile0.toString());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      boolean boolean0 = node0.isOptionalArg();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isOptionalArg();
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean1);
      
      boolean boolean2 = node0.isOptionalArg();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean2);
      
      simpleErrorReporter0.error("directives", "\n\nSubtree1: ", 46, 45);
      boolean boolean3 = node0.isArrayLit();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean3);
      
      int int0 = node0.getChildCount();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, int0);
      
      boolean boolean4 = node0.isString();
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean4);
      
      boolean boolean5 = node0.isLabel();
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals("Wmu`}`8[]uG'+", node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      boolean boolean0 = node0.isBlock();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isInstanceOf();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int0);
      
      boolean boolean2 = node0.isFalse();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean2);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      boolean boolean3 = node0.isLabel();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(31, "", 33, 31);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(31, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertEquals(31, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals(135199, node0.getSourcePosition());
      assertTrue(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(31, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertEquals(31, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals(135199, node0.getSourcePosition());
      assertTrue(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(31, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertEquals(31, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals(135199, node0.getSourcePosition());
      assertTrue(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean0);
      
      int int0 = node0.getSourcePosition();
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(31, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertEquals(31, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals(135199, node0.getSourcePosition());
      assertTrue(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(135199, int0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      assertNotNull(simpleSourceFile0);
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertFalse(simpleSourceFile0.isExtern());
      
      boolean boolean1 = node0.hasOneChild();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(31, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertEquals(31, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals(135199, node0.getSourcePosition());
      assertTrue(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean1);
      
      node0.setStaticSourceFile(simpleSourceFile0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertEquals(31, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals("", node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertEquals(31, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals(135199, node0.getSourcePosition());
      assertTrue(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertFalse(simpleSourceFile0.isExtern());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got DELPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "Q;uBb";
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      boolean boolean0 = node0.getBooleanProp(111);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      boolean boolean1 = node0.isVarArgs();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      boolean boolean2 = node0.isOptionalArg();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      Node node1 = new Node(209, node0, 1046, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean3 = node1.isNoSideEffectsCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean4 = node0.isLabelName();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      
      node0.setJSType((JSType) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      
      boolean boolean5 = node0.isGetProp();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      
      Node node2 = node1.clonePropsFrom(node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(209, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      
      boolean boolean6 = node1.isEquivalentTo(node0);
      assertSame(node1, node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      
      node2.detachChildren();
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(209, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      
      node2.setIsSyntheticBlock(false);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(209, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      
      node2.setLength(111);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertEquals(209, node2.getType());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      
      boolean boolean7 = node0.isUnscopedQualifiedName();
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      
      Object object0 = node1.getProp(37);
      assertSame(node1, node2);
      assertNull(object0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setThrows();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(23, node_SideEffectFlags0.valueOf());
      
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 209
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber(1196.6600276, 809, 933);
      assertNotNull(node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals(3314597, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(933, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertEquals(809, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.setSourceEncodedPosition(809);
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(809, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(809, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(1196.6600276, 809, 933);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(809, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(933, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(3314597, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node node1 = null;
      node0.setSourceEncodedPosition(809);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(809, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertEquals(809, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      
      Node node1 = new Node(0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFor());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isRegExp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isString());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertFalse(node3.isThrow());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isFalse());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWith());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertEquals(0, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCall());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isComma());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isTrue());
      
      Node node4 = node1.cloneNode();
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIn());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTry());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isString());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isThis());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isParamList());
      assertFalse(node4.isFalse());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isInc());
      assertFalse(node4.isWith());
      assertFalse(node4.isBlock());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isNumber());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isAssign());
      assertFalse(node4.isOr());
      assertFalse(node4.isLabel());
      assertFalse(node4.isReturn());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isQualifiedName());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDec());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isScript());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isContinue());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNull());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isComma());
      assertFalse(node4.isVar());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNew());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isWhile());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertEquals(0, node4.getType());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      
      node4.setSourceEncodedPosition((-1749));
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIn());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTry());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isString());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isThis());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isParamList());
      assertFalse(node4.isFalse());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertEquals(1048575, node4.getLineno());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isInc());
      assertEquals((-1749), node4.getSourcePosition());
      assertFalse(node4.isWith());
      assertFalse(node4.isBlock());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isNumber());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isAssign());
      assertFalse(node4.isOr());
      assertFalse(node4.isLabel());
      assertFalse(node4.isReturn());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isDec());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isScript());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isContinue());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNull());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isComma());
      assertFalse(node4.isVar());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNew());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isWhile());
      assertFalse(node4.isCall());
      assertEquals(2347, node4.getCharno());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertEquals(0, node4.getType());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      
      node1.addSuppression("");
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      
      node0.setDouble((-2905.32844));
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      
      Node node5 = node0.useSourceInfoFrom(node1);
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node5, node0);
      assertSame(node5, node2);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
      assertFalse(node5.isDelProp());
      assertTrue(node5.isNumber());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isIn());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isFunction());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isInc());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isComma());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isAnd());
      assertFalse(node5.isName());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isNot());
      assertFalse(node5.isNull());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTrue());
      assertFalse(node5.isVoid());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isString());
      assertFalse(node5.isCall());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isReturn());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssignAdd());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDo());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isContinue());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabel());
      assertFalse(node5.isParamList());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isStringKey());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isTry());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isScript());
      assertFalse(node5.isCase());
      assertFalse(node5.isCatch());
      assertFalse(node5.isWith());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isBlock());
      assertFalse(node5.isFor());
      assertFalse(node5.isHook());
      assertFalse(node5.isThis());
      assertEquals(39, node5.getType());
      
      node0.getIntProp(2);
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      
      boolean boolean0 = node3.isVarArgs();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertNotSame(node3, node4);
      assertSame(node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFor());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isRegExp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isString());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertFalse(node3.isThrow());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isFalse());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWith());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertEquals(0, node3.getType());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCall());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.isComma());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isTrue());
      
      boolean boolean1 = node4.isName();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node5));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIn());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isTry());
      assertFalse(node4.isCase());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isString());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isThis());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isParamList());
      assertFalse(node4.isFalse());
      assertFalse(node4.isHook());
      assertFalse(node4.isThrow());
      assertEquals(1048575, node4.getLineno());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isInc());
      assertEquals((-1749), node4.getSourcePosition());
      assertFalse(node4.isWith());
      assertFalse(node4.isBlock());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isNumber());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isAssign());
      assertFalse(node4.isOr());
      assertFalse(node4.isLabel());
      assertFalse(node4.isReturn());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isDec());
      assertFalse(node4.isDo());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isScript());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isAnd());
      assertFalse(node4.isContinue());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNull());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isComma());
      assertFalse(node4.isVar());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNew());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isWhile());
      assertFalse(node4.isCall());
      assertEquals(2347, node4.getCharno());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertEquals(0, node4.getType());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      
      boolean boolean2 = node5.isGetterDef();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node5, node0);
      assertSame(node5, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
      assertFalse(node5.isDelProp());
      assertTrue(node5.isNumber());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isIn());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isFunction());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isInc());
      assertFalse(node5.isThrow());
      assertFalse(node5.isFalse());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isComma());
      assertFalse(node5.isBreak());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isAnd());
      assertFalse(node5.isName());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isNot());
      assertFalse(node5.isNull());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isTrue());
      assertFalse(node5.isVoid());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isString());
      assertFalse(node5.isCall());
      assertFalse(node5.isWhile());
      assertFalse(node5.isAssign());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isReturn());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssignAdd());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isOr());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDo());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isContinue());
      assertFalse(node5.isVar());
      assertFalse(node5.isLabel());
      assertFalse(node5.isParamList());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isStringKey());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isTry());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isScript());
      assertFalse(node5.isCase());
      assertFalse(node5.isCatch());
      assertFalse(node5.isWith());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isBlock());
      assertFalse(node5.isFor());
      assertFalse(node5.isHook());
      assertFalse(node5.isThis());
      assertEquals(39, node5.getType());
      
      boolean boolean3 = node0.isVarArgs();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      
      boolean boolean4 = node3.isTrue();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertNotSame(node3, node4);
      assertSame(node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node5));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = node5.isVarArgs();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node5, node0);
      assertSame(node5, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
      
      // Undeclared exception!
      try { 
        FunctionType.getTopDefiningInterface((ObjectType) null, "Named type with empty name component");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean1 = node0.isOptionalArg();
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean1);
      
      Node node1 = new Node(53, node0, (-422), 12);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(53, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertEquals(53, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean2 = node1.isNoSideEffectsCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertEquals(53, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isLabelName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean3);
      
      node0.setJSType((JSType) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      boolean boolean4 = node0.isGetProp();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean4);
      
      boolean boolean5 = node0.isCase();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isReturn());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node0.getBooleanProp(111);
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isVarArgs();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertTrue(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean1);
      
      Node node1 = Node.newString(2, "jLQA[IzUDer", 0, 209);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isContinue());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(209, node1.getCharno());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node2 = new Node(12, node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isContinue());
      assertEquals(2, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(209, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(209, node1.getCharno());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isComma());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertEquals(12, node2.getType());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOr());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node node3 = null;
      try {
        node3 = new Node(32, node1, node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber((-754.362343), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      
      Node node1 = node0.getLastSibling();
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(39, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isWhile());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node1);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(39, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isInc());
      assertTrue(node2.isNumber());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNot());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      node2.addChildToBack(node0);
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(39, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertEquals(0, node2.getSourcePosition());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertNull(node2.getSourceFileName());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isInc());
      assertTrue(node2.isNumber());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNot());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThis());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean0 = node0.isBlock();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(boolean0);
      
      boolean boolean1 = node1.isInstanceOf();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(39, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isString());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertTrue(node1.isNumber());
      assertFalse(node1.isWhile());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int0);
      
      boolean boolean2 = node0.isFalse();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(boolean2);
      
      Node node3 = null;
      try {
        node3 = new Node(15, node0, node1, node2, 4095, (-3190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      Node node1 = new Node(1441, 38, 131);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVoid());
      assertEquals(155779, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertEquals(1441, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertEquals(131, node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      assertNotNull(node0);
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetterDef());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      
      String string0 = null;
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      Node node1 = new Node(1441, 38, 131);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(155779, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isName());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertEquals(131, node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertEquals(1441, node1.getType());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("new child has existing parent");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println((-1764.820985));
      // Undeclared exception!
      try { 
        node1.appendStringTree(mockPrintWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1441
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      Node node1 = new Node((-883), node0, node0, node0, node0, (-3278), 15);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertEquals((-883), node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      int int0 = (-3068);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -883
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      int int0 = 847;
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber((-754.362343), 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = node0.getLastSibling();
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node1);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isVoid());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isStringKey());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node2.addChildToBack(node0);
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertSame(node2, node1);
      assertSame(node2, node0);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertEquals(39, node1.getType());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isVoid());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isStringKey());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNull());
      assertFalse(node2.isName());
      assertFalse(node2.isCatch());
      assertEquals(39, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean0 = node0.isBlock();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean0);
      
      boolean boolean1 = node1.isInstanceOf();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertSame(node1, node2);
      assertSame(node1, node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertEquals(39, node1.getType());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, int0);
      
      boolean boolean2 = node0.isFalse();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean2);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertSame(node0, node1);
      assertSame(node0, node2);
      assertNull(staticSourceFile0);
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 16384;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(16384, (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "String node not created with Node.newString";
      Node node0 = Node.newString("String node not created with Node.newString");
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(233, node0, node0, node0, node0, 125, 31);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(233, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean0 = node1.isGetElem();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(233, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(boolean0);
      
      Node node2 = Node.newString(54, "String node not created with Node.newString");
      assertNotSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isHook());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCall());
      assertEquals(54, node2.getType());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      // Undeclared exception!
      try { 
        node2.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node(44, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertTrue(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(44, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      int int0 = node0.getIndexOfChild(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertTrue(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(44, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), int0);
      
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertTrue(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(44, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertEquals(44, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNew());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.isTrue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      simpleErrorReporter0.error("com.google.javascript.rhino.Node$AncestorIterable", "", 4, 1791);
      Iterable<Node> iterable0 = node2.siblings();
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertTrue(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(44, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertEquals(44, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNew());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.isTrue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node2.isExprResult();
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertTrue(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(44, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertEquals(44, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNew());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.isTrue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean0);
      
      Object object0 = node1.getProp(177);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNull(object0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertTrue(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertEquals(44, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setThrows();
      assertEquals(23, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      String string0 = "";
      String string1 = "Jw f5M}^;x]ecJ|t!FV";
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node_FileLevelJsDocBuilder0.append("6VRA{/wv-PX");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isExprResult();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(boolean0);
      
      String string2 = node0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isQualifiedName();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(boolean1);
      
      node0.putProp(2201, "com.google.javascript.rhino.jstype.UnknownType");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.setLineno(0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpect prop id 2201
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("String n^de not created with No:e.newStri<g", 220, 220);
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(220, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(220, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(901340, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.putIntProp(125, 220);
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(220, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(220, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(901340, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(220, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(220, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(901340, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean0);
      
      Node node1 = Node.newNumber((double) 44, 35, 40);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(35, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertEquals(40, node1.getCharno());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals(143400, node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertTrue(node1.isNumber());
      assertFalse(node1.isTry());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      
      node0.putBooleanProp(44, true);
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      
      int int0 = node0.getLineno();
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-1), int0);
      
      boolean boolean0 = node0.isHook();
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(boolean0);
      
      int int1 = node0.getCharno();
      assertTrue(int1 == int0);
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-1), int1);
      
      try { 
        node0.setDouble(44);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000003] [is_optional_param: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("0aM5");
      assertNotNull(node0);
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node(45, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(45, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(45, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(40, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isThrow());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(45, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(40, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isThrow());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isNew());
      assertFalse(node3.isName());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNull());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isIf());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isIn());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isString());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCase());
      assertEquals(45, node3.getType());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isExprResult());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isWith());
      assertTrue(node3.hasOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node4 = node0.cloneNode();
      assertSame(node0, node2);
      assertNotSame(node0, node4);
      assertNotSame(node4, node0);
      assertNotSame(node4, node2);
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isInc());
      assertFalse(node4.isHook());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isCase());
      assertFalse(node4.isIn());
      assertFalse(node4.isAnd());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isVoid());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isNot());
      assertFalse(node4.isEmpty());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isOr());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isReturn());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNull());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isName());
      assertFalse(node4.isAssign());
      assertFalse(node4.isCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isComma());
      assertFalse(node4.isDec());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertTrue(node4.isString());
      assertFalse(node4.isVar());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDo());
      assertFalse(node4.isStringKey());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isLabel());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isParamList());
      assertFalse(node4.isAssignAdd());
      assertEquals(40, node4.getType());
      assertFalse(node4.isLabelName());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isContinue());
      assertFalse(node4.isFunction());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isScript());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isThis());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isFor());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node2.setSourceEncodedPosition(50);
      assertSame(node0, node2);
      assertNotSame(node0, node4);
      assertSame(node1, node3);
      assertNotSame(node2, node4);
      assertSame(node2, node0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(50, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(45, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(50, node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(40, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertEquals(50, node2.getCharno());
      assertFalse(node2.isThrow());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node3.addSuppression("{proxy:");
      assertSame(node0, node2);
      assertNotSame(node0, node4);
      assertSame(node1, node3);
      assertNotSame(node2, node4);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(50, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertEquals(50, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals(45, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(50, node2.getSourcePosition());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertEquals(40, node2.getType());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertEquals(50, node2.getCharno());
      assertFalse(node2.isThrow());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertFalse(node3.isNew());
      assertFalse(node3.isName());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNull());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isIf());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNE());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isIn());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isString());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCase());
      assertEquals(45, node3.getType());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isExprResult());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isWith());
      assertTrue(node3.hasOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      try { 
        node1.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SHEQ [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      int int0 = node0.getLineno();
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), int0);
      
      boolean boolean0 = node0.isHook();
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean0);
      
      int int1 = node0.getCharno();
      assertTrue(int1 == int0);
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), int1);
      
      try { 
        node0.setDouble(46);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(Integer.MAX_VALUE, nodeArray0, 2456, 159);
      assertEquals(0, nodeArray0.length);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2456, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals(Integer.MAX_VALUE, node0.getType());
      assertEquals(159, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(10059935, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      Node node1 = new Node(980, node0);
      assertEquals(0, nodeArray0.length);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2456, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals(Integer.MAX_VALUE, node0.getType());
      assertEquals(159, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(10059935, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(980, node1.getType());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      node1.setLineno(1);
      assertEquals(0, nodeArray0.length);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2456, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals(Integer.MAX_VALUE, node0.getType());
      assertEquals(159, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(10059935, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(4096, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(980, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node2 = null;
      try {
        node2 = new Node(45, node0, node1, node1, node0, 0, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      String string0 = "";
      String string1 = "Jw f5M}^;x]ecJ|t!FV";
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      node_FileLevelJsDocBuilder0.append("6VRA{/wv-PX");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      boolean boolean0 = node0.isExprResult();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(boolean0);
      
      String string2 = node0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      boolean boolean1 = node0.isQualifiedName();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(boolean1);
      
      node0.putProp(2201, "com.google.javascript.rhino.jstype.UnknownType");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      node0.setLineno(0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isParamList());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpect prop id 2201
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      String string0 = null;
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isRegExp());
      assertEquals(4095, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      node1.setSourceFileForTesting("slash_v");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertEquals(39, node0.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertEquals("slash_v", node1.getSourceFileName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isRegExp());
      assertEquals(4095, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      
      Node node1 = new Node(41, node0, 2, 16);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(8208, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(41, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertTrue(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(8208, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(41, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertTrue(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node2.isDo());
      assertEquals(39, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isQualifiedName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isBlock());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isCatch());
      assertEquals(8208, node2.getSourcePosition());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isScript());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertEquals(2, node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertTrue(node2.isNumber());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isFor());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertEquals(16, node2.getCharno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(8208, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(41, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertTrue(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node2.isDo());
      assertEquals(39, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isQualifiedName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isBlock());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isCatch());
      assertEquals(8208, node2.getSourcePosition());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isScript());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabel());
      assertEquals(2, node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertTrue(node2.isNumber());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isFor());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertEquals(16, node2.getCharno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTry());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFunction());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIn());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInc());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isCall());
      assertFalse(node3.isThrow());
      assertFalse(node3.isName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isComma());
      assertFalse(node3.isWhile());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertEquals(41, node3.getType());
      assertFalse(node3.isNot());
      assertFalse(node3.isString());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDo());
      assertEquals(8208, node3.getSourcePosition());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertTrue(node3.isNull());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isOr());
      assertFalse(node3.isStringKey());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isAdd());
      assertEquals(2, node3.getLineno());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertEquals(16, node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNumber());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isGetterDef());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node4 = Node.newString(8, "{'-#p", 45, 3157);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isFor());
      assertFalse(node4.isNE());
      assertFalse(node4.isVoid());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isTrue());
      assertFalse(node4.isFunction());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isIn());
      assertEquals(3157, node4.getCharno());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isInc());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isWith());
      assertFalse(node4.isScript());
      assertEquals(187477, node4.getSourcePosition());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isCase());
      assertFalse(node4.isTry());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isNumber());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssign());
      assertFalse(node4.isDec());
      assertFalse(node4.isOr());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isContinue());
      assertEquals(45, node4.getLineno());
      assertFalse(node4.isVar());
      assertFalse(node4.isAdd());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isDo());
      assertFalse(node4.isBreak());
      assertFalse(node4.isNull());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isComma());
      assertFalse(node4.isAnd());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isWhile());
      assertFalse(node4.isString());
      assertEquals(8, node4.getType());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isNot());
      assertFalse(node4.isReturn());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFromExterns());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node5 = node1.cloneNode();
      assertSame(node0, node2);
      assertNotSame(node1, node5);
      assertSame(node1, node3);
      assertNotSame(node5, node3);
      assertNotSame(node5, node1);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(8208, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(41, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertTrue(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node5.isRegExp());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isCatch());
      assertFalse(node5.isFunction());
      assertFalse(node5.isTry());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isName());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isFor());
      assertFalse(node5.isCall());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTrue());
      assertFalse(node5.isNE());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isIf());
      assertFalse(node5.isCase());
      assertFalse(node5.isDo());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isBlock());
      assertFalse(node5.isLabel());
      assertFalse(node5.isHook());
      assertFalse(node5.isVar());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNumber());
      assertFalse(node5.isGetterDef());
      assertEquals(2, node5.getLineno());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isParamList());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNot());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isScript());
      assertFalse(node5.isObjectLit());
      assertTrue(node5.isNull());
      assertFalse(node5.isWith());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertEquals(16, node5.getCharno());
      assertFalse(node5.isGetProp());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertFalse(node5.isBreak());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.isOr());
      assertFalse(node5.isExprResult());
      assertEquals(41, node5.getType());
      assertFalse(node5.isString());
      assertEquals(8208, node5.getSourcePosition());
      assertFalse(node5.isContinue());
      assertFalse(node5.isIn());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isReturn());
      assertFalse(node5.isInc());
      assertFalse(node5.isWhile());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isAnd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node5.setSourceEncodedPosition((-1749));
      assertSame(node0, node2);
      assertNotSame(node1, node5);
      assertSame(node1, node3);
      assertNotSame(node5, node3);
      assertNotSame(node5, node1);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(8208, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(41, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertTrue(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node5.isRegExp());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isCatch());
      assertEquals(2347, node5.getCharno());
      assertFalse(node5.isFunction());
      assertFalse(node5.isTry());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isName());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isFor());
      assertFalse(node5.isCall());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTrue());
      assertFalse(node5.isNE());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isIf());
      assertFalse(node5.isCase());
      assertFalse(node5.isDo());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isAdd());
      assertFalse(node5.isNew());
      assertFalse(node5.isBlock());
      assertEquals(1048575, node5.getLineno());
      assertFalse(node5.isLabel());
      assertFalse(node5.isHook());
      assertFalse(node5.isVar());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isNumber());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isParamList());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNot());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isScript());
      assertFalse(node5.isObjectLit());
      assertTrue(node5.isNull());
      assertFalse(node5.isWith());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isGetProp());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isAssign());
      assertFalse(node5.isBreak());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertEquals((-1749), node5.getSourcePosition());
      assertFalse(node5.isOr());
      assertFalse(node5.isExprResult());
      assertEquals(41, node5.getType());
      assertFalse(node5.isString());
      assertFalse(node5.isContinue());
      assertFalse(node5.isIn());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isReturn());
      assertFalse(node5.isInc());
      assertFalse(node5.isWhile());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isAnd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node1.addSuppression("");
      assertSame(node0, node2);
      assertNotSame(node1, node5);
      assertSame(node1, node3);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(8208, node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNumber());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(41, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertTrue(node1.isNull());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      node0.setDouble((-2905.32844));
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertEquals(8208, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      
      // Undeclared exception!
      try { 
        node1.removeChild(node5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertTrue(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertTrue(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFor());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFunction());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isDo());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNull());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNot());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isHook());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isCase());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isIn());
      assertEquals(1, node3.getChildCount());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      
      Node node4 = node1.cloneNode();
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFunction());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFor());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isCase());
      assertFalse(node4.isString());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isStringKey());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isParamList());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isNew());
      assertEquals(0, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isComma());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isVar());
      assertFalse(node4.isOr());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertFalse(node4.isNull());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isScript());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isWith());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isReturn());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isContinue());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isNot());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isAnd());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isInc());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThrow());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isIn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isCatch());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      
      node4.setSourceEncodedPosition(2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertNotSame(node4, node3);
      assertNotSame(node4, node1);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFunction());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFor());
      assertEquals(0, node4.getChildCount());
      assertEquals(0, node4.getLineno());
      assertFalse(node4.isCase());
      assertFalse(node4.isString());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isParamList());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isNew());
      assertEquals(0, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isComma());
      assertFalse(node4.isDo());
      assertFalse(node4.isWhile());
      assertFalse(node4.isVar());
      assertFalse(node4.isOr());
      assertEquals(2, node4.getCharno());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertFalse(node4.isNull());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isScript());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isWith());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isReturn());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isContinue());
      assertFalse(node4.isNumber());
      assertFalse(node4.isNot());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isAnd());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isInc());
      assertFalse(node4.isBlock());
      assertFalse(node4.isThrow());
      assertFalse(node4.isThis());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isIn());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isCatch());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertEquals(2, node4.getSourcePosition());
      assertFalse(node4.isNE());
      
      node1.addSuppression("");
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      
      node0.setDouble(8);
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      
      Node node5 = node0.useSourceInfoFrom(node1);
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node5, node0);
      assertSame(node5, node2);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node5.isLabel());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isReturn());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isDec());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isAssign());
      assertFalse(node5.isOr());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isContinue());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isBlock());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isScript());
      assertFalse(node5.isWith());
      assertFalse(node5.isNot());
      assertEquals(39, node5.getType());
      assertFalse(node5.isWhile());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isThis());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isFalse());
      assertFalse(node5.isAnd());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInc());
      assertFalse(node5.isFunction());
      assertFalse(node5.isThrow());
      assertFalse(node5.isNE());
      assertFalse(node5.isIn());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isIf());
      assertFalse(node5.isDelProp());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isHook());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isCase());
      assertFalse(node5.isString());
      assertFalse(node5.isFor());
      assertTrue(node5.isNumber());
      assertFalse(node5.isTry());
      assertFalse(node5.isParamList());
      assertFalse(node5.isNull());
      assertFalse(node5.isComma());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isCall());
      assertFalse(node5.isBreak());
      assertFalse(node5.isVoid());
      assertFalse(node5.isNew());
      assertFalse(node5.isTrue());
      assertFalse(node5.isAdd());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isVar());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      
      node0.getIntProp(2);
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      
      node3.isVarArgs();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotSame(node3, node4);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node5));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertTrue(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFor());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFunction());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isDo());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNull());
      assertFalse(node3.isDec());
      assertFalse(node3.isBreak());
      assertFalse(node3.isAssign());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNot());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertFalse(node3.isHook());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThrow());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertFalse(node3.isCase());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isIn());
      assertEquals(1, node3.getChildCount());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isThis());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isWith());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      
      String string0 = node2.toString();
      assertSame(node0, node5);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertNotSame(node1, node4);
      assertSame(node2, node5);
      assertSame(node2, node0);
      assertNotNull(string0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertTrue(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      
      Node node6 = Node.newString(308, "NUMBER 8.0");
      assertNotNull(node6);
      assertFalse(node6.equals((Object)node0));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.isNot());
      assertFalse(node6.isAnd());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isComma());
      assertFalse(node6.isThis());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isWith());
      assertFalse(node6.isAssign());
      assertFalse(node6.isLabelName());
      assertFalse(node6.hasChildren());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isUnscopedQualifiedName());
      assertFalse(node6.isFromExterns());
      assertFalse(node6.isQualifiedName());
      assertFalse(node6.isGetProp());
      assertEquals((-1), node6.getCharno());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.isScript());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isString());
      assertFalse(node6.isNumber());
      assertFalse(node6.isCase());
      assertFalse(node6.isBlock());
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isHook());
      assertFalse(node6.isContinue());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isFalse());
      assertFalse(node6.isThrow());
      assertFalse(node6.isNE());
      assertFalse(node6.isIf());
      assertFalse(node6.isInc());
      assertFalse(node6.isSetterDef());
      assertEquals(308, node6.getType());
      assertFalse(node6.isIn());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isVoid());
      assertFalse(node6.isRegExp());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isCatch());
      assertFalse(node6.isFunction());
      assertFalse(node6.isFor());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isParamList());
      assertFalse(node6.isTry());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isDo());
      assertFalse(node6.isWhile());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isReturn());
      assertFalse(node6.isLabel());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isDec());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isName());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isCall());
      assertFalse(node6.isBreak());
      assertFalse(node6.isNull());
      assertFalse(node6.isVar());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isAdd());
      assertFalse(node6.isNew());
      assertFalse(node6.isOr());
      assertFalse(node6.isTrue());
      assertNull(node6.getSourceFileName());
      
      Node node7 = null;
      try {
        node7 = new Node(2301, (Node[]) null, 1268, 776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(1311);
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(1311, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(1311, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      node0.setJSDocInfo((JSDocInfo) null);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(1311, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      node0.removeProp(1311);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(1311, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getType());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getType());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNot());
      assertEquals(39, node2.getType());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isScript());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node3 = node1.useSourceInfoIfMissingFrom(node2);
      assertSame(node0, node2);
      assertSame(node1, node3);
      assertSame(node2, node0);
      assertSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getType());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertTrue(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNot());
      assertEquals(39, node2.getType());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isScript());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDec());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAnd());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isFromExterns());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isScript());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNumber());
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertEquals(0, node3.getType());
      assertFalse(node3.isNew());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isName());
      assertFalse(node3.isBreak());
      assertFalse(node3.isWhile());
      assertFalse(node3.isComma());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isCase());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isString());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThrow());
      assertFalse(node3.isThis());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isFalse());
      assertFalse(node3.isIn());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInstanceOf());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      Node node4 = Node.newString(8, "{'-#p", 45, 3157);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isEmpty());
      assertEquals(3157, node4.getCharno());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIn());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isTrue());
      assertFalse(node4.isString());
      assertFalse(node4.isCase());
      assertFalse(node4.isTry());
      assertFalse(node4.isVoid());
      assertFalse(node4.isHook());
      assertFalse(node4.isCatch());
      assertFalse(node4.isFor());
      assertEquals(8, node4.getType());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isAnd());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isFunction());
      assertFalse(node4.isInc());
      assertEquals(45, node4.getLineno());
      assertFalse(node4.isContinue());
      assertFalse(node4.isThrow());
      assertFalse(node4.isFalse());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isNumber());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isOr());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isScript());
      assertEquals(187477, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isCall());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWith());
      assertFalse(node4.isReturn());
      assertFalse(node4.isBlock());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isComma());
      assertFalse(node4.isDec());
      assertFalse(node4.isNull());
      assertFalse(node4.isThis());
      assertFalse(node4.isParamList());
      assertFalse(node4.isName());
      assertFalse(node4.isBreak());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isAdd());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isVar());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isLabel());
      assertEquals(0, node4.getChildCount());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string0 = "";
      Node node5 = node1.cloneNode();
      assertSame(node0, node2);
      assertNotSame(node1, node5);
      assertSame(node1, node3);
      assertNotSame(node5, node1);
      assertNotSame(node5, node3);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getType());
      assertFalse(node5.isReturn());
      assertFalse(node5.isOr());
      assertFalse(node5.isLabel());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isCall());
      assertFalse(node5.isScript());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isDec());
      assertFalse(node5.isBlock());
      assertFalse(node5.isWhile());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isWith());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isCatch());
      assertFalse(node5.isNot());
      assertFalse(node5.isAnd());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isFalse());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInc());
      assertFalse(node5.isThrow());
      assertFalse(node5.isIn());
      assertFalse(node5.isString());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNE());
      assertFalse(node5.isHook());
      assertFalse(node5.isTry());
      assertEquals(0, node5.getType());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isComma());
      assertFalse(node5.isCase());
      assertFalse(node5.isThis());
      assertFalse(node5.isFor());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isBreak());
      assertFalse(node5.isNull());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTrue());
      assertFalse(node5.isName());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isVar());
      assertFalse(node5.isAssignAdd());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node5.setSourceEncodedPosition((-1749));
      assertSame(node0, node2);
      assertNotSame(node1, node5);
      assertSame(node1, node3);
      assertNotSame(node5, node1);
      assertNotSame(node5, node3);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getType());
      assertFalse(node5.isReturn());
      assertFalse(node5.isOr());
      assertFalse(node5.isLabel());
      assertFalse(node5.isQualifiedName());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertEquals(1048575, node5.getLineno());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isCall());
      assertFalse(node5.isScript());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isDec());
      assertFalse(node5.isBlock());
      assertFalse(node5.isWhile());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isWith());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isCatch());
      assertFalse(node5.isNot());
      assertFalse(node5.isAnd());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isFalse());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInc());
      assertFalse(node5.isThrow());
      assertFalse(node5.isIn());
      assertFalse(node5.isString());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isIf());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNE());
      assertFalse(node5.isHook());
      assertFalse(node5.isTry());
      assertEquals(0, node5.getType());
      assertEquals((-1749), node5.getSourcePosition());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isComma());
      assertFalse(node5.isCase());
      assertFalse(node5.isThis());
      assertFalse(node5.isFor());
      assertEquals(0, node5.getChildCount());
      assertEquals(2347, node5.getCharno());
      assertFalse(node5.isBreak());
      assertFalse(node5.isNull());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTrue());
      assertFalse(node5.isName());
      assertFalse(node5.isParamList());
      assertFalse(node5.isStringKey());
      assertNull(node5.getSourceFileName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isVar());
      assertFalse(node5.isAssignAdd());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node1.addSuppression("");
      assertSame(node0, node2);
      assertNotSame(node1, node5);
      assertSame(node1, node3);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getType());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      node0.setDouble((-2905.32844));
      assertSame(node0, node2);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node1.removeChild(node5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      assertNotNull(node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(1441, 38, 131);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertEquals(155779, node1.getSourcePosition());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertEquals(131, node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertEquals(1441, node1.getType());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      int int0 = 122;
      // Undeclared exception!
      try { 
        node1.getExistingIntProp((-55));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -55
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      simpleErrorReporter0.error("", "", (-1281), (-1281));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      int int0 = 0;
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_NAMES;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 308;
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getSourceName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      
      Node node0 = jSDocInfo0.getAssociatedNode();
      assertNull(node0);
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getSourceName());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      
      Node node1 = null;
      try {
        node1 = new Node(308, (Node) null, (Node) null, (Node) null, (Node) null, (-565), 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      node0.setLength(0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      String string0 = "AXix=c+4E{XaX";
      Node node1 = Node.newString(36, "AXix=c+4E{XaX");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(36, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertFalse(node1.isQualifiedName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = new Node(31, node0, node0, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertEquals(36, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNot());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertFalse(node1.isQualifiedName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isComma());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isScript());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertEquals(31, node2.getType());
      assertNull(node2.getSourceFileName());
      assertTrue(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFunction());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertEquals(2, node2.getChildCount());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = "com.google.common.collect.Lists$1";
      Node node0 = Node.newString((-2795), "com.google.common.collect.Lists$1", (-2795), 53);
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertEquals((-2795), node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAnd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean1 = node0.isBreak();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertEquals((-2795), node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAnd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean1);
      
      Node node1 = new Node(41);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertEquals(41, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isNull());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isIn());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isParamList());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertEquals(83, node2.getType());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      node1.addSuppression("");
      assertNotSame(node1, node2);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isIn());
      assertEquals(41, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isNull());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 47;
      Node node0 = Node.newNumber((double) 47);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      InputId inputId0 = node0.getInputId();
      assertNull(inputId0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node(1919, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertEquals(1919, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node1.setStaticSourceFile((StaticSourceFile) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertEquals(1919, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node2 = null;
      try {
        node2 = new Node(16, node1, node1, node0, node1, 0, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "String node not created with Node.newString";
      Node node0 = Node.newString("String node not created with Node.newString", 233, 233);
      assertNotNull(node0);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node0.putIntProp(125, 233);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node1 = new Node(233, node0, node0, node0, node0, 125, 31);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertEquals(233, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      boolean boolean0 = node1.isOr();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertEquals(233, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8), 2626, 2626);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      Node node1 = new Node(45, node0, 45, 45);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertEquals(2626, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertEquals(10758722, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertEquals(2626, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(45, node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertEquals(184365, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertTrue(node1.hasChildren());
      assertEquals(45, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(45, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.setSourceEncodedPositionForTree(122);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(122, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(122, node0.getSourcePosition());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      boolean boolean0 = node0.hasChild(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(122, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(122, node0.getSourcePosition());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(45, node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertEquals(184365, node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isString());
      assertTrue(node1.hasChildren());
      assertEquals(45, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertEquals(45, node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      assertNotNull(node0);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean0 = node0.getBooleanProp(111);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = node0.isOptionalArg();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node(209, node0, 1046, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean2 = node1.isNoSideEffectsCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      
      boolean boolean3 = node0.isLabelName();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      node0.setJSType((JSType) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      boolean boolean4 = node0.isGetProp();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      boolean boolean5 = node0.isCase();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      Node node2 = node1.clonePropsFrom(node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(209, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      
      node2.detachChildren();
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(209, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      
      node2.setIsSyntheticBlock(false);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(209, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      
      node2.setLength(111);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(209, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      
      boolean boolean6 = node0.isUnscopedQualifiedName();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      node2.setIsSyntheticBlock(false);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNE());
      assertEquals(209, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSetterDef());
      assertEquals(209, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertEquals(1046, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node3 = Node.newString((-1129), "\"r*,3NCII4gQ.");
      assertNotSame(node3, node0);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.isCall());
      assertFalse(node3.isVar());
      assertNull(node3.getSourceFileName());
      assertEquals((-1129), node3.getType());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isBlock());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isParamList());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(node3.isIf());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isBreak());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isCase());
      assertFalse(node3.isAnd());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNew());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("f)(&e3}X", 2451, (-4187));
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      boolean boolean0 = node0.isBlock();
      assertEquals(40, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "String node not created with Node.newString";
      Node node0 = Node.newString("String node not created with Node.newString", 233, 233);
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isCall());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node node1 = new Node(233, node0, node0, node0, node0, 125, 31);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isCall());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertEquals(233, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node1.isOr();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isCall());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertEquals(233, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean0);
      
      Node node2 = node0.clonePropsFrom(node1);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isCall());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertEquals(233, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(233, node2.getLineno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(954601, node2.getSourcePosition());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWhile());
      assertEquals(233, node2.getCharno());
      assertFalse(node2.isBlock());
      assertTrue(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isContinue());
      assertEquals(40, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string1 = node2.toString();
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNotNull(string1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isCall());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertEquals(233, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(233, node2.getLineno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(954601, node2.getSourcePosition());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWhile());
      assertEquals(233, node2.getCharno());
      assertFalse(node2.isBlock());
      assertTrue(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isContinue());
      assertEquals(40, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals("STRING String node not created with Node.newString 233", string1);
      
      String string2 = node2.getQualifiedName();
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertNull(string2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isCall());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertEquals(31, node1.getCharno());
      assertFalse(node1.isTrue());
      assertEquals(125, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertEquals(512031, node1.getSourcePosition());
      assertFalse(node1.isRegExp());
      assertEquals(233, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(233, node2.getLineno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(954601, node2.getSourcePosition());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isWhile());
      assertEquals(233, node2.getCharno());
      assertFalse(node2.isBlock());
      assertTrue(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isReturn());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isIf());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isContinue());
      assertEquals(40, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node3 = Node.newString(46, "String node not created with Node.newString");
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.isNumber());
      assertFalse(node3.hasChildren());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isGetElem());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isOr());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAdd());
      assertEquals(46, node3.getType());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isVar());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isFalse());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNull());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isWith());
      assertFalse(node3.isCase());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isHook());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isThis());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 233
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node0.getBooleanProp(111);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isVarArgs();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(boolean1);
      
      Node node1 = new Node(441, 36, 54);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, node1.getCharno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertEquals(147510, node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertEquals(441, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(37);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 37
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesThis();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      int int0 = Node.mergeLineCharNo(569, 1523);
      assertEquals(2332147, int0);
      
      Node node0 = Node.newString(40, "F", (-225), (-3119));
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node0.isQuotedString();
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isLabelName();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = node0.isVarArgs();
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(boolean1);
      
      boolean boolean2 = node0.isTry();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isRegExp();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(boolean3);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(4, node1.getSourcePosition());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4, node1.getCharno());
      assertEquals(4, node2.getCharno());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isParamList());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isThrow());
      assertEquals(83, node2.getType());
      assertFalse(node2.isFalse());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isInc());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isIn());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isCall());
      assertEquals(4, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      node2.setIsSyntheticBlock(false);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(4, node1.getSourcePosition());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4, node1.getCharno());
      assertEquals(4, node2.getCharno());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isParamList());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isThrow());
      assertEquals(83, node2.getType());
      assertFalse(node2.isFalse());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isInc());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isIn());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isCall());
      assertEquals(4, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node3 = new Node(52, node2, node0, node2, 54, 4);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isReturn());
      assertFalse(node0.isString());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isObjectLit());
      assertEquals(4, node3.getCharno());
      assertFalse(node3.isAnd());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isThrow());
      assertFalse(node3.isDo());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isString());
      assertFalse(node3.isContinue());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isOr());
      assertFalse(node3.isName());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isAssign());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCall());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDefaultCase());
      assertEquals(54, node3.getLineno());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertEquals(221188, node3.getSourcePosition());
      assertFalse(node3.isCatch());
      assertFalse(node3.isArrayLit());
      assertTrue(node3.isInstanceOf());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertEquals(52, node3.getType());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isVar());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertFalse(node3.isIn());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNE());
      assertFalse(node3.isNumber());
      assertFalse(node3.isThis());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isHook());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(4, node1.getSourcePosition());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4, node1.getCharno());
      assertEquals(4, node2.getCharno());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isParamList());
      assertFalse(node2.isNot());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isThrow());
      assertEquals(83, node2.getType());
      assertFalse(node2.isFalse());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isInc());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNE());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isIn());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isCall());
      assertEquals(4, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      boolean boolean4 = node1.isVoid();
      assertSame(node1, node2);
      assertNotSame(node1, node3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertEquals(83, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(4, node1.getSourcePosition());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertTrue(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4, node1.getCharno());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = Node.extractLineno(47);
      assertEquals(0, int0);
      
      Node node0 = Node.newString("I~;]>J_+iCHaSmPK1,Z", 172, 0);
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = node0.cloneNode();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      node1.putIntProp(49, (-385));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      String string0 = node1.getString();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(string0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node1.isString());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(40, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals("I~;]>J_+iCHaSmPK1,Z", string0);
      
      Node node2 = node0.getAncestor(0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNew());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertEquals(172, node2.getLineno());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertEquals(704512, node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isBreak());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(47, (-1124), (-1306));
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals(47, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertTrue(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      try { 
        node0.setDouble((-642.8895496405185));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // REGEXP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = Node.extractLineno(47);
      assertEquals(0, int0);
      
      Node node0 = Node.newString("I~;]>J_+iCHaSmPK1,Z", 172, 0);
      assertNotNull(node0);
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.setOptionalArg(false);
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = node0.cloneNode();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getCharno());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCall());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      String string0 = node1.getString();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(string0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getCharno());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCall());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals("I~;]>J_+iCHaSmPK1,Z", string0);
      
      Node node2 = node0.getAncestor(0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isScript());
      assertFalse(node2.isFromExterns());
      assertEquals(172, node2.getLineno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWhile());
      assertFalse(node2.isThrow());
      assertEquals(704512, node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertEquals(40, node2.getType());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertTrue(node2.isString());
      assertFalse(node2.isDo());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("Q;uBb", 209, (-4096));
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean0 = node0.getBooleanProp(111);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean1 = node0.isVarArgs();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean2 = node0.isOptionalArg();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      Node node1 = new Node(209, node0, 1046, 0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      
      boolean boolean3 = node1.isNoSideEffectsCall();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      
      boolean boolean4 = node0.isLabelName();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      node0.setJSType((JSType) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean5 = node0.isGetProp();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean6 = node0.isCase();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      Node node2 = node1.clonePropsFrom(node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertEquals(209, node2.getType());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(1046, node2.getLineno());
      assertNull(node2.getSourceFileName());
      
      node2.detachChildren();
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertEquals(209, node2.getType());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(1046, node2.getLineno());
      assertNull(node2.getSourceFileName());
      
      node2.setIsSyntheticBlock(false);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertEquals(209, node2.getType());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(1046, node2.getLineno());
      assertNull(node2.getSourceFileName());
      
      node2.setLength(111);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node2.isAnd());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIf());
      assertEquals(209, node2.getType());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertEquals(4284416, node2.getSourcePosition());
      assertFalse(node2.isTry());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(1046, node2.getLineno());
      assertNull(node2.getSourceFileName());
      
      boolean boolean7 = node0.isUnscopedQualifiedName();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      String string0 = node0.toString();
      assertNotNull(string0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean8 = node1.isDelProp();
      assertSame(node1, node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean7);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertEquals(1046, node1.getLineno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(209, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertEquals(4284416, node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      
      node0.setIsSyntheticBlock(false);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean9 = node0.isIn();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean2);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(4, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node3 = node0.useSourceInfoFrom(node1);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node3, node0);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(1046, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(4284416, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      
      StaticSourceFile staticSourceFile0 = node1.getStaticSourceFile();
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertNull(staticSourceFile0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      
      node2.setStaticSourceFile((StaticSourceFile) null);
      assertSame(node0, node3);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(83, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = new Node(1311, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(83, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertEquals(1311, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      
      node1.removeChild(node0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(83, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1311, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      
      boolean boolean0 = node0.isCase();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(boolean0);
      
      node0.setCharno((-1));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      
      boolean boolean1 = node0.isSyntheticBlock();
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(boolean1);
      
      Node node1 = Node.newNumber((double) 2);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      int int0 = node0.getIndexOfChild(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isWhile());
      assertEquals(39, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isNumber());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 1806;
      int int1 = (-102);
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((-3625), (String) null, 0, 105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("String n^de not created with No:e.newStri<g", 233, 233);
      assertNotNull(node0);
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(233, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertEquals(233, node0.getCharno());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      node0.putIntProp(125, 233);
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(233, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertEquals(233, node0.getCharno());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      // Undeclared exception!
      try { 
        Node.newString((String) null, 125, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      assertNotNull(inputId0);
      assertEquals("AXix=c+4E{XaX", inputId0.getIdName());
      
      Node node0 = Node.newNumber(1382.85743593716);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      boolean boolean0 = node0.isNull();
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(16, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean1 = node0.wasEmptyNode();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean1);
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(16, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesThis();
      assertEquals(16, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node1 = Node.newString((-19), "AXix=c+4E{XaX");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertEquals((-19), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      String string0 = node1.getSourceFileName();
      assertNull(string0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertEquals((-19), node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      int int0 = Node.mergeLineCharNo((-3525), (-927));
      assertEquals((-1), int0);
      
      boolean boolean2 = node0.isVarArgs();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      assertNotNull(inputId0);
      assertEquals("AXix=c+4E{XaX", inputId0.getIdName());
      
      Node node0 = Node.newString((-19), "AXix=c+4E{XaX", (-19), (-19));
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-19), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean0 = node0.isNull();
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-19), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags0.valueOf());
      
      boolean boolean1 = node0.wasEmptyNode();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-19), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(boolean1);
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesThis();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(16, node_SideEffectFlags0.valueOf());
      
      Node node1 = Node.newString((-19), "AXix=c+4E{XaX");
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isObjectLit());
      assertEquals((-19), node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      
      String string0 = node1.getSourceFileName();
      assertNotSame(node1, node0);
      assertNull(string0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isObjectLit());
      assertEquals((-19), node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      
      int int0 = Node.mergeLineCharNo(2, (-927));
      assertEquals((-1), int0);
      
      boolean boolean2 = node0.isVarArgs();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-19), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(boolean2);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string1 = node1.getQualifiedName();
      assertNotSame(node1, node0);
      assertNull(string1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isObjectLit());
      assertEquals((-19), node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isComma());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString("String n^de not created with No:e.newStri<g", 233, 233);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCall());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.putIntProp(125, 233);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCall());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-153));
      assertNotNull(node_SideEffectFlags0);
      assertEquals((-153), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node1 = new Node((-194), 16, 110);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals((-194), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals(110, node1.getCharno());
      assertEquals(65646, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isEquivalentTo(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCall());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals((-194), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals(110, node1.getCharno());
      assertEquals(65646, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCall());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Object object0 = node0.getProp(233);
      assertNull(object0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCall());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = node1.isEmpty();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals((-194), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals(110, node1.getCharno());
      assertEquals(65646, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean1);
      
      boolean boolean2 = node1.isSetterDef();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals((-194), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals(110, node1.getCharno());
      assertEquals(65646, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isThrow();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCall());
      assertEquals(233, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(954601, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertEquals(233, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean3);
      
      boolean boolean4 = node1.isGetElem();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals((-194), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals(110, node1.getCharno());
      assertEquals(65646, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean4);
      
      int int0 = node1.getSourcePosition();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals((-194), node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertEquals(110, node1.getCharno());
      assertEquals(65646, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(65646, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node0.isWhile();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isVarArgs();
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean1);
      
      node0.setCharno(1942);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean2 = node0.isTry();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isRegExp();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(boolean3);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      node0.setSourceEncodedPosition(4095);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isCase());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertTrue(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals(4095, node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = Node.newString("Wmu`}`8[]uG'+", 36, 54);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertEquals(147510, node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean4 = node1.isNumber();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertEquals(147510, node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean4);
      
      boolean boolean5 = node1.isFunction();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertEquals(147510, node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertEquals(36, node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(54, node1.getCharno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(83, node0.getType());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean0 = node0.isCase();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(83, node0.getType());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean0);
      
      node0.setCharno((-1));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(83, node0.getType());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean1 = node0.isGetterDef();
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(83, node0.getType());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean1);
      
      Node node1 = Node.newNumber((double) 2);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      int int0 = node0.getIndexOfChild(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(83, node0.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(39, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Wmu`}`8[]uG'+", false);
      assertNotNull(simpleSourceFile0);
      assertFalse(simpleSourceFile0.isExtern());
      assertEquals("Wmu`}`8[]uG'+", simpleSourceFile0.getName());
      assertEquals("Wmu`}`8[]uG'+", simpleSourceFile0.toString());
      
      boolean boolean0 = node0.isOptionalArg();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isOptionalArg();
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(boolean1);
      
      boolean boolean2 = node0.isOptionalArg();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(boolean2);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(83, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node1 = Node.newString(29, "Q");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertEquals(29, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node1.setSourceFileForTesting("slash_v");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals("slash_v", node1.getSourceFileName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      assertNotNull(mockPrintWriter0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = node0.getProp((-1492));
      assertNull(object0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean0 = node0.isEmpty();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isSetterDef();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(boolean1);
      
      Node node1 = new Node(153, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals(153, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isLabelName());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      boolean boolean2 = node1.isThrow();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals(153, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isLabelName());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(boolean2);
      
      boolean boolean3 = node0.isGetElem();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = Node.newString(40, "", 1328, 0);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean1 = node0.isGetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean2 = node0.isEquivalentToTyped(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean2);
      
      node_SideEffectFlags0.setMutatesThis();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean3 = node0.isEquivalentTo(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean3);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotSame(node0, node1);
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Object object0 = node0.getProp(4);
      assertNotSame(node0, node1);
      assertNull(object0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean4 = node1.isEmpty();
      assertNotSame(node1, node0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean4);
      
      boolean boolean5 = node0.isSetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean5);
      
      boolean boolean6 = node0.isThrow();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(boolean6);
      
      int int0 = node0.getLength();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isRegExp());
      assertEquals(4, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertTrue(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, int0);
      
      boolean boolean7 = node1.isGetElem();
      assertNotSame(node1, node0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isIn());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertEquals(40, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean7);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      assertNotNull(mockPrintWriter0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      
      UnaryOperator<JSType> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = node0.isDelProp();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean0);
      
      boolean boolean1 = node0.isIn();
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setReturnsTainted();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setReturnsTainted();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 5541;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(5541);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(5541, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesThis();
      assertEquals(5541, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setThrows();
      assertEquals(5541, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setReturnsTainted();
      assertEquals(5541, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(5541, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(5742, 5742, 5742);
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertEquals(5742, node0.getLineno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertEquals(5742, node0.getType());
      assertFalse(node0.isLabelName());
      assertEquals(23523327, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(5742, 5742, 5742);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(5742, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertEquals(5742, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals(23523327, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node1 = new Node(721, node0, node0, node0, node0, 302, 36);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(5742, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertEquals(5742, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals(23523327, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isArrayLit());
      assertEquals(302, node1.getLineno());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertEquals(1237028, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertEquals(36, node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(721, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3293);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(3293, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      boolean boolean0 = node1.wasEmptyNode();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(5742, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertEquals(5742, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals(23523327, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isArrayLit());
      assertEquals(302, node1.getLineno());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertEquals(1237028, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertEquals(36, node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(721, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(boolean0);
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node node2 = Node.newString(40, "y");
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isString());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(40, node2.getType());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      String string0 = node2.getSourceFileName();
      assertNull(string0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isString());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(40, node2.getType());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      int int0 = Node.mergeLineCharNo((-244), 48);
      assertEquals((-1), int0);
      
      boolean boolean1 = node1.isNumber();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(4095, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(5742, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertEquals(5742, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isParamList());
      assertEquals(23523327, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isArrayLit());
      assertEquals(302, node1.getLineno());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertEquals(1237028, node1.getSourcePosition());
      assertFalse(node1.isDefaultCase());
      assertEquals(36, node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(721, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(boolean1);
      
      int int1 = node2.getSourceOffset();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(int1 == int0);
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.isString());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertEquals(40, node2.getType());
      assertFalse(node2.isTry());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(0, "", 0, 33);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(boolean0);
      
      int int0 = node0.getSourcePosition();
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(33, int0);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.hasOneChild();
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(boolean1);
      
      StaticSourceFile staticSourceFile1 = node0.getStaticSourceFile();
      assertNull(staticSourceFile1);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.setStaticSourceFile((StaticSourceFile) null);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(33, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newNumber((-1377.2), 2, 4);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isWith());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isInstanceOf());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertEquals(8196, node1.getSourcePosition());
      assertFalse(node1.isCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.isNumber());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isString());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "0aM5";
      Node node0 = Node.newString("0aM5");
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node(12, node0, node0, 86, 37);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isInc());
      assertEquals(86, node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isScript());
      assertEquals(352293, node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isVar());
      assertEquals(12, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(4, "input_id", 4, 7);
      assertNotNull(node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(4, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertEquals(7, node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertEquals(16391, node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node0.setSourceEncodedPosition(4);
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("input_id"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("input_id");
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      node0.setDirectives(linkedHashSet0);
      assertTrue(linkedHashSet0.contains("input_id"));
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node1 = Node.newString(40, "", 1328, 0);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, node1.getType());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean1 = node0.isGetterDef();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(boolean1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean2 = node0.isEquivalentToTyped(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertEquals(40, node1.getType());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(1328, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertEquals(5439488, node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(boolean2);
      
      node_SideEffectFlags0.setMutatesThis();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.clearAllFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      
      Node node2 = Node.newString("input_id", 2, 54);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasOneChild());
      assertEquals(54, node2.getCharno());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isQualifiedName());
      assertEquals(2, node2.getLineno());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertTrue(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isIn());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFor());
      assertEquals(40, node2.getType());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isParamList());
      assertFalse(node2.isCase());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isComma());
      assertEquals(8246, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      
      Node node3 = node0.cloneNode();
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVoid());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFor());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.isReturn());
      assertFalse(node3.isCase());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertEquals(4, node3.getCharno());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isThis());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasChildren());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDo());
      assertFalse(node3.isWhile());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertEquals(4, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNull());
      assertFalse(node3.isCall());
      assertFalse(node3.isVar());
      assertEquals(4, node3.getSourcePosition());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isTrue());
      assertNull(node3.getSourceFileName());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      
      Node node4 = node0.getAncestor(8);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNull(node4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertTrue(node0.isReturn());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getType());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(2, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals(2, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.InstanceObjectType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Node node0 = Node.newNumber((-1248.43));
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      node0.type = 0;
      assertEquals(0, node0.getType());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      assertNotNull(node0);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newString("com.google.common.base.Predicates$OrPredicate", 35, 37);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals(35, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isHook());
      assertEquals(143397, node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node2 = Node.newString("com.google.common.base.Predicates$OrPredicate");
      assertNotSame(node2, node1);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isHook());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFor());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isWith();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isScript());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node1 = new Node((-1995), node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1995), node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      Node node2 = Node.newNumber((double) 54);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isWhile());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isOr());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFor());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertTrue(node2.isNumber());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isBlock());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIn());
      assertFalse(node2.isThrow());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InputId inputId0 = new InputId("{'-#p");
      assertNotNull(inputId0);
      assertEquals("{'-#p", inputId0.getIdName());
      
      Node node0 = Node.newNumber(1335.95517);
      assertNotNull(node0);
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(626);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(626, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.setMutatesThis();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(624, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      
      int int0 = node0.getLineno();
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals((-1), int0);
      
      node0.setType((-1));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      
      Node node1 = Node.newNumber((double) 8);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      
      Node node2 = node1.cloneNode();
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isInc());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isArrayLit());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertEquals(39, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      Node node3 = node1.getAncestor(177);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNull(node3);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertTrue(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNot());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(39, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node((-207), 0, 45);
      assertNotNull(node0);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-207), node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOr());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertEquals(45, node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(45, node0.getCharno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = Node.newString("RANGE_ERROR_TYPE");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTrue());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = Node.extractLineno(47);
      assertEquals(0, int0);
      
      Node node0 = Node.newString("I~;]>J_+iCHaSmPK1,Z", 172, 0);
      assertNotNull(node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = node0.cloneNode();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      int int1 = node1.getSideEffectFlags();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(int1 == int0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertEquals(172, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertEquals(704512, node1.getSourcePosition());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, int1);
      
      Node node2 = node0.getAncestor(0);
      assertSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals(704512, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(172, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNew());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertEquals(172, node2.getLineno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertEquals(704512, node2.getSourcePosition());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVoid());
      assertFalse(node2.isInc());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals(40, node2.getType());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isQualifiedName());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString(53, "OGh");
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = node0.cloneTree();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(53, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      InputId inputId0 = node0.getInputId();
      assertNotSame(node0, node1);
      assertNull(inputId0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      
      int int0 = node0.getSourceOffset();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals((-1), int0);
      
      Node node2 = new Node(2498, node0, node0, node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isName());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertEquals(2498, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(53, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node2);
      assertNotSame(node0, node1);
      assertNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isName());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWith());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertEquals(2498, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isInc());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFunction());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      
      Node node3 = new Node(52);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isScript());
      assertFalse(node3.isWhile());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNot());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isParamList());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVoid());
      assertTrue(node3.isInstanceOf());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isExprResult());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertEquals(52, node3.getType());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isName();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean1);
      
      boolean boolean2 = node0.isTypeOf();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean2);
      
      boolean boolean3 = node3.isAssign();
      assertNotSame(node3, node2);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isScript());
      assertFalse(node3.isWhile());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNot());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertFalse(node3.isParamList());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVoid());
      assertTrue(node3.isInstanceOf());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isExprResult());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isString());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isDebugger());
      assertEquals(52, node3.getType());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isThis());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(boolean3);
      
      boolean boolean4 = node0.isVarArgs();
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCase());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean4);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node((-4096), node0, node0, node0);
      node1.getIntProp(77);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isDelProp();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      int int0 = Node.extractLineno(1834);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node.extractLineno(47);
      Node node0 = Node.newString("I~;]>J_+iCHaSmPK1,Z", 172, 0);
      node0.cloneNode();
      Node node1 = node0.getAncestor(0);
      assertEquals(40, node1.getType());
      assertEquals(704512, node1.getSourcePosition());
      assertEquals(172, node1.getLineno());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
      Node node1 = new Node(48);
      node0.toString();
      Node.newString((-11), "HKY0`|Q `[#reB '");
      Node node2 = null;
      try {
        node2 = new Node(29, nodeArray0, 41, 117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      InputId inputId0 = new InputId("AXix=c+4E{XaX");
      Node node0 = Node.newNumber(1382.85743593716);
      node0.isNull();
      Node node1 = new Node((-422), node0, node0, node0, node0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node1;
      nodeArray0[3] = node1;
      Node node2 = null;
      try {
        node2 = new Node(907, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(31, "", 33, 31);
      node0.getAncestors();
      node0.isUnscopedQualifiedName();
      node0.getSourcePosition();
      node0.getStaticSourceFile();
      node0.hasOneChild();
      node0.setStaticSourceFile((StaticSourceFile) null);
      Node node1 = Node.newNumber((-2227.45070681561), (-1960), 24);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node0;
      Node node1 = null;
      try {
        node1 = new Node(12, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(8292, "@Yi[+!>");
      Node node1 = Node.newNumber(0.0, 12, (-1529));
      Node node2 = new Node(39, node0, node1, node1, node1);
      Node node3 = null;
      try {
        node3 = new Node(40, node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(43);
      node0.getAncestors();
      node0.children();
      node0.isEmpty();
      node0.getBooleanProp((-950));
      Node node1 = new Node(2, node0, node0, node0, node0, 0, 49);
      Node node2 = null;
      try {
        node2 = new Node(16, node1, node0, node0, node0, 40, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(Integer.MAX_VALUE, nodeArray0, 2456, 159);
      Node node1 = new Node(980, node0);
      Node node2 = null;
      try {
        node2 = new Node(45, node0, node1, node1, node0, 0, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 40;
      Node[] nodeArray0 = new Node[2];
      Node node0 = null;
      try {
        node0 = new Node(830, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node.extractLineno(47);
      Node node0 = Node.newString("I~;]>J_+iCHaSmPK1,Z", 187, 0);
      Node node1 = node0.cloneNode();
      boolean boolean0 = node1.isTry();
      assertEquals(765952, node1.getSourcePosition());
      assertEquals(187, node1.getLineno());
      assertEquals(40, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      node0.getProp((-1274));
      node0.getInputId();
      boolean boolean0 = node0.isOr();
      assertFalse(boolean0);
      
      node0.isTry();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newNumber((-1789.590197926));
      Node node1 = new Node(4095, node0, node0, node0, node0, 1, (-422));
      node1.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = (-4187);
      Node node0 = Node.newString((-4187), "C,PtS7");
      Node node1 = new Node((-4187), node0, node0, node0, node0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node2 = new Node(2676, node1, node1);
      node1.srcrefTree(node2);
      nodeArray0[3] = node1;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      Node node3 = new Node(33, 37, 120);
      nodeArray0[6] = node3;
      nodeArray0[7] = node1;
      Node node4 = null;
      try {
        node4 = new Node((-1646), nodeArray0, 63, 1524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = (-2147483635);
      int int1 = 159;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2456, (Node) null, (Node) null, (Node) null, 24, (-2033));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = (-3801);
      int int1 = 0;
      Node[] nodeArray0 = new Node[6];
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = jSDocInfo0.getAssociatedNode();
      nodeArray0[0] = null;
      Node node1 = null;
      try {
        node1 = new Node(51, node0, node0, node0, 0, 1910);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      simpleErrorReporter0.warning("Jw f5M}^;x]ecJ|t!FV", "", 0, 93);
      simpleErrorReporter0.error("", "zKlq[)P|bMF1m)4", 0, 2201);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("zKlq[)P|bMF1m)4");
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.UnknownType");
      node0.isBlock();
      node0.isInstanceOf();
      Node node1 = new Node((-2189), node0, node0, node0, 85, 31);
      node1.getAncestors();
      node1.isEquivalentToTyped(node0);
      assertEquals(348191, node1.getSourcePosition());
      assertEquals((-2189), node1.getType());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(585);
      assertEquals(585, node_SideEffectFlags0.valueOf());
      
      Node node0 = Node.newString(585, "com.google.javascript.rhino.JSDocInfo$NamePosition");
      boolean boolean0 = node0.isGetProp();
      assertFalse(boolean0);
      assertEquals(585, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber((-1980.8033395), 2626, 2626);
      Node node1 = new Node(1441, 38, 131);
      node0.setSourceEncodedPositionForTree(122);
      node0.hasChild(node1);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("&NWLs77@P]rO{X");
      boolean boolean0 = node0.isTrue();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(596);
      node0.isName();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(52);
      int int0 = 536870912;
      node0.isQuotedString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("&NWLs77@P]rO{X");
      node0.setOptionalArg(true);
      boolean boolean0 = node0.isTrue();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 19:21:23 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-2464.246826));
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(3);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 680.3403026124);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(17);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(20, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-92.3677395251803));
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals((-92.3677395251803), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals((-92.3677395251803), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals((-92.3677395251803), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(10000.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals((-92.3677395251803), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(10000.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(10000.0, double0, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-814.3067);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-814.3067));
      assertEquals((-663095.40166489), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-814.3067)}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-663095.40166489), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-663095.40166489), double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-814.3067)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-1015.70234154));
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 467.0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertNotNull(eigenDecompositionImpl1);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl1.getVT();
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertEquals(20, realMatrix0.getRowDimension());
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertNotNull(realMatrix0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3099, 20);
      assertEquals(3099, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 3,099x20 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(8, 11);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(8, blockRealMatrix0.getRowDimension());
      assertEquals(11, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (8, 0) in a 8x11 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 518.82922058864);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 690.3496799);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 20;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 20);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 20.0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(160000.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(160000.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 20;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = 1.0168256504931203;
      doubleArray0[5] = (double) 20;
      doubleArray0[6] = 690.3496799;
      doubleArray0[7] = (-92.3677395251803);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 20.0, 1.0168256504931203, 20.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 20.0, 1.0168256504931203, 20.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 20.0, 1.0168256504931203, 20.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 30;
      doubleArray0[3] = (double) 30;
      doubleArray0[4] = 1.0168256504931203;
      doubleArray0[5] = (double) 30;
      doubleArray0[6] = 690.3496799;
      doubleArray0[7] = (-92.3677395251803);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      assertEquals(66, blockRealMatrix0.getColumnDimension());
      assertEquals(66, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 30;
      doubleArray0[3] = (double) 30;
      doubleArray0[4] = 1.0168256504931203;
      doubleArray0[5] = (double) 30;
      doubleArray0[7] = (-92.3677395251803);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 0.0, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 0.0, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 0.0, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 30;
      doubleArray0[3] = (double) 30;
      doubleArray0[4] = 1.0168256504931203;
      doubleArray0[5] = (double) 30;
      doubleArray0[6] = 690.3496799;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 690.3496799, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 690.3496799, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 30.0, 690.3496799, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 20;
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 20;
      doubleArray0[5] = (double) 20;
      doubleArray0[6] = (double) 20;
      doubleArray0[7] = (double) 20;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2.0320023441655621E-10);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2.0320023441655621E-10, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2.0320023441655621E-10, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 1.0E-12);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2.0320023441655621E-10, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 20;
      doubleArray0[3] = (double) 20;
      doubleArray0[5] = (double) 20;
      doubleArray0[7] = (-94.35599358687423);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 20.0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 20.0, 0.0, 20.0, 0.0, (-94.35599358687423)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 20.0, 0.0, 20.0, 0.0, (-94.35599358687423)}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 20.0, 0.0, 20.0, 0.0, (-94.35599358687423)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 20;
      doubleArray0[3] = (double) 20;
      doubleArray0[5] = (double) 20;
      doubleArray0[6] = 690.3496799;
      doubleArray0[7] = (-92.3677395251803);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 20.0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.75, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0, 0.0, 20.0, 0.0, 20.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.75, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0, 0.0, 20.0, 0.0, 20.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.75, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 20.0, 0.0, 20.0, 0.0, 20.0, 690.3496799, (-92.3677395251803)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1476.0760092709718);
      doubleArray0[2] = (-538.2290404);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5904.304037083887, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1571.143177777004, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(2014.3050496709718, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1476.0760092709718), 0.0, (-538.2290404)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(5904.304037083887, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(1571.143177777004, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(2014.3050496709718, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1476.0760092709718), 0.0, (-538.2290404)}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1476.0760092709718));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (-92.3677395251803);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 690.3496799);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0E-12, 1.0E-12, (-92.3677395251803), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 30;
      doubleArray0[3] = (double) 30;
      doubleArray0[4] = 1.0168256504931203;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {30.0, 0.0, 0.0, 30.0, 1.0168256504931203, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.POSITIVE_INFINITY);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotNull(realMatrix0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertNotNull(decompositionSolver0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 20.0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(20.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 467.0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3441.218);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(decompositionSolver0);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(20, realMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(20, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(20, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (double) 20;
      doubleArray0[3] = (double) 20;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 20.0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-1831.7302591514));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }
}

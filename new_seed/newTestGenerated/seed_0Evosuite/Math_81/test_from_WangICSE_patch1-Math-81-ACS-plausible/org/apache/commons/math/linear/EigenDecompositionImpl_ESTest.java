/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 19:27:55 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(18, (-1413.5622184));
      assertNotNull(arrayRealVector0);
      assertEquals(5997.236581558438, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.852784270901248E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(25444.11993119999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(5997.236581558438, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.852784270901248E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(25444.11993119999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(5997.236581558438, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.852784270901248E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(25444.11993119999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(5997.236581558438, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.852784270901248E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(25444.11993119999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, realMatrix0.getColumnDimension());
      assertEquals(18, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, (-1413.5622184));
      assertNotNull(arrayRealVector0);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(17, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(9.26392135450624E7, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5828.266334845622, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(24030.557712799993, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 4.90563344392805E-20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(17);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realVector0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(20, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.3256473678779914E-5;
      doubleArray0[1] = 1.3256473678779914E-5;
      doubleArray0[2] = (double) 35;
      doubleArray0[3] = 1.3256473678779914E-5;
      doubleArray0[4] = (double) 35;
      doubleArray0[5] = (double) 35;
      doubleArray0[6] = (double) 35;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {1.3256473678779914E-5, 1.3256473678779914E-5, 35.0, 1.3256473678779914E-5, 35.0, 35.0, 35.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.00000000000377, arrayRealVector0.getNorm(), 0.01);
      assertEquals(560.0004242071577, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(140.00003976942105, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {1.3256473678779914E-5, 1.3256473678779914E-5, 35.0, 1.3256473678779914E-5, 35.0, 35.0, 35.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.00000000000377, arrayRealVector0.getNorm(), 0.01);
      assertEquals(560.0004242071577, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(140.00003976942105, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 35.0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1.3256473678779914E-5, 1.3256473678779914E-5, 35.0, 1.3256473678779914E-5, 35.0, 35.0, 35.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.00000000000377, arrayRealVector0.getNorm(), 0.01);
      assertEquals(560.0004242071577, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(140.00003976942105, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(4.250534394596689E-129, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(4.250534394596689E-129, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.3256473678779914E-5, 1.3256473678779914E-5, 35.0, 1.3256473678779914E-5, 35.0, 35.0, 35.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(70.00000000000377, arrayRealVector0.getNorm(), 0.01);
      assertEquals(560.0004242071577, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(140.00003976942105, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(4.250534394596689E-129, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (-6.071170368113259E-9);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1497.67);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {17.0, (-6.071170368113259E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals((-1.0320989625792541E-7), eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-1.0320989625792541E-7), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17.0, (-6.071170368113259E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals((-1.0320989625792541E-7), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 24);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 24);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 24);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(7, 7);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(7, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -673
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(4957, 4957);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(4957, blockRealMatrix0.getRowDimension());
      assertEquals(4957, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(15, 8);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(8, blockRealMatrix0.getColumnDimension());
      assertEquals(15, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 1.4635888282413035E-9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 15x8 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(9, 2068);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(9, blockRealMatrix0.getRowDimension());
      assertEquals(2068, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (9, 0) in a 9x2,068 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.1826784027916163E-22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.1826784027916163E-22);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 27.0;
      doubleArray0[4] = 2317.747259746419;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {27.0, 0.0, 0.0, 0.0, 2317.747259746419, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(40539.9561559427, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2344.747259746419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2317.904519185817, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {27.0, 0.0, 0.0, 0.0, 2317.747259746419, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(40539.9561559427, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2344.747259746419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2317.904519185817, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-605.727901601397));
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {27.0, 0.0, 0.0, 0.0, 2317.747259746419, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(40539.9561559427, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2344.747259746419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2317.904519185817, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {27.0, 0.0, 0.0, 0.0, 2317.747259746419, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(40539.9561559427, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2344.747259746419, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2317.904519185817, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 52;
      doubleArray0[2] = (double) 52;
      doubleArray0[3] = 111.42545893828232;
      doubleArray0[4] = (double) 52;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 111.42545893828232, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(267.4254589382823, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(832.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(143.27467640726618, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 111.42545893828232, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(267.4254589382823, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(832.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(143.27467640726618, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 52.0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 111.42545893828232, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(267.4254589382823, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(832.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(143.27467640726618, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1.4536321432263492E-45, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(5, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {52.0, 0.0, 52.0, 111.42545893828232, 52.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(267.4254589382823, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(832.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(143.27467640726618, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1.4536321432263492E-45, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 27.0;
      doubleArray0[2] = (-2732.1205602337322);
      doubleArray0[3] = (-2732.1205602337322);
      doubleArray0[4] = 2317.747259746419;
      doubleArray0[5] = (-2732.1205602337322);
      doubleArray0[6] = (-2732.1205602337322);
      doubleArray0[7] = (-2732.1205602337322);
      doubleArray0[8] = (-2732.1205602337322);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {27.0, 0.0, (-2732.1205602337322), (-2732.1205602337322), 2317.747259746419, (-2732.1205602337322), (-2732.1205602337322), (-2732.1205602337322), (-2732.1205602337322)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(178311.71585495886, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18737.470621148812, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(7082.342684025769, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {27.0, 0.0, (-2732.1205602337322), (-2732.1205602337322), 2317.747259746419, (-2732.1205602337322), (-2732.1205602337322), (-2732.1205602337322), (-2732.1205602337322)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(178311.71585495886, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18737.470621148812, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(7082.342684025769, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-605.727901601397));
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {27.0, 0.0, (-2732.1205602337322), (-2732.1205602337322), 2317.747259746419, (-2732.1205602337322), (-2732.1205602337322), (-2732.1205602337322), (-2732.1205602337322)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(178311.71585495886, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(18737.470621148812, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(7082.342684025769, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(35, (-17.17738546));
      assertNotNull(arrayRealVector0);
      assertEquals(35, arrayRealVector0.getDimension());
      assertEquals(601.2084910999997, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9510523512594366E11, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(101.62278284641526, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(35, arrayRealVector0.getDimension());
      assertEquals(601.2084910999997, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9510523512594366E11, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(101.62278284641526, arrayRealVector0.getNorm(), 0.01);
      assertEquals(35, realMatrix0.getRowDimension());
      assertEquals(35, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-17.17738546));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(35, arrayRealVector0.getDimension());
      assertEquals(601.2084910999997, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2.9510523512594366E11, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(101.62278284641526, arrayRealVector0.getNorm(), 0.01);
      assertEquals(35, realMatrix0.getRowDimension());
      assertEquals(35, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, (-2731.8));
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1.790312448E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(11263.499948062323, arrayRealVector0.getNorm(), 0.01);
      assertEquals(46440.60000000001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1.790312448E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(11263.499948062323, arrayRealVector0.getNorm(), 0.01);
      assertEquals(46440.60000000001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(17, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2731.8));
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17, arrayRealVector0.getDimension());
      assertEquals(1.790312448E8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(11263.499948062323, arrayRealVector0.getNorm(), 0.01);
      assertEquals(46440.60000000001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(17, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 25;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (-2731.8);
      doubleArray0[3] = (-2731.8);
      doubleArray0[5] = (-2731.8);
      doubleArray0[6] = (double) 25;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {25.0, 25.0, (-2731.8), (-2731.8), 0.0, (-2731.8), 25.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8270.400000000001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(44508.8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4731.8145272189195, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {25.0, 25.0, (-2731.8), (-2731.8), 0.0, (-2731.8), 25.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8270.400000000001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(44508.8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4731.8145272189195, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1071.636304));
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {25.0, 25.0, (-2731.8), (-2731.8), 0.0, (-2731.8), 25.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(8270.400000000001, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(44508.8, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4731.8145272189195, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2317.747259746419;
      doubleArray0[1] = (-1413.5622184);
      doubleArray0[2] = 2317.747259746419;
      doubleArray0[3] = 2317.747259746419;
      doubleArray0[4] = 2317.747259746419;
      doubleArray0[5] = (-1413.5622184);
      doubleArray0[6] = 2317.747259746419;
      doubleArray0[7] = (-1413.5622184);
      doubleArray0[8] = (-1413.5622184);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {2317.747259746419, (-1413.5622184), 2317.747259746419, 2317.747259746419, 2317.747259746419, (-1413.5622184), 2317.747259746419, (-1413.5622184), (-1413.5622184)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17242.985172332093, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5903.591650975014, arrayRealVector0.getNorm(), 0.01);
      assertEquals(593343.2984950832, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {2317.747259746419, (-1413.5622184), 2317.747259746419, 2317.747259746419, 2317.747259746419, (-1413.5622184), 2317.747259746419, (-1413.5622184), (-1413.5622184)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17242.985172332093, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5903.591650975014, arrayRealVector0.getNorm(), 0.01);
      assertEquals(593343.2984950832, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2660.1668643655));
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2317.747259746419, (-1413.5622184), 2317.747259746419, 2317.747259746419, 2317.747259746419, (-1413.5622184), 2317.747259746419, (-1413.5622184), (-1413.5622184)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(17242.985172332093, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5903.591650975014, arrayRealVector0.getNorm(), 0.01);
      assertEquals(593343.2984950832, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 24);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(7, (-1413.5622184));
      assertNotNull(arrayRealVector0);
      assertEquals(9894.9355288, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3739.934092603171, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(90467.9819776, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9894.9355288, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3739.934092603171, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(90467.9819776, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9894.9355288, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3739.934092603171, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(90467.9819776, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(9, 9);
      assertNotNull(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2304.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(81.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(27.0, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2304.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(81.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(27.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1413.5622184);
      doubleArray0[1] = (-1413.5622184);
      doubleArray0[2] = (-1413.5622184);
      doubleArray0[3] = 27.0;
      doubleArray0[4] = (-1413.5622184);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), (-1413.5622184), 27.0, (-1413.5622184)}, doubleArray0, 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5681.2488736, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2827.253363452189, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), (-1413.5622184), 27.0, (-1413.5622184)}, doubleArray0, 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5681.2488736, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2827.253363452189, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
      assertEquals(5, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), (-1413.5622184), 27.0, (-1413.5622184)}, doubleArray0, 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5681.2488736, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2827.253363452189, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1413.5622184);
      doubleArray0[1] = (-1413.5622184);
      doubleArray0[3] = 27.0;
      doubleArray0[4] = (-1413.5622184);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), 0.0, 27.0, (-1413.5622184)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2448.5104524718263, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4267.686655199999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), 0.0, 27.0, (-1413.5622184)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2448.5104524718263, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4267.686655199999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
      assertEquals(5, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), 0.0, 27.0, (-1413.5622184)}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2448.5104524718263, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4267.686655199999, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1413.5622184);
      doubleArray0[1] = (-1413.5622184);
      doubleArray0[3] = 27.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), 0.0, 27.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(1999.2611861825003, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2854.1244368, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-1413.5622184), (-1413.5622184), 0.0, 27.0, 0.0}, doubleArray0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(1999.2611861825003, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2854.1244368, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(22616.9954944, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1413.5622184));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[28];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(28, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(28, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(28, realMatrix0.getColumnDimension());
      assertEquals(28, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-2732.1205602337322));
      assertEquals(28, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(28, realMatrix0.getColumnDimension());
      assertEquals(28, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(28, doubleArray0.length);
      assertEquals(28, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(28, realMatrix0.getColumnDimension());
      assertEquals(28, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(59, 59);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(59, blockRealMatrix0.getRowDimension());
      assertEquals(59, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(59, blockRealMatrix0.getRowDimension());
      assertEquals(59, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(59);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(decompositionSolver0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(decompositionSolver0);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realMatrix0);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(20, realMatrix0.getColumnDimension());
      assertEquals(20, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(17, 17);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realMatrix0);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(17, realMatrix0.getColumnDimension());
      assertEquals(17, realMatrix0.getRowDimension());
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertNotNull(realMatrix1);
      assertEquals(17, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(17, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(17, realMatrix1.getRowDimension());
      assertEquals(17, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix0.getColumnDimension());
      assertEquals(39, realMatrix0.getRowDimension());
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertSame(realMatrix1, realMatrix0);
      assertNotNull(realMatrix1);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(39, realMatrix1.getRowDimension());
      assertEquals(39, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 20);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(17, 17);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) 17;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 54.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(17, (-1413.5622184));
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3149.24));
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(17, 17);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(3);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(35, 1.3256473678779914E-5);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.3256473678779914E-5);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-605.727901601397));
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 02:17:17 GMT 2022
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JSpinner;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PiePlot3D_ESTest extends PiePlot3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      piePlot3D0.setDarkerSides(true);
      Object object0 = piePlot3D0.clone();
      boolean boolean0 = piePlot3D0.equals(object0);
      assertTrue(piePlot3D0.getDarkerSides());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      piePlot3D0.setDarkerSides(true);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(jDBCCategoryDataset0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 10);
      PiePlot3D piePlot3D0 = new PiePlot3D(categoryToPieDataset0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDepthFactor((-1249.79558069));
      double double0 = piePlot3D0.getDepthFactor();
      assertEquals((-1249.79558069), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      piePlot3D0.setDarkerSides(true);
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      Area area0 = new Area();
      // Undeclared exception!
      try { 
        piePlot3D0.drawSide((Graphics2D) null, (Rectangle2D) null, arc2D_Float0, area0, area0, piePlot3D0.DEFAULT_LABEL_OUTLINE_PAINT, piePlot3D0.DEFAULT_BACKGROUND_PAINT, piePlot3D0.DEFAULT_OUTLINE_STROKE, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      Area area0 = new Area();
      Color color0 = (Color)PeriodAxisLabelInfo.DEFAULT_DIVIDER_PAINT;
      // Undeclared exception!
      try { 
        piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, color0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, (Stroke) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertFalse(piePlot3D0.isCircular());
      assertFalse(boolean0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      PiePlot3D piePlot3D1 = new PiePlot3D();
      piePlot3D0.setDepthFactor((-27.215176794562588));
      boolean boolean0 = piePlot3D1.equals(piePlot3D0);
      assertEquals((-27.215176794562588), piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      boolean boolean0 = piePlot3D0.equals(vector0);
      assertFalse(boolean0);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals(piePlot3D0);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect(10, (-674), true);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(1250.2597820907, 0.08, (-180.0), 10, 0.0, 331.0114, 0);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, true);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), true);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1644));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.5F, 1.0F, (-1145.0), (-27.215176794562588), 1.0F, 1250.2597820907, 1);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_OUTLINE_STROKE, true, true);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), false);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1644));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.5F, 1.0F, (-1145.0), (-27.215176794562588), 1.0F, 1250.2597820907, 1);
      arc2D_Double0.extent = (double) 0.5F;
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_OUTLINE_STROKE, false, true);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JTable jTable0 = new JTable();
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), false);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1644));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.5F, 1.0F, (-1145.0), (-27.215176794562588), 1.0F, 1250.2597820907, 1);
      arc2D_Double0.extent = (double) 0.5F;
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(10, (-674), true);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(1250.2597820907, 1352.2551, (-180.0), 10, 0.0, 330.91202596573135, 0);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Rectangle rectangle0 = new Rectangle();
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(1.0F, (-2591.6296), 1.0F, (-710.1052), 331.0114, 1.0E-5, 0);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Rectangle rectangle0 = new Rectangle();
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(1.0F, (-2591.6296), 1.0F, (-710.1052), 331.0114, 1.0E-5, 0);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, false);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), true);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.5F, 1.0F, (-1145.0), (-27.215176794562588), 1.0F, 1250.2597820907, 1);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE, false, false);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), true);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1644));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(2375, 393.35822, 0.0, (-27.215176794562588), 10, (-528.817209797), 1);
      Area area0 = new Area();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      Paint paint0 = xYBoxAndWhiskerRenderer0.getArtifactPaint();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_BACKGROUND_PAINT, paint0, piePlot3D0.DEFAULT_OUTLINE_STROKE, true, true);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, chartRenderingInfo0);
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      JTable jTable0 = new JTable(stack0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(15, (-6626329), true);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((-0.36134451389088545), 331.0114, (-674), 1.0F, 90.0, (-2851.028488), 0);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, true);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1630), true);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1630));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.0, 1756.29467647, (-645.09520810869), 0, 1250.2597820907, (-27.215176794562588), 0);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_OUTLINE_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE, true, true);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, chartRenderingInfo0);
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      JTable jTable0 = new JTable(stack0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(15, (-6626329), true);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((-0.36134451389088545), 331.0114, (-674), 1.0F, 90.0, (-2851.028488), 0);
      Area area0 = new Area();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, false);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), false);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1644));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.0, 1756.29467647, (-645.09520810869), 0, 1250.2597820907, (-27.215176794562588), 0);
      Area area0 = new Area();
      arc2D_Double0.setAngleStart(1.0E-7);
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE, false, false);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      Stack<Object> stack1 = new Stack<Object>();
      JTable jTable0 = new JTable(stack0, stack1);
      Rectangle rectangle0 = jTable0.getCellRect((-674), (-376), true);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, (-1533.2835478009), (-1621.26495), 0.12);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(10, 1.0F, 331.0114, 0.08, 0.4, 0.08, 0);
      Area area0 = new Area(arc2D_Double0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(Float.POSITIVE_INFINITY, (-674), 10, (-1374.6993F), (-1.0F), (-1374.6993F), 0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Paint paint0 = fastScatterPlot0.getPaint();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Float0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, paint0, fastScatterPlot0.DEFAULT_OUTLINE_STROKE, true, false);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      Stack<Object> stack1 = new Stack<Object>();
      JTable jTable0 = new JTable(stack0, stack1);
      Rectangle rectangle0 = jTable0.getCellRect((-674), (-376), true);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, (-1533.2835478009), (-1621.26495), 0.12);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((-376), 331.0114, 180.0, 1.0F, (-180.0), (-674), 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, true);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      Stack<Object> stack1 = new Stack<Object>();
      JTable jTable0 = new JTable(stack0, stack1);
      Rectangle rectangle0 = jTable0.getCellRect(10, (-376), true);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 1.0F, 1.0F, 0.12);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(10, 1.0F, 331.0114, 0.08, 0.4, 0.08, 0);
      Area area0 = new Area(arc2D_Double0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(Float.POSITIVE_INFINITY, 10, 10, (-1374.6993F), (-1.0F), (-1374.6993F), 0);
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Float0, area0, area0, jFreeChart0.DEFAULT_BACKGROUND_PAINT, jFreeChart0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, true);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart(":KFVNcKD8$d", piePlot3D0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2375, (double) 10, 0.08, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Vector<JSpinner.NumberEditor> vector0 = new Vector<JSpinner.NumberEditor>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect(381, (-1644), false);
      Rectangle2D rectangle2D0 = piePlot3D0.getArcBounds(rectangle0, rectangle0, 381, 2375, (-1644));
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.0, 1756.29467647, (-645.09520810869), 0, 1250.2597820907, (-27.215176794562588), 0);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, rectangle2D0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_OUTLINE_PAINT, piePlot3D0.DEFAULT_LABEL_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      piePlot3D0.setDarkerSides(true);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, (Paint) null, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, false, true);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      piePlot3D0.setDarkerSides(true);
      Area area0 = new Area();
      piePlot3D0.drawSide(graphics2D0, (Rectangle2D) null, arc2D_Float0, area0, area0, multiplePiePlot0.DEFAULT_OUTLINE_PAINT, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, true, true);
      assertTrue(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      Stack<Object> stack1 = new Stack<Object>();
      JTable jTable0 = new JTable(stack0, stack1);
      Rectangle rectangle0 = jTable0.getCellRect((-674), (-376), true);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((-376), 331.0114, 180.0, 1.0F, (-180.0), (-674), 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Area area0 = new Area(arc2D_Double0);
      piePlot3D0.drawSide(graphics2D0, rectangle0, arc2D_Double0, area0, area0, piePlot3D0.DEFAULT_LABEL_PAINT, piePlot3D0.DEFAULT_LABEL_BACKGROUND_PAINT, piePlot3D0.DEFAULT_OUTLINE_STROKE, false, false);
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getPlotType();
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setDarkerSides(true);
      PiePlot3D piePlot3D1 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertTrue(piePlot3D0.getDarkerSides());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      double double0 = piePlot3D0.getDepthFactor();
      assertEquals(0.12, double0, 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }
}

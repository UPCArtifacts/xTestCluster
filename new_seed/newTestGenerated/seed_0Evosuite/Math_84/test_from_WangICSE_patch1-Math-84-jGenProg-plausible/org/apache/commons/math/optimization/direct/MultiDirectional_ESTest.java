/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 21:25:15 GMT 2022
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiDirectional_ESTest extends MultiDirectional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[2];
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-2455.7566137);
      double[] doubleArray1 = new double[4];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray1, 0.0, true);
      realPointValuePairArray0[0] = realPointValuePair0;
      RealPointValuePair realPointValuePair1 = new RealPointValuePair(doubleArray0, 0.0, true);
      realPointValuePairArray0[1] = realPointValuePair1;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectional0.iterateSimplex(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];
      double[] doubleArray0 = new double[1];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1856.58539, false);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      // Undeclared exception!
      try { 
        multiDirectional0.iterateSimplex(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(17, 17).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[17];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1856.58539, false);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];
      multiDirectional0.simplex = realPointValuePairArray0;
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-567), false);
      realPointValuePairArray0[0] = realPointValuePair0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-567), 0).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      multiDirectional0.setMaxIterations((-789));
      try { 
        multiDirectional0.iterateSimplex((Comparator<RealPointValuePair>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Maximal number of iterations (-789) exceeded
         //
         verifyException("org.apache.commons.math.optimization.direct.DirectSearchOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[2];
      double[] doubleArray0 = new double[4];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 0.0, true);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        multiDirectional0.iterateSimplex(comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.direct.MultiDirectional", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[17];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1856.58539, false);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1838, (-270)).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1856.58539, false);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 14).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-567), (-1)).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];
      multiDirectional0.simplex = realPointValuePairArray0;
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-567), false);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(0.0, (-1356.0));
      assertEquals(0, multiDirectional0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];
      multiDirectional0.simplex = realPointValuePairArray0;
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-567), false);
      realPointValuePairArray0[0] = realPointValuePair0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
  }
}

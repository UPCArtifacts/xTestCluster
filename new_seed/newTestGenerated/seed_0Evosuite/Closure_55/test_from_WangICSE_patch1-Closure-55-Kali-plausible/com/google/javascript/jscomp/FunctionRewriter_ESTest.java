/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 15:15:16 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionRewriter_ESTest extends FunctionRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = Node.newString("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}", (-456), (-456));
      Node node1 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      functionRewriter0.process(node1, node0);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      // Undeclared exception!
      try { 
        functionRewriter0.process((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FunctionRewriter functionRewriter0 = new FunctionRewriter((AbstractCompiler) null);
      // Undeclared exception!
      try { 
        functionRewriter0.process((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      // Undeclared exception!
      try { 
        functionRewriter0.parseHelperCode((FunctionRewriter.Reducer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionRewriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCmpiler_identityFn_value) {return JSCompile_identityFn_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCfmpiler_identityFn_value) {return JSCompiler_ide<tityFn_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(14, Node.DEFAULT_PROP);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_emptyFn() {  return function() {}}");
      functionRewriter0.process(node0, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }
}

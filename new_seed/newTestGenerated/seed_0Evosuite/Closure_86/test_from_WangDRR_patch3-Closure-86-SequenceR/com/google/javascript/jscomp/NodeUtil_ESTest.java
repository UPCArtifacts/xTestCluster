/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 13:18:42 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.Callable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "+=8";
      Node node0 = Node.newString("+=8");
      NodeUtil.referencesThis(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for eof (type 0)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NodeUtil.isAssociative(0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      String string0 = "Infinity";
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 0, 22);
      NodeUtil.isImmutableValue(node0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Infinity");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      String string1 = null;
      OptimizeArgumentsArray optimizeArgumentsArray0 = null;
      try {
        optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(100, "</a>", 116, 100);
      node0.setString("</a>");
      NodeUtil.isSwitchCase(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "</a>");
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LP does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(116);
      node0.getAncestors();
      Node node1 = new Node(116, node0, node0, node0);
      Node node2 = new Node(0, 14, 3);
      node2.detachChildren();
      NodeUtil.getBooleanValue(node0);
      Node node3 = NodeUtil.newExpr(node2);
      assertEquals(130, node3.getType());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NodeUtil.precedence(105);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleErrorReporter0.warning("Expected NEW node, got ", "Expected NEW node, got ", (-1914), "Expected NEW node, got ", (-428));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node((-1914), 15, (-428));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, predicate0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1914
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = null;
      NodeUtil.isCommutative(24);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.CallGraph");
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.CallGraph", "com.google.javascript.jscomp.CallGraph");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Compiler compiler0 = new Compiler(mockPrintStream1);
      Node node1 = compiler0.parseSyntheticCode("4IxAX6?'Yal`", "");
      Normalize.parseAndNormalizeTestCode(compiler0, "4IxAX6?'Yal`", "");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-2491));
      node1.putProp((-1592), (Object) null);
      boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      Node node0 = compiler0.parseSyntheticCode("{`", "{`");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "{`", "{`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node1.putProp(2, integer0);
      boolean boolean0 = NodeUtil.isLatin("{`");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node2 = NodeUtil.newExpr(node1);
      assertEquals(130, node2.getType());
      
      boolean boolean1 = NodeUtil.isForIn(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isVar(node0);
      assertFalse(boolean2 == boolean0);
      
      Node node3 = NodeUtil.newUndefinedNode(node0);
      assertEquals(122, node3.getType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-1325), (-1325), 1985);
      Node node1 = new Node(31, node0, node0, node0);
      node1.getAncestors();
      NodeUtil.redeclareVarsInsideBranch(node0);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node1.putProp(2, integer0);
      NodeUtil.getBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.CallGraph");
      node0.getAncestors();
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING com.google.javascript.jscomp.CallGraph does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isTryFinallyNode((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1522, nodeArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isImmutableValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newString("G4u.CWI(.", 2276, 100);
      NodeUtil.isExprAssign(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      Node node0 = compiler0.parseSyntheticCode("{`", "{`");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "{`", "{`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node1.putProp(2, integer0);
      boolean boolean0 = NodeUtil.isLatin("{`");
      boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node1);
      Node node2 = NodeUtil.newExpr(node1);
      assertEquals(130, node2.getType());
      
      boolean boolean2 = NodeUtil.isFunctionExpression(node1);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = NodeUtil.isVar(node0);
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NodeUtil.opToStr(2826);
      int int0 = (-300);
      // Undeclared exception!
      try { 
        NodeUtil.isLatin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("<9u3+D=Lm|zC6q", (String) null, 1429, "=/D-&Ys0(KJ_)%ZvX(", 1429);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.containsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("Bad initialBufferCapacity: ");
      NodeUtil.isVarDeclaration(node0);
      node0.removeFirstChild();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LAZY_NAMES");
      node0.setVarArgs(false);
      // Undeclared exception!
      try { 
        NodeUtil.isFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(77);
      boolean boolean0 = true;
      node0.setOptionalArg(true);
      String string0 = "";
      Node node1 = Node.newString(4095, "", (-760), 147);
      node1.addChildrenToBack(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "6w*U~Nv??qs x5", node1, "6w*U~Nv??qs x5");
      NodeUtil.isSwitchCase(node1);
      NodeUtil.getNumberValue(node1);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      NodeUtil.isVar(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: NUMBER Infinity of NUMBER Infinity
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.isCommutative(44);
      node0.setVarArgs(false);
      MockFile.createTempFile("DH!,?0(I~j.W B7i", "KY[v#!ic@03", (File) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSSourceFile.fromInputStream("msg.not.class", (InputStream) sequenceInputStream0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NodeUtil.opToStr(2826);
      Charset.defaultCharset();
      Node node0 = Node.newNumber((-1.0));
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(2);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      assertEquals(122, node2.getType());
      assertEquals(1, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NodeUtil.opToStr(2826);
      Node node0 = new Node(2826, 96, (-1646));
      node0.detachChildren();
      NodeUtil.getBooleanValue(node0);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(591, 591, 591);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      boolean boolean1 = NodeUtil.isCall(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NodeUtil.precedence(105);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Expected NEW node, got ", "Expected NEW node, got ", (-1914), "Expected NEW node, got ", (-428));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, predicate0);
      NodeUtil.containsFunction(node0);
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NodeUtil.precedence(105);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NodeUtil.isAssociative(0);
      String string0 = null;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isConstant("%=");
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(116);
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, " +{'p2", " +{'p2");
      node0.addChildrenToFront(node1);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((double) 0, (-1325), 93);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newString((-3207), ";[uK4pO7E", 89, (-3207));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      node0.addChildrenToBack(node1);
      String string0 = "com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, ";[uK4pO7E", node1, "X=");
      NodeUtil.isSwitchCase(node0);
      NodeUtil.getNumberValue(node2);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(24);
      node0.setOptionalArg(true);
      Node node1 = Node.newString(25, ",7*Sr_B", 25, (-3207));
      node0.addChildrenToBack(node1);
      googleCodingConvention0.isConstantKey(",7*Sr_B");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes", node0, "X#=");
      NodeUtil.isSwitchCase(node2);
      Node node3 = Node.newNumber((-1294.164889563), 103, 64);
      node3.addChildrenToFront(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      Node.newNumber(0.0);
      NodeUtil.isVar(node1);
      Node node2 = compiler0.parseSyntheticCode("A!c.E`laLJd@Li$0}", "A!c.E`laLJd@Li$0}");
      NodeUtil.isPrototypePropertyDeclaration(node2);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(24);
      node0.setOptionalArg(true);
      Node node1 = Node.newString(25, ",7*Sr_B", 25, (-3207));
      node0.addChildrenToBack(node1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes", node0, "X#=");
      NodeUtil.isSwitchCase(node2);
      NodeUtil.getNumberValue(node0);
      Node node3 = null;
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NodeUtil.opToStr(2826);
      NodeUtil.isSimpleOperatorType((-300));
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      // Undeclared exception!
      try { 
        peepholeFoldWithTypes0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldWithTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node0.putProp(2, integer0);
      boolean boolean0 = NodeUtil.isLatin("goog.exportProperty");
      boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean1 == boolean0);
      
      Node node1 = Node.newNumber((double) 1, 42, 86);
      boolean boolean2 = NodeUtil.isThis(node1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node0.putProp(2, integer0);
      NodeUtil.isLatin("goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      Node node0 = compiler0.parseSyntheticCode("{`", "{`");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "{`", "{`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node1.putProp(2, integer0);
      NodeUtil.isLatin("{`");
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.newExpr(node1);
      NodeUtil.isFunctionExpression(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node1.putProp(2, integer0);
      NodeUtil.isLatin("goog.exportProperty");
      NodeUtil.isFunctionObjectCallOrApply(node1);
      NodeUtil.newExpr(node1);
      NodeUtil.isFunctionExpression(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = new Node(24);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "=", node0, "=");
      node1.addChildrenToBack(node0);
      NodeUtil.getPrototypeClassName(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isObjectLitKey((Node) null, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(81, 81, 81);
      node0.getAncestors();
      NodeUtil.redeclareVarsInsideBranch(node0);
      NodeUtil.getExpressionBooleanValue(node0);
      boolean boolean0 = NodeUtil.isGetProp(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(116, node0, node0, node0);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.detachChildren();
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{`");
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node0.putProp(2, integer0);
      boolean boolean0 = NodeUtil.containsType(node0, 28);
      boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertTrue(boolean1 == boolean0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      String string0 = "";
      Node node0 = compiler0.parseTestCode("");
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.enableRuntimeTypeCheck("!<>t=[Xx");
      compiler0.initOptions(compilerOptions0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      compiler0.prepareAst(node2);
      node1.setWasEmptyNode(true);
      NodeUtil.isObjectCallMethod(node1, "-=");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node1, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got SCRIPT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.CallGraph");
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(116);
      Node node1 = new Node(116, node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "6w*U~Nv??qs x5";
      Node node0 = Node.newString("6w*U~Nv??qs x5");
      NodeUtil.isVarDeclaration(node0);
      node0.removeFirstChild();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      node0.setVarArgs(false);
      NodeUtil.isFunction(node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ";[uK4pO7E";
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isValidPropertyName(";[uK4pO7E");
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ";[uK4pO7E", 110, 110);
      NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode(";[uK4pO7E", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NodeUtil.newUndefinedNode((Node) null);
      Charset.defaultCharset();
      Node.newNumber((-1647.961603497146));
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(2269.86091, 6, 26);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      NodeUtil.getNameReferenceCount(node0, "81b9~|p");
      NodeUtil.isReferenceName(node0);
      NodeUtil.isFunctionObjectCallOrApply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      boolean boolean1 = NodeUtil.isValidPropertyName(" of ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((double) 0, (-1325), 93);
      node0.addChildrenToFront(node0);
      AbstractCompiler abstractCompiler0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      int int0 = (-1325);
      Node node0 = Node.newNumber((double) 0, (-1325), 93);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.addChildrenToFront(node1);
      AbstractCompiler abstractCompiler0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0, abstractCompiler0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((double) 0, (-1325), 93);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(81, 81, 81);
      NodeUtil.isSwitchCase(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ";[uK4pO7E";
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      NodeUtil.isValidPropertyName(";[uK4pO7E");
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ";[uK4pO7E", 110, 110);
      Node node1 = NodeUtil.newExpr(node0);
      Node node2 = null;
      try {
        node2 = new Node(110, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashSet<Node> hashSet0 = new HashSet<Node>();
      boolean boolean0 = NodeUtil.isValidPropertyName(")g[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ";[uK4pO7E", 110, 110);
      NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode(";[uK4pO7E", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ";[uK4pO7E";
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      String string1 = "~puJ";
      defaultCodingConvention0.isValidEnumKey("~puJ");
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ";[uK4pO7E", 110, (-3668));
      Node node1 = NodeUtil.newExpr(node0);
      Node node2 = null;
      try {
        node2 = new Node(110, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node0.putProp(2, integer0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT 1 [break: java.lang.Integer@0000000476] [sourcename: java.lang.String@0000000477] [synthetic: 1]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isSimpleOperator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(2);
      node0.putProp(2, integer0);
      boolean boolean0 = NodeUtil.containsType(node0, 28);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.putProp(118, (Object) null);
      boolean boolean0 = NodeUtil.containsType(node0, 2483);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(100);
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(116);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      String string0 = NodeUtil.opToStr(95);
      assertNotNull(string0);
      assertEquals("*=", string0);
      
      Node node0 = new Node((-1646), 96, 95);
      node0.detachChildren();
      NodeUtil.getBooleanValue(node0);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(95, node1.getCharno());
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NodeUtil.opToStr(2826);
      NodeUtil.isCommutative((-300));
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.isCommutative(44);
      node0.setVarArgs(false);
      Node node1 = Node.newNumber((-999.6670852803016), 781, 16);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getNumberValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      Node.newNumber(Double.POSITIVE_INFINITY);
      NodeUtil.isVar(node0);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(100);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isReferenceName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isVar(node0);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      NodeUtil.isVar(node0);
      Node node1 = compiler0.externsRoot;
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isWithinLoop((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NodeUtil.isAssociative(0);
      Node node0 = null;
      LightweightMessageFormatter lightweightMessageFormatter0 = null;
      try {
        lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NodeUtil.isAssociative(0);
      // Undeclared exception!
      try { 
        NodeUtil.isVar((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = null;
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(514);
      nodeUtil_MatchNodeType0.equals((Object) null);
      nodeUtil_MatchNodeType0.equals((Object) null);
      nodeUtil_MatchNodeType0.equals((Object) null);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("", "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations");
      node0.checkTreeEqualsSilent(node1);
      NodeUtil.newName(defaultCodingConvention0, "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations", node0, "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newNumber(734.1615955);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        NodeUtil.newName(defaultCodingConvention0, "", (Node) null, "@tiq5udKyzpR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("G4u.CfII(.", 2276, 100);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "";
      SyntheticAst syntheticAst0 = new SyntheticAst("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1104);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.getState();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      NodeUtil.newExpr(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Callable<Node> callable0 = (Callable<Node>) mock(Callable.class, new ViolatedAssumptionAnswer());
      JSModule[] jSModuleArray0 = new JSModule[6];
      Compiler compiler1 = new Compiler();
      VarCheck varCheck0 = null;
      try {
        varCheck0 = new VarCheck(compiler1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      // Undeclared exception!
      try { 
        SimpleDefinitionFinder.getNameNodeFromFunctionNode(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-521));
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.detachChildren();
      Integer integer0 = new Integer(3);
      node0.putProp((-27), integer0);
      boolean boolean0 = NodeUtil.containsType(node0, 18);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 26);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      double double0 = Double.POSITIVE_INFINITY;
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getRoot();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2839);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2839
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NodeUtil.opToStr(2826);
      NodeUtil.isSimpleOperatorType(2826);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue((Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString(2344, (String) null, (-1189), 2344);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(100);
      NodeUtil.containsFunction(node0);
      Node node1 = NodeUtil.newExpr(node0);
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber((-3375.47758098565), 0, 636);
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node((-1976), 0, 112);
      Node node1 = new Node(112, node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getCount(node1, (Predicate<Node>) null, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }
}

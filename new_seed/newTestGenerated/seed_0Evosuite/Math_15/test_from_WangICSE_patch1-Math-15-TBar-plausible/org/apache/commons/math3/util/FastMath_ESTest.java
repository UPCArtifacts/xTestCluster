/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 11:31:09 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FastMath.copySign((-1.4E-45F), (float) 0L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FastMath.copySign(0.0F, (-1066.247F));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FastMath.copySign((-4.547473508864641E-13), 0.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FastMath.copySign(0.0, (-7.853944465095286E-8));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FastMath.hypot(1.1795268640216787E-8, 1.570796314999628);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FastMath.max((long) 603, 5912L);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FastMath.max(210, 2890);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FastMath.min(780L, 4602678819172646912L);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FastMath.min(2, 1140200875);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FastMath.rint(2203.5);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FastMath.ceil((-567.4149203263563));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FastMath.scalb((-1.0F), 276);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FastMath.scalb(0.0F, 128);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FastMath.scalb(1057.407, 2097);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FastMath.scalb((double) 1024, 1024);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FastMath.ulp((-2681.9573F));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FastMath.ulp(1.633123935319537E16);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FastMath.ulp(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FastMath.ulp(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FastMath.abs(2047L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FastMath.abs(1024);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FastMath.toRadians(3156);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FastMath.cbrt((-4.9E-324));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FastMath.asin(0.9416477516663423);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FastMath.atan2(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FastMath.acos(6.123233995736766E-17);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FastMath.tan((-1.5707963267948966));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FastMath.cos(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FastMath.cos(3294198.0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FastMath.cos(0.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FastMath.sin(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FastMath.sin(3.1613917467297413E135);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FastMath.log1p((-1.0E-6));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FastMath.log1p(1.0E-6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FastMath.expm1(1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FastMath.expm1((-1.0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FastMath.signum(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FastMath.signum(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FastMath.atanh(0.15);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FastMath.asinh(0.097);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FastMath.tanh(0.5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FastMath.tanh((-20.0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FastMath.tanh(20.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FastMath.sinh((-20.0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FastMath.sinh(709.782712893384);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FastMath.sinh(20.0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FastMath.cosh(0.0F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FastMath.cosh((-20.0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FastMath.cosh(20.0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FastMath.atan2(0.167, (-2.2250738585072014E-308));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FastMath.toDegrees((-0.9637450651742684));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FastMath.sqrt(0.0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FastMath.round((-1.4E-45F));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FastMath.round(842.0F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FastMath.round(0.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FastMath.round((-1.7976931348623157E308));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FastMath.rint((-554.261169));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FastMath.pow((-3294.6850169), 1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FastMath.nextUp((-1.4E-45F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FastMath.nextAfter(1.4E-45F, (-1.0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FastMath.nextAfter(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FastMath.min(1275L, 0L);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FastMath.min(190, (-645));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FastMath.min(4453.4F, 4453.4F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FastMath.min((double) 1L, 0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FastMath.max((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FastMath.max((-841L), (-2918L));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FastMath.max(0, 0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FastMath.max((-536), (-536));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FastMath.max(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FastMath.log10(1.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FastMath.log10(0.625);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FastMath.log(0.0, 2.0736172194624895E-222);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FastMath.log(1.3280021798948244E-8, 5.964146766417539E-223);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FastMath.log((double) 1687L, 0.0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FastMath.log(1.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FastMath.hypot(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FastMath.getExponent((-1.0F));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FastMath.getExponent((float) 2144843700);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FastMath.getExponent(1.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FastMath.getExponent((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FastMath.exp((-2.1474829959999998E9));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FastMath.copySign(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FastMath.atanh(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FastMath.atan((-737));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FastMath.acosh(1.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FastMath.acosh((-3.18990828E10F));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FastMath.abs((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FastMath.abs(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FastMath.IEEEremainder(0.0, 508.659051);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FastMath.IEEEremainder(1.0, 1.5);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      FastMath.pow((-6.038239639506472E-32), Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = FastMath.copySign(0.0, (double) 355.61713F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = FastMath.floor(2.4700104681773258E-79);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = FastMath.floor((-855.1511879));
      assertEquals((-856.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = FastMath.floor(4465.08170136744);
      assertEquals(4465.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = FastMath.floor((-4.503599627370496E15));
      assertEquals((-4.503599627370496E15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = FastMath.floor(2.677136737066629E238);
      assertEquals(2.677136737066629E238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = FastMath.floor(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = FastMath.nextAfter(1.2207031E-4F, (double) 2117.0203F);
      assertEquals(1.2207033E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = FastMath.nextAfter(-0.0F, 3.735333866258403E-239);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.NEGATIVE_INFINITY, (double) (-2074.3914F));
      assertEquals((-3.4028235E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.NaN, 3307.656277044);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = FastMath.nextAfter((double) (-1023), (double) (-3015.9734F));
      assertEquals((-1023.0000000000001), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = FastMath.nextAfter((-997.04563247), 0.0);
      assertEquals((-997.0456324699999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = FastMath.nextAfter(0.0, 2.0217439756338078E-10);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.NEGATIVE_INFINITY, 1411.1253275758816);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.NaN, (double) (-3553.5981F));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = FastMath.abs((double) 11);
      assertEquals(11.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = FastMath.abs((-1655.844246795666));
      assertEquals(1655.844246795666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = FastMath.sqrt(0.32860567799731955);
      assertEquals(0.5732413784762223, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = FastMath.cos(3.141592653589793);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = FastMath.copySign((-2.4414062E-4F), 1.0F);
      assertEquals(2.4414062E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = FastMath.copySign(2.4414062E-4F, (-2074.3914F));
      assertEquals((-2.4414062E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = FastMath.copySign(1416.0F, 1416.0F);
      assertEquals(1416.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = FastMath.copySign((-6037.507F), (-6037.507F));
      assertEquals((-6037.507F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = FastMath.copySign((-0.05483113556160755), (double) 3156);
      assertEquals(0.05483113556160755, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = FastMath.copySign(1728.6, (-568.3273));
      assertEquals((-1728.6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = FastMath.copySign((-1132.3545156), (-1132.3545156));
      assertEquals((-1132.3545156), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = FastMath.hypot((-2147482996), (-2147482996));
      assertEquals(3.036999577908807E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = FastMath.hypot(3.141592653589793, 4.771116179915508E-17);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = FastMath.hypot(1.5, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = FastMath.hypot(Double.NaN, 0.11111095942313305);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = FastMath.hypot(1360.0F, Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = FastMath.hypot(0, (-2984.21224034681));
      assertEquals(2984.21224034681, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = FastMath.hypot(Double.POSITIVE_INFINITY, (-1619.7454));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = FastMath.max((double) -0.0F, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = FastMath.max(Double.NaN, (double) 1628.0701F);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = FastMath.max((-1827.28482147), (-1607.06));
      assertEquals((-1607.06), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = FastMath.max(1502.17624, (-0.49999999999999994));
      assertEquals(1502.17624, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = FastMath.max((-2313.32089), (-2313.32089));
      assertEquals((-2313.32089), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = FastMath.max(Float.NaN, Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = FastMath.max((float) (-2147482996), (-237.36F));
      assertEquals((-237.36F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float float0 = FastMath.max(1.2207031E-4F, (-745.0496F));
      assertEquals(1.2207031E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = FastMath.max(292, (-523));
      assertEquals(292, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = FastMath.min((-0.2499999997677497), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = FastMath.min((-676.0376732357462), 3.141592653589793);
      assertEquals((-676.0376732357462), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = FastMath.min(931.4586587334435, 931.4586587334435);
      assertEquals(931.4586587334435, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float float0 = FastMath.min(-0.0F, 0.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float float0 = FastMath.min((-1367.274F), Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = FastMath.min((-4643.0F), 1161.4183F);
      assertEquals((-4643.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = FastMath.min((float) 276, (-3.60061F));
      assertEquals((-3.60061F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = FastMath.min((-2044L), (-2044L));
      assertEquals((-2044L), long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = FastMath.min(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = FastMath.rint(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = FastMath.rint(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = FastMath.rint(709.87717835);
      assertEquals(710.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = FastMath.rint((-0.2499999997677497));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = FastMath.ceil((-4.440892098500626E-16));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = FastMath.ceil(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = FastMath.floor((-715.0));
      assertEquals((-715.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = FastMath.ceil(0.99);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = FastMath.ceil(Float.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = FastMath.rint(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = FastMath.nextAfter((-1929.45F), 2.925681159240093E-8);
      assertEquals((-1929.4498F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float float0 = FastMath.nextAfter(0.0F, (-2667.0085594460024));
      assertEquals((-1.4E-45F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float float0 = FastMath.nextUp(-0.0F);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.POSITIVE_INFINITY, 0.0);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float float0 = FastMath.nextUp(Float.NEGATIVE_INFINITY);
      assertEquals((-3.4028235E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float float0 = FastMath.nextAfter((-1710.4727F), (double) (-1710.4727F));
      assertEquals((-1710.4727F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float float0 = FastMath.nextAfter((float) 2147317019, Double.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = FastMath.nextUp(0.9913142243825287);
      assertEquals(0.9913142243825288, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = FastMath.nextAfter(2408.0, 3.4376020992005776);
      assertEquals(2407.9999999999995, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = FastMath.nextAfter(0.0, (-77.11954));
      assertEquals((-4.9E-324), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = FastMath.nextUp(Double.NEGATIVE_INFINITY);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.POSITIVE_INFINITY, (-960.0173472117032));
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = FastMath.nextAfter((double) (-2147483647), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float float0 = FastMath.scalb((float) 140, 140);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float float0 = FastMath.scalb(3.0517578E-5F, 140);
      assertEquals(4.2535296E37F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float float0 = FastMath.scalb((-1.4E-45F), 140);
      assertEquals((-0.001953125F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float float0 = FastMath.scalb((-1.4E-45F), (-277));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float float0 = FastMath.scalb((-1.0F), (-127));
      assertEquals((-5.877472E-39F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float float0 = FastMath.scalb(1.4E-45F, (-127));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float float0 = FastMath.scalb((float) (-2048909197), (-127));
      assertEquals((-1.2042406E-29F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float float0 = FastMath.scalb((-141.967F), (-141));
      assertEquals((-5.0929E-41F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float float0 = FastMath.scalb((-1710.4725F), 2960);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float float0 = FastMath.scalb((-3015.9734F), (-1023));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float float0 = FastMath.scalb(256.0F, (-1312145622));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float float0 = FastMath.scalb(Float.POSITIVE_INFINITY, 709);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float float0 = FastMath.scalb(Float.NaN, 1025);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float float0 = FastMath.scalb(3120.2402F, 662);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float float0 = FastMath.scalb(242.52F, 0);
      assertEquals(242.52F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = FastMath.scalb((-2305.55249108), 1427);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = FastMath.scalb(1.772256261139753E-144, 1427);
      assertEquals(6.581582534738428E285, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = FastMath.scalb((double) (-2088), (-2088));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = FastMath.scalb(0.1, (-1023));
      assertEquals(1.1125369292536E-309, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = FastMath.scalb(1.583960844129913, (-1023));
      assertEquals(1.7622149335862345E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = FastMath.scalb(1677.33, (-1680));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = FastMath.scalb((-3.3275364949729786E300), 3009);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = FastMath.scalb((-0.09088450866185192), (-2196));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = FastMath.scalb(0.7901562128691039, (-5936));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double double0 = FastMath.scalb(0.0, 8388607);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double double0 = FastMath.scalb(Double.POSITIVE_INFINITY, 2147483629);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = FastMath.scalb(Double.NaN, 8388607);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = FastMath.scalb(293.77576083, 2295);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = FastMath.scalb((-3295.329736), (-181));
      assertEquals((-1.07515149249246E-51), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = FastMath.scalb((double) (-1023), (-1023));
      assertEquals((-1.1381252786264335E-305), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      float float0 = FastMath.ulp(Float.NEGATIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double double0 = FastMath.ulp(Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double double0 = FastMath.abs(-0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float float0 = FastMath.abs(3.4028235E38F);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      float float0 = FastMath.abs((-844.4576F));
      assertEquals(844.4576F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float float0 = FastMath.abs(-0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long long0 = FastMath.abs(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = FastMath.abs(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double double0 = FastMath.toDegrees(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double double0 = FastMath.toDegrees(14.416082853983623);
      assertEquals(825.9807046441722, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double double0 = FastMath.toDegrees(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double double0 = FastMath.toRadians((-4.9E-324));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double double0 = FastMath.toRadians(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double double0 = FastMath.toRadians(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double double0 = FastMath.cbrt(Float.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double double0 = FastMath.cbrt(4.9E-324);
      assertEquals(1.7031839360032603E-108, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double double0 = FastMath.cbrt(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double double0 = FastMath.cbrt((-1607.06));
      assertEquals((-11.713248683019623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double double0 = FastMath.acos(4.9E-324);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = FastMath.acos(0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = FastMath.acos(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = FastMath.acos((-1.0F));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double double0 = FastMath.acos((-513.5797601));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = FastMath.acos(1823.243161184011);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = FastMath.acos(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = FastMath.asin(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = FastMath.asin((-1.0));
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = FastMath.asin(1.0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = FastMath.asin((-1.007904F));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = FastMath.asin(2383);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = FastMath.asin(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = FastMath.atan2(965.0833843999999, (-2.2250738585072014E-308));
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double double0 = FastMath.atan2(8.695300440476606, 2.2250738585072014E-308);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = FastMath.atan2(8.271806125530277E-25, -0.0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = FastMath.atan2((-3737.970982332467), 0);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double double0 = FastMath.atan2(9.219544613762692E-9, Double.NEGATIVE_INFINITY);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = FastMath.atan2((-1979.594051984), Float.NEGATIVE_INFINITY);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = FastMath.atan2((-1.0), Double.POSITIVE_INFINITY);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double double0 = FastMath.atan2(3.141592653589793, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = FastMath.atan2(Float.NEGATIVE_INFINITY, (-2121.56));
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, (-2531.59308));
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double double0 = FastMath.atan2(-0.0F, (-3822.334228515625));
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double double0 = FastMath.atan2(0.0F, (-1023));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, 2.677136737066629E238);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NaN, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double double0 = FastMath.atan2((-1254), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double double0 = FastMath.atan2((-0.2499999997677497), (-0.2499999997677497));
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double double0 = FastMath.atan2((-852.355), (-3.996102152263583E-18));
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double double0 = FastMath.acos((-1.1381252786264335E-305));
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double double0 = FastMath.asin((-3.081552929643174E-9));
      assertEquals((-3.081552929643174E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double double0 = FastMath.atan(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double double0 = FastMath.tan(1913.203);
      assertEquals((-0.026932545299738268), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double double0 = FastMath.tan(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double double0 = FastMath.tan(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double double0 = FastMath.tan(-0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double double0 = FastMath.tan(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double double0 = FastMath.cos((-122.590856));
      assertEquals((-0.9976381639571636), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double double0 = FastMath.cos(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double double0 = FastMath.cos(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double double0 = FastMath.sin((-3917.1225543062));
      assertEquals((-0.42908967899964745), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double double0 = FastMath.sin((-7.800414592973399E-9));
      assertEquals((-7.800414592973399E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double double0 = FastMath.sin((-3.4028235E38F));
      assertEquals(0.5218765233336585, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double double0 = FastMath.sin(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double double0 = FastMath.sin(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double double0 = FastMath.sin(-0.0F);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double double0 = FastMath.sin(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double double0 = FastMath.tan(1.633123935319537E16);
      assertEquals(3.370587556518889, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double double0 = FastMath.tan((-2048909197));
      assertEquals((-1.358279343691853), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double double0 = FastMath.cos(8.528268445871411E254);
      assertEquals((-0.9967683448855641), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double double0 = FastMath.cos(1.3737662426564964E259);
      assertEquals(0.002372785407849989, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double double0 = FastMath.tan((-3.288753961923855E235));
      assertEquals(0.4359179477672197, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double double0 = FastMath.tan((-2147482996));
      assertEquals((-0.12118053625505286), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double double0 = FastMath.cos(8227717.999765635);
      assertEquals(0.9980380989741298, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double double0 = FastMath.tan(1.0361722296739479E11);
      assertEquals(4.6023787913899215, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double double0 = FastMath.tan(0.5576234586579197);
      assertEquals(0.623643776041155, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double double0 = FastMath.pow(2.718281828459045, (-2048909144));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double double0 = FastMath.pow(Double.NaN, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double double0 = FastMath.pow(0.003, (-8.0E298));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double double0 = FastMath.pow(0.45050725648735984, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double double0 = FastMath.pow((double) (-2323.97F), (double) 3120.2402F);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double double0 = FastMath.pow((-0.2499999997677497), (-4.503599627370496E15));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double double0 = FastMath.pow((-714.7661370871372), 1.2897084285532175E95);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double double0 = FastMath.pow(1713.2832315646, (double) Float.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double double0 = FastMath.pow(4.9E-324, Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (-1610.2361206));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.NEGATIVE_INFINITY, (double) 2.4414062E-4F);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double double0 = FastMath.pow((double) 750, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double double0 = FastMath.pow(Double.POSITIVE_INFINITY, (-2074.671295621));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double double0 = FastMath.pow(Double.POSITIVE_INFINITY, 1728.0469002767022);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double double0 = FastMath.pow(0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, (double) 5912L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, (-375.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, (-2272.0233693912));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, 2549.04042884813);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double double0 = FastMath.pow(Double.NaN, (-1.1381252786264335E-305));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double double0 = FastMath.pow((double) 0.0F, 0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double double0 = FastMath.log1p(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double double0 = FastMath.log1p(Float.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double double0 = FastMath.log1p(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double double0 = FastMath.log1p((-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double double0 = FastMath.log((double) 1, (-3294.6850169));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double double0 = FastMath.log1p(1.2207031E-4F);
      assertEquals(1.2206286252567737E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double double0 = FastMath.pow(0.7214844226837158, 0.7214844226837158);
      assertEquals(0.7901562128691039, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double double0 = FastMath.pow(4.9E-324, (double) 2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double double0 = FastMath.log(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double double0 = FastMath.log10(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double double0 = FastMath.acosh((-4.813899778443457E-9));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double double0 = FastMath.log(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double double0 = FastMath.expm1((-0.2526123165686223));
      assertEquals((-0.22323103608498407), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double double0 = FastMath.expm1(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double double0 = FastMath.expm1(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double double0 = FastMath.expm1(776.694093);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double double0 = FastMath.exp((-709.6F));
      assertEquals(6.67799738022882E-309, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      double double0 = FastMath.expm1((-745.995398));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double double0 = FastMath.pow(545.8, (-118.5));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double double0 = FastMath.pow((double) (-2649), (double) (-2649));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      float float0 = FastMath.signum(0.19112569F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      float float0 = FastMath.signum((-12.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      float float0 = FastMath.signum(-0.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double double0 = FastMath.signum((double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double double0 = FastMath.signum((double) (-4188));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double double0 = FastMath.signum(2.677136737066629E238);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double double0 = FastMath.atanh(0.008333333333329196);
      assertEquals(0.008333526242601714, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double double0 = FastMath.atanh((-0.05483113556160755));
      assertEquals((-0.05488618398122306), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double double0 = FastMath.atanh((-1817.057200406));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double double0 = FastMath.asinh(0.017453292519943295);
      assertEquals(0.017452406545229723, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double double0 = FastMath.asinh((-0.09088450866185192));
      assertEquals((-0.09075985386836895), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double double0 = FastMath.asinh((-0.1428571423679182));
      assertEquals((-0.1423756426834967), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double double0 = FastMath.asinh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double double0 = FastMath.asinh((-118.5));
      assertEquals((-5.468077944074403), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double double0 = FastMath.asinh(0.3063063621520996);
      assertEquals(0.30170817733878325, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double double0 = FastMath.tanh((-0.2499999997677497));
      assertEquals((-0.2449186621853904), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double double0 = FastMath.tanh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double double0 = FastMath.tanh((-2736.3685));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      double double0 = FastMath.tanh(2448.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double double0 = FastMath.tanh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double double0 = FastMath.sinh((-0.2499999997677497));
      assertEquals((-0.2526123165686223), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double double0 = FastMath.sinh(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      double double0 = FastMath.sinh((-607.862));
      assertEquals((-4.898717136719969E263), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double double0 = FastMath.sinh((-2074.671295621));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double double0 = FastMath.sinh(108.733394);
      assertEquals(8.342246475866001E46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double double0 = FastMath.sinh(1500);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double double0 = FastMath.sinh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double double0 = FastMath.cosh((-600.726194));
      assertEquals(3.899789748292518E260, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double double0 = FastMath.cosh(578.339734073429);
      assertEquals(7.391373998163219E250, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double double0 = FastMath.cosh(1500);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double double0 = FastMath.cosh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double double0 = FastMath.atan2(4.9E-324, (-1.5694394755244514));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double double0 = FastMath.atan2(1961.1, 465.41314424);
      assertEquals(1.3377845604071303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double double0 = FastMath.toRadians((-1649.8315819));
      assertEquals((-28.794993207541484), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double double0 = FastMath.random();
      double double1 = FastMath.random();
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = FastMath.getExponent(2544.1568);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = FastMath.getExponent(0.0F);
      assertEquals((-127), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FastMath.main(stringArray0);
      // Undeclared exception!
      FastMath.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double double0 = FastMath.cosh((-4105.8589));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double double0 = FastMath.IEEEremainder(295.38079874575, (-118.5));
      assertEquals(58.380798745749985, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      double double0 = FastMath.atan(557.296552);
      assertEquals(1.569001951927242, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double double0 = FastMath.acosh(4465.08170136744);
      assertEquals(9.097189959342204, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double double0 = FastMath.expm1((-3737.970982332467));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = FastMath.round((float) (-12));
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      long long0 = FastMath.round(1.1279135096919439E268);
      assertEquals(9223372036854775807L, long0);
  }
}

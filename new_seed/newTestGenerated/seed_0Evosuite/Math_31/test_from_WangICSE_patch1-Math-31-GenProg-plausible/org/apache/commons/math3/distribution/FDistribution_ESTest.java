/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 03:39:42 GMT 2022
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.682925848552197E-9, 221.4079066);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(4.389058384680722E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2004790926913134, 4.0);
      double double0 = fDistribution0.sample();
      assertEquals(4.591205473408211, double0, 0.01);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.6812789755489223E-9, 2.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.inverseCumulativeProbability(0.49999998935205264);
      assertEquals(1.862645130997553E-9, double0, 0.01);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.6487176418304443, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, (-1763.63), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 3.735333866258403E-239);
      boolean boolean0 = fDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(3.735333866258403E-239, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2087698972768686E-183, 1.2087698972768686E-183);
      double double0 = fDistribution0.getSupportUpperBound();
      assertEquals(1.2087698972768686E-183, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1.2087698972768686E-183, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2087698972768686E-183, 1.2087698972768686E-183, (-1.915204563140137E-9));
      double double0 = fDistribution0.getSupportLowerBound();
      assertEquals(1.2087698972768686E-183, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.2087698972768686E-183, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 3.735333866258403E-239);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals(3.735333866258403E-239, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.4029389287749316E16, 0.5, (-1.0));
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1.4029389287749316E16, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(425.0, 425.0);
      double double0 = fDistribution0.density(425.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.8939170679975288E-131, 1.8939170679975288E-131);
      double double0 = fDistribution0.cumulativeProbability((-3533.9));
      assertEquals(1.8939170679975288E-131, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.8939170679975288E-131, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3259.863, 3259.863);
      double double0 = fDistribution0.cumulativeProbability(3259.863);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(425.0, 425.0);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(0.009568678158665066, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-31.342), (-31.342), (-31.342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-31.342)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2004790926913134, 4.0);
      double double0 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.2004790926913134, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(40.296445, 1874.228);
      double double0 = fDistribution0.getDenominatorDegreesOfFreedom();
      assertEquals(1874.228, double0, 0.01);
      assertEquals(40.296445, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 0.0);
      fDistribution0.getNumericalVariance();
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3.443259341924193E-6, 7.97740328, 1.0E-9);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(1.3345934524263854, double0, 0.01);
      assertEquals(3.443259341924193E-6, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(7.97740328, (-665.166814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-665.167)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-31.341502302293634), (-31.341502302293634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-31.342)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.2004790926913134);
      double double0 = fDistribution0.density(1781.819183711);
      assertEquals(2.806118350957493E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2087698972768686E-183, 1.2087698972768686E-183);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1.2087698972768686E-183, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.2087698972768686E-183, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(360.91672109097885, 360.91672109097885);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(360.91672109097885, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.005572323278561, fDistribution0.getNumericalMean(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.2004790926913134);
      assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.6812789755489223E-9, double0, 0.01);
      assertEquals(1.2004790926913134, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0E-9, 1.0E-9, 0.0);
      double double0 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2341.7549469611586, 2341.7549469611586);
      double double0 = fDistribution0.probability(2341.7549469611586);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2341.7549469611586, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.000854790371358, fDistribution0.getNumericalMean(), 0.01);
  }
}

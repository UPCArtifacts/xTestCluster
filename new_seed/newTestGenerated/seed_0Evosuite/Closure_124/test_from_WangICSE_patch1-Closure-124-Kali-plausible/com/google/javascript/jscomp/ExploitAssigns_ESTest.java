/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:34:54 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("msg.bad.default.value");
      Node node1 = new Node(36, node0);
      node1.setWasEmptyNode(true);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isCase());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("<");
      Node node1 = new Node(52, node0);
      node1.setVarArgs(true);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("~");
      Node node1 = new Node(32, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, 37, 12);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("rbR?;~7ek.Pem?C=|");
      Node node1 = new Node(40, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isOr());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("com.google.javascript.jscomp.CheckEventfulObjectDisposal$EventfulObjectState");
      Node node1 = new Node(4, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isHook());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newNumber((double) 100);
      Node node1 = new Node(100, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(39, 50, 40);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(38);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isStringKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(51);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(147, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("HHQ4]^@u42%!.AI<");
      Node node1 = new Node(43, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(56, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(86);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isOnlyModifiesArgumentsCall());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ExploitAssigns");
      node0.addChildrenToBack(node0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isLabel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((-4108), (-1353), (-4108));
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isExprResult());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(0, "q+\"R\"c;MKgW.v}`p+M", 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(618, nodeArray0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isCast());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(47, node0, 0, 15);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isIn());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(108);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(37, node0, node0, node0, node0, 29, 4095);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isAdd());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("msg.bad.default.value");
      Node node1 = new Node(36, node0);
      node1.setChangeTime(38);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(38, node2.getChangeTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ExploitAssigns", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("com.google.javascript.rhino.head.ast.FunctionNode");
      Node node1 = new Node(30, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }
}

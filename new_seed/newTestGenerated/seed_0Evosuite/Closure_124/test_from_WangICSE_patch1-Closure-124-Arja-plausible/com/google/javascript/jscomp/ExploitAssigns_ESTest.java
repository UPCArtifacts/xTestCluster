/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:36:48 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(122);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isNew());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, node0, 4095, 2);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(4095, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(1158);
      Node node1 = new Node(154, node0, node0, 32, 30);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isBreak());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("s eS");
      Node node1 = new Node(47, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isReturn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString((-1274), "QItRzS`-I~*", 0, 100);
      Node node1 = new Node(100, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isNot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(897, node0, node0, node0, node0);
      node1.setOptionalArg(true);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isAnd());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString((-4476), "com.google.javascript.jscomp.ExploitAssigns");
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(38);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("a");
      Node node1 = new Node(52, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isBreak());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ExploitAssigns");
      node0.setType(108);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(0, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString(0, "", (-1144), 0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(33, nodeArray0, 8, (-1));
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(43, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(31, node2.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(86, 86, 0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isReturn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((byte)63, (byte)63, 0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isInc());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = Node.newString("");
      Node node2 = new Node(4, node1, node1, node0, node0, 48, 8);
      Node node3 = exploitAssigns0.optimizeSubtree(node2);
      assertFalse(node3.isFunction());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(0, 250, (-3428));
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("pTkD", "pTkD");
      node0.setCharno(2455);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(101, nodeArray0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(960, 960, 0);
      Node node1 = new Node(113, node0, node0, 50, 49);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((-1859));
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isCatch());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ExploitAssigns");
      node0.setChangeTime(2471);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ExploitAssigns", e);
      }
  }
}

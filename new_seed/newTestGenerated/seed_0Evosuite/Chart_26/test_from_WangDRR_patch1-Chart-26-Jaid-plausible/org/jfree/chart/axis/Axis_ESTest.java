/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 14 21:08:49 GMT 2022
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.RangeType;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Year;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Axis_ESTest extends Axis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RingPlot ringPlot0 = new RingPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("bhmS*d<");
      extendedCategoryAxis0.setAxisLineStroke(ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT, ringPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1637, 40);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      extendedCategoryAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[][] floatArray0 = new float[3][1];
      NumberAxis numberAxis0 = new NumberAxis("0U3u|15:");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, numberAxis0, numberAxis0);
      RangeType rangeType0 = RangeType.POSITIVE;
      numberAxis0.setRangeType(rangeType0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.AxisChangeListener");
      extendedCategoryAxis0.setTickMarkPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      numberAxis0.setTickMarkStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      JFreeChart jFreeChart0 = new JFreeChart("7$<&=$DL/9O%2P", extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      jFreeChart0.createBufferedImage(1637, 500);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis0.setTickMarkOutsideLength(500);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("''SjtbKYj(F\" Okz1!K");
      extendedCategoryAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.AxisChangeListener");
      extendedCategoryAxis0.setTickLabelInsets(thermometerPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      NumberAxis numberAxis0 = new NumberAxis();
      extendedCategoryAxis0.setTickLabelInsets(numberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      extendedCategoryAxis0.getTickLabelInsets();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("org.jfree.chartHaxis.CategoryLabeGWidthType");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      dateAxis0.setTickLabelPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("org.jfree.chartHaxis.CategoryLabeGWidthType");
      dateAxis0.setTickLabelsVisible(false);
      dateAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-2257.8817043));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.Axis", extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT, thermometerPlot0, false);
      jFreeChart0.createBufferedImage(10, 25);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.event.AxisChangeListener");
      extendedCategoryAxis0.setLabelInsets(thermometerPlot0.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      extendedCategoryAxis0.getLabelInsets();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setLabelPaint(categoryAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2);
      extendedCategoryAxis0.setLabelFont(cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT);
      extendedCategoryAxis0.setLabelFont(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'stroke' argument.", stringArray0);
      symbolAxis0.setVisible(false);
      symbolAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      extendedCategoryAxis0.setVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainCategoryPlot0);
      jFreeChart0.createBufferedImage(10, 10);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("k b44yui0nz4*;");
      CompassPlot compassPlot0 = new CompassPlot();
      categoryAxis3D0.setPlot(compassPlot0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("~k{");
      categoryAxis3D0.setAxisLineVisible(true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
      categoryAxis0.notifyListeners(axisChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      DateAxis dateAxis0 = new DateAxis("");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryAxis0.DEFAULT_AXIS_LABEL_FONT, spiderWebPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 100);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("v3");
      subCategoryAxis0.drawAxisLine(graphics2D0, (-209.1), rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.configure();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.util.StandardGradientPaintTransformer");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 500);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      periodAxis0.addChangeListener(thermometerPlot0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      DateAxis dateAxis0 = new DateAxis("");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryAxis0.DEFAULT_AXIS_LABEL_FONT, spiderWebPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 100);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = categoryAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("u");
      extendedCategoryAxis0.refreshTicks(graphics2D0, axisState0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      moduloAxis0.isVisible();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("k b44yui0nz4*;");
      categoryAxis3D0.isTickMarksVisible();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.isTickLabelsVisible();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.isAxisLineVisible();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      categoryAxis0.getTickMarkStroke();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(",FL");
      extendedCategoryAxis0.getTickMarkPaint();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getTickMarkOutsideLength();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.getTickMarkInsideLength();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.getTickLabelPaint();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.getTickLabelFont();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      thermometerPlot0.setOutlineVisible(false);
      valueAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.getPlot();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.setLabelURL("");
      extendedCategoryAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RingPlot ringPlot0 = new RingPlot();
      dateAxis0.setLabel("T$eJmZ!zcGv-|Y<6");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, categoryAxis3D0.DEFAULT_AXIS_LABEL_FONT, ringPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1637, 40);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'state' argument.");
      dateAxis0.getLabel();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.getFixedDimension();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis(" [DL@'");
      numberAxis0.getAxisLineStroke();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F);
      cyclicNumberAxis0.getAxisLinePaint();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      extendedCategoryAxis0.clone();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("cg&IRZ");
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      BufferedImage bufferedImage0 = new BufferedImage(15, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Year year0 = new Year(dateAxis0.DEFAULT_ANCHOR_DATE);
      Minute minute0 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("Xg&IRZ", year0, minute0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
      AxisSpace axisSpace0 = periodAxis0.reserveSpace(graphics2D0, compassPlot0, rectangle2D0, rectangleEdge0, (AxisSpace) null);
      // Undeclared exception!
      dateAxis0.reserveSpace(graphics2D0, spiderWebPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      DateAxis dateAxis0 = new DateAxis("");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryAxis0.DEFAULT_AXIS_LABEL_FONT, spiderWebPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 100);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      Rectangle2D rectangle2D0 = dateAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = categoryAxis0.draw(graphics2D0, 0.0, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
      // Undeclared exception!
      dateAxis0.refreshTicks(graphics2D0, axisState0, rectangle2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("cg&IRZ");
      // Undeclared exception!
      try { 
        subCategoryAxis0.getLabelEnclosure((Graphics2D) null, (RectangleEdge) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'paint' argument.");
      extendedCategoryAxis0.getLabelAngle();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'state' argument.");
      extendedCategoryAxis0.getLabelFont();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.getLabelPaint();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setFixedDimension(2.0F);
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setTickMarkPaint(extendedCategoryAxis1.DEFAULT_AXIS_LABEL_PAINT);
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis1.setTickLabelInsets(extendedCategoryAxis1.DEFAULT_AXIS_LABEL_INSETS);
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis1.setTickLabelPaint(extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null stroe' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Unrecognised position.");
      extendedCategoryAxis0.setTickLabelFont(subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Unrecognised position.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      extendedCategoryAxis1.setAxisLinePaint(color0);
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setLabelURL("Null 'stroke' argumeet.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' areumeLt.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("cg&IRZ");
      BufferedImage bufferedImage0 = new BufferedImage(15, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryAxis0.draw(graphics2D0, 2.5E11, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis(":@)[wL~xHn");
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        categoryAxis0.draw((Graphics2D) null, 1052.7461491235, (Rectangle2D) null, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("cg&IRZ");
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(matrixSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("cg&IRZ", dateAxis0.DEFAULT_TICK_LABEL_FONT, polarPlot0, true);
      jFreeChart0.createBufferedImage(41, 500);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.drawLabel("Null 'labelPaint' argument.", (Graphics2D) null, defaultCaret0, defaultCaret0, rectangleEdge0, (AxisState) null, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("VS:M,JM8pah:73l5\"/o");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      categoryAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainCategoryPlot0);
      jFreeChart0.createBufferedImage(10, 10);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      extendedCategoryAxis0.hasListener(combinedDomainCategoryPlot0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=Z$0");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      extendedCategoryAxis0.hasListener(combinedDomainXYPlot0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.removeChangeListener((AxisChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.removeChangeListener(thermometerPlot0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("w");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setTickMarkPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "h{8eAut2$");
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.setTickMarkStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      NumberAxis numberAxis0 = new NumberAxis();
      numberAxis0.setTickMarkStroke(extendedCategoryAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("_+QQ>`5XInJM3.-/ K");
      logarithmicAxis0.setTickMarksVisible(true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("=Z$0");
      extendedCategoryAxis0.setTickLabelInsets(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis0.setTickLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
      extendedCategoryAxis0.setTickLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'series' argument.");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setTickLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setTickLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      extendedCategoryAxis0.setTickLabelFont(extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.setTickLabelsVisible(true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setAxisLineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      // Undeclared exception!
      try { 
        categoryAxis0.setAxisLinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      // Undeclared exception!
      try { 
        extendedCategoryAxis0.setLabelInsets((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'insets' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2");
      extendedCategoryAxis0.setLabelInsets(extendedCategoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("2");
      extendedCategoryAxis0.equals(extendedCategoryAxis1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("Last", stringArray0);
      // Undeclared exception!
      try { 
        symbolAxis0.setLabelPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("cg&IRZ");
      DateAxis dateAxis0 = new DateAxis("cg&IRZ");
      dateAxis0.setLabelPaint(categoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("0U3u|15:");
      extendedCategoryAxis0.setLabelFont(extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SansSerif");
      // Undeclared exception!
      try { 
        subCategoryAxis0.setLabelFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("2");
      dateAxis0.setLabel("5");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("r5sll(Dfg}7W'z_");
      dateAxis0.setLabel("r5sll(Dfg}7W'z_");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.setLabel((String) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setVisible(false);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("=Z$0", stringArray0);
      symbolAxis0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      symbolAxis0.setTickMarkInsideLength(10);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      symbolAxis0.getLabelToolTip();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setLabelToolTip("Null 'stroke' argument.");
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis0.setLabelAngle(2.0E9);
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("Null 'stroke' argumeet.");
      extendedCategoryAxis1.equals(extendedCategoryAxis0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'stroke' argument.");
      extendedCategoryAxis0.setLabelURL("Null 'stroke' argument.");
      extendedCategoryAxis0.getLabelURL();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("{yj", fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5355, 5355, chartRenderingInfo0);
      assertEquals(5355, bufferedImage0.getHeight());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:37:59 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Logit logit0 = new Logit(1384, 1384);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1384, univariateRealFunction0, 0.0, 0.008333333333329196, allowedSolution0);
      assertEquals(0.004166666666664598, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Minus minus0 = new Minus();
      double double0 = pegasusSolver0.solve(39, (UnivariateRealFunction) minus0, (-959.859269393401), 877.0, (-1335.812));
      assertEquals((-1335.812), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1553.298893092428), 3313.762257626877);
      illinoisSolver0.solve(2147481395, (UnivariateRealFunction) identity0, (-6.377671269243156E-8), 1.8652872355243062, (double) 2147481395, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(355.5107896, (-1.0), (-2.2250738585072014E-308));
      illinoisSolver0.solve(750, (UnivariateRealFunction) sinc0, (-744.3741), (-669.595654), 355.5107896, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(355.5107896, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-723.4696929285373), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2935, (UnivariateRealFunction) inverse0, (-1200.538), 2722.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,935) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-2050), (UnivariateRealFunction) inverse0, 8.039584253823226E-4, 8.039584253823226E-4, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,050) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(128, (UnivariateRealFunction) sinc0, (double) 750, (-4274.003792), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [750, -4,274.004]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-1886), (UnivariateRealFunction) null, (double) (-1886), (double) (-1886), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(750, (-2.2250738585072014E-308), 750);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(7, (UnivariateRealFunction) sinc0, (-2.2250738585072014E-308), (-2.2250738585072014E-308), 2.718281828459045, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-0, -0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2.356194490192345));
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(297, (UnivariateRealFunction) null, (double) 297, 10.134549152990871, (double) 297, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Log log0 = new Log();
      // Undeclared exception!
      regulaFalsiSolver0.solve(20097, (UnivariateRealFunction) log0, 0.0, 735.0, (double) 20097);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(20107, (UnivariateRealFunction) log0, (double) 20107, (double) 20107, (double) 20107);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [20,107, 20,107]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1012, (UnivariateRealFunction) null, (double) 1012, (double) 1012, (double) 1012);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log10 log10_0 = new Log10();
      regulaFalsiSolver0.setup(1073635353, log10_0, 6.508102468073332E-30, 1073635353, 2.7610131682735368E-30);
      // Undeclared exception!
      regulaFalsiSolver0.doSolve();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1335.812), (-1335.812), (-1335.812));
      Cbrt cbrt0 = new Cbrt();
      illinoisSolver0.setup(196, cbrt0, 196, 196, 196);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [196, 196]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 146;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      regulaFalsiSolver0.setup(146, polynomialFunction0, (-577.56961), 146, 2628.65389666158);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-577.57, 146], values: [146, 146]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4.7805822040047375E-30), 2935);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2935, (UnivariateRealFunction) inverse0, (-3459.62), (double) 2935, (-3459.62), allowedSolution0);
      assertEquals((-3459.62), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1885.7599999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2935, (UnivariateRealFunction) inverse0, (-6.87658736704211E-7), 1847.4306662498764, 1.0, allowedSolution0);
      assertEquals(1.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.4567753780825163E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(750, 684.8671984825751, 750);
      double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) sinc0, 93.302889889, 684.8671984825751, 93.302889889, allowedSolution0);
      assertEquals(93.302889889, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(684.8671984825751, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2935, (UnivariateRealFunction) inverse0, (-902.9), 6.804471041008709E-7, allowedSolution0);
      assertEquals((-451.44999965977644), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-5.48681688365277E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2939, (UnivariateRealFunction) inverse0, (-4.290416805300292E-7), 6.850349423182873E-12, allowedSolution0);
      assertEquals((-2.1451741509030301E-7), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.2903483018060603E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4274.003792), 750, (-4274.003792));
      double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) sinc0, 92.45634089361647, (double) 750, (double) 750, allowedSolution0);
      assertEquals(750.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(693.4297867809572, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(9.916300828431701E-5, 9.916300828431701E-5);
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(20090, (UnivariateRealFunction) log0, 9.916300828431701E-5, 699.9774495824321, allowedSolution0);
      assertEquals(349.9887743727202, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2.2250738585072014E-308), 687.040765834792, 687.040765834792);
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-2.2250738585072014E-308), 93.302889889, allowedSolution0);
      assertEquals((-2.2250738585072014E-308), pegasusSolver0.getMin(), 0.01);
      assertEquals(92.49943638332415, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(9.916300828431701E-5, 9.916300828431701E-5);
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(20080, (UnivariateRealFunction) log0, 0.0021207368849900377, (double) 20080, allowedSolution0);
      assertEquals(10040.001060368442, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(750, 684.8671984825751, 750);
      double double0 = illinoisSolver0.solve(750, (UnivariateRealFunction) sinc0, 93.302889889, 684.8671984825751, 93.302889889, allowedSolution0);
      assertEquals(93.302889889, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(684.8671984825601, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Log log0 = new Log();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(624.6217, 20097, 20097);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(20097, (UnivariateRealFunction) log0, 0.0, (double) 20097, 624.6217, allowedSolution0);
      assertEquals(624.6217, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Inverse inverse0 = new Inverse();
      double double0 = pegasusSolver0.solve(2939, (UnivariateRealFunction) inverse0, (-3460.481843866942), (double) 2939, (-3460.481843866942));
      assertEquals((-3460.481843866942), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.290416805300292E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(450);
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(750, (UnivariateRealFunction) sinc0, (-1.7976931348623157E308), (double) 450, 1.0E-6, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (750) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(9.91630083E-5, 9.91630083E-5);
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1303, (UnivariateRealFunction) log0, 9.91630083E-5, 1.0000000000000009, 1.0000000000000009, allowedSolution0);
      assertEquals(1.0000000000000009, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4454.68));
      Exp exp0 = new Exp();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(12, (UnivariateRealFunction) exp0, 0.0, (-746.7423950658351), allowedSolution0);
      assertEquals((-373.37119753291756), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-746.7423950658351), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, 1.0, 1.0);
      Log log0 = new Log();
      double double0 = regulaFalsiSolver0.solve(20107, (UnivariateRealFunction) log0, 1.0, (double) 20107, (double) 20107);
      assertEquals(20107.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2082.05568), 750, 97.363692);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-2625.1), 684.8671984825751, allowedSolution0);
      assertEquals(684.8671984825751, pegasusSolver0.getMax(), 0.01);
      assertEquals(684.8671984825751, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792));
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, 93.302889889, (double) 750, 93.302889889);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(93.302889889, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(684.8671984825751, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(254, (UnivariateRealFunction) tan0, (-2627.46287), 0.9999008369917188, 9.916300828431721E-5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (254) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }
}

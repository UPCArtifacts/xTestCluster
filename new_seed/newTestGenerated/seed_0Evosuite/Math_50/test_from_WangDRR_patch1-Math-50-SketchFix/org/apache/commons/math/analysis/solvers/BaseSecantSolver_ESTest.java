/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:33:00 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Gaussian gaussian0 = new Gaussian((-1702.583055726637), 9.0);
      assertNotNull(gaussian0);
      
      double double0 = pegasusSolver0.solve(143, (UnivariateRealFunction) gaussian0, (-1729.0), 1.0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-864.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1729.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2102, (UnivariateRealFunction) tan0, 0.0, 1802.92568588, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getMax(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(901.46284294, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Gaussian gaussian0 = new Gaussian((-1702.583055726637), 9.0);
      assertNotNull(gaussian0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(143, (UnivariateRealFunction) gaussian0, 0.0, 875.0, 2.242E-320, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(2.242E-320, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(875.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double0 = pegasusSolver0.solve(2986, (UnivariateRealFunction) tan0, 4.3281656141047484E-173, 1802.92568588, 1.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4.3281656141047484E-173, pegasusSolver0.getMin(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(4.3281656141047484E-173, pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(107727595, (UnivariateRealFunction) inverse0, (-1146.84388058834), (double) 2986, (-2237.3), allowedSolution0);
      assertEquals(1783.027855079441, double0, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2986.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1146.84388058834), pegasusSolver0.getMin(), 0.01);
      assertEquals((-2237.3), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(1783.027855079441, double1, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2986.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1146.84388058834), pegasusSolver0.getMin(), 0.01);
      assertEquals((-2237.3), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(1087, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 270.38298483, (-1702.583055726637));
      assertEquals((-3.6973056190304065E305), double0, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-3.6973056190304065E305), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(270.38298483, pegasusSolver0.getMax(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals((-3.6973056190304065E305), double1, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-3.6973056190304065E305), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1702.583055726637), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(270.38298483, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4.4696732668841904E-4));
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-4.4696732668841904E-4), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(36837739, (UnivariateRealFunction) inverse0, (-973.271), 4.000869544681906E-4, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1, (UnivariateRealFunction) inverse0, (double) 1, (double) 1, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2145272657, (UnivariateRealFunction) inverse0, (-1.0), (-1.0), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-1, -1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(15, (UnivariateRealFunction) null, 3.85E-322, (double) 15, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      
      Cosh cosh0 = new Cosh();
      assertNotNull(cosh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-2992), (UnivariateRealFunction) cosh0, (double) (-2992), (double) (-2992), 1.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,992) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588, 1802.92568588, 1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, 1.3245471311735498E-8, (-1198.029884), 1.0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, -1,198.03]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateRealFunction) null, (double) 0, (double) 0, (double) 0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(728, (UnivariateRealFunction) inverse0, (-2354.97552645332), 8.256E-321, 3.2896926671213045E305);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (728) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(200, (UnivariateRealFunction) cos0, (double) 200, (-533.41729), (double) 200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [200, -533.417]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(5.650007086920087E-9);
      assertNotNull(pegasusSolver0);
      assertEquals(5.650007086920087E-9, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2954, (UnivariateRealFunction) inverse0, 1404.61231220616, 1.0030393912688718E305, 1.0030393912688718E305);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [1,404.612, 100,303,939,126,887,180,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000], values: [0.001, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.21E-321, 0.5, 0.0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.21E-321, illinoisSolver0.getRelativeAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      
      Floor floor0 = new Floor();
      assertNotNull(floor0);
      
      regulaFalsiSolver0.setup(4, floor0, 4, 4, 4);
      assertEquals(4.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(4.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [4, 4]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      Abs abs0 = new Abs();
      assertNotNull(abs0);
      
      regulaFalsiSolver0.setup(26, abs0, (-1.0), 26, 1077.0643);
      assertEquals(1077.0643, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(26.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-1, 26], values: [1, 26]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1224096.28);
      assertNotNull(illinoisSolver0);
      assertEquals(1224096.28, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(36837739, (UnivariateRealFunction) log1p0, (-4.4696732668841904E-4), 1224096.28, allowedSolution0);
      assertEquals(39.038435687776655, double0, 0.01);
      assertEquals(612048.1397765164, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1224096.28, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4.4696732668841904E-4), illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1224096.28, illinoisSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1224096.2781381037, 1224096.2781381037, 1224096.2781381037);
      assertNotNull(illinoisSolver0);
      assertEquals(1224096.2781381037, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(36837739, (UnivariateRealFunction) log1p0, (-4.4696732668841904E-4), 1224096.2781381037, allowedSolution0);
      assertEquals((-4.4696732668841904E-4), double0, 0.01);
      assertEquals(612048.1388455682, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getMax(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-4.4696732668841904E-4), illinoisSolver0.getMin(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-18.93438885607), 1.0E-6, 2.242E-320, allowedSolution0);
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-18.93438885607), pegasusSolver0.getMin(), 0.01);
      assertEquals(2.242E-320, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1404868, (UnivariateRealFunction) log1p0, (-4.4696732668841904E-4), 1224104.516259793, allowedSolution0);
      assertEquals((-4.804253017808348E-11), double0, 0.01);
      assertEquals(612052.2579064128, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4.4696732668841904E-4), illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1224104.516259793, illinoisSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(42, (UnivariateRealFunction) inverse0, (-0.16624882440418567), (double) 2986, (-2237.3));
      assertEquals(1754.1525366727428, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2986.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1802.92568588, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2237.3), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-0.16624882440418567), pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1224096.2781381037, 1224096.2781381037, 1224096.2781381037);
      assertNotNull(illinoisSolver0);
      assertEquals(1224096.2781381037, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      
      Log1p log1p0 = new Log1p();
      assertNotNull(log1p0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(36837739, (UnivariateRealFunction) log1p0, (-4.4696732668841904E-4), 1224096.2781381037, allowedSolution0);
      assertEquals(39.03843563259579, double0, 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getMax(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4.4696732668841904E-4), illinoisSolver0.getMin(), 0.01);
      assertEquals(1224096.2781381037, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(612048.1388455682, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(5.650007086920087E-9);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 1.0, 1404.61231220616, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,942) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588, 1802.92568588, 1802.92568588);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1087, (UnivariateRealFunction) inverse0, (-3662.67376), 267.3355833, (-2.704672275001825E-306), allowedSolution0);
      assertEquals((-2.704672275001825E-306), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-3395.3381767), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(845.8559306, (-18.93438885607));
      double double0 = illinoisSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-3.6973056190304065E305), 0.041666666666666664, allowedSolution0);
      assertEquals((-1.8486528095152032E305), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.041666666666666664, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1802.92568588, 1802.92568588, 1802.92568588);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-4.4696732668841904E-4), (double) 2942, 2.242E-320, allowedSolution0);
      assertEquals(2.242E-320, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.4696732668841904E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(200, (UnivariateRealFunction) cos0, 0.07490822288864472, 9.546632771911055E305, 9.546632771911055E305, allowedSolution0);
      assertEquals(9.546632771911055E305, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(5.315813082467128E305, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1224096.2781381037, 1224096.2781381037, 1224096.2781381037);
      Log1p log1p0 = new Log1p();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(36837722, (UnivariateRealFunction) log1p0, (-4.4696732668841904E-4), 1224096.2781381037, allowedSolution0);
      assertEquals(612048.1388455682, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(39.03843563259579, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2147481500, univariateRealFunction0, (double) 2147481500, (double) 2147481500, allowedSolution0);
      assertEquals(2.1474815E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2.1474815E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinh sinh0 = new Sinh();
      // Undeclared exception!
      illinoisSolver0.solve(Integer.MAX_VALUE, (UnivariateRealFunction) sinh0, (-3569.142768679145), 0.09784053127172596, (double) Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2782.6344227887585, (-2291.836884392894));
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) signum0, (-409.0), 1.0, (-2291.836884392894), allowedSolution0);
      assertEquals((-2291.836884392894), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-204.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1224096.2781381037, 1224096.2781381037, 1224096.2781381037);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1207, (UnivariateRealFunction) ceil0, (-2076.630384008), (double) 36837739, allowedSolution0);
      assertEquals(3.6837739E7, illinoisSolver0.getMax(), 0.01);
      assertEquals((-0.6303484812378883), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2.704672275001825E-306));
      Log1p log1p0 = new Log1p();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(36837722, (UnivariateRealFunction) log1p0, (-4.4696732668841904E-4), 1224096.2781381037, allowedSolution0);
  }
}

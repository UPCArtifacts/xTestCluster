/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 18:15:58 GMT 2022
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-2336.67), 1.2467819908219703E308, (-112.915324472));
      assertEquals((-112.915324472), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.2467819908219703E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-956.6471), (-956.6471), 6.391977488296567E-307);
      Sigmoid sigmoid0 = new Sigmoid();
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) sigmoid0, (-4.9E-324), (-2082.4736), (-280.2961728819));
      assertEquals((-4.9E-324), pegasusSolver0.getMin(), 0.01);
      assertEquals((-2082.4736), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Logit logit0 = new Logit(1384, 1384);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(1384, univariateRealFunction0, 0.0, 0.008333333333329196, allowedSolution0);
      assertEquals(0.008333333333329196, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2474, (UnivariateRealFunction) identity0, (-4274.003792), 0.0, (-265.3846641072813), allowedSolution0);
      assertEquals((-265.3846641072813), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, 4.396605282730955, 1.34217729E8, (-4274.003792), allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals((-4274.003792), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.3421772886856562E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-826.65310563), (-4274.003792));
      regulaFalsiSolver0.solve(765, (UnivariateRealFunction) sinc0, (-4274.003792), 362.8163682368081, (-4274.003792), allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-4274.003792), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3996.1058553662174), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(824.0247536509215);
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      illinoisSolver0.solve(12867, (UnivariateRealFunction) log0, (double) 0, 955.34523912, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-4274.003792), (-4274.003792));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, (-3211.3438615454097), 1.3421772886856562E8, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (750) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Expm1 expm1_0 = new Expm1();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.0011993470678546428), 1148.371515657, (-0.6321205588285577));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2942, (UnivariateRealFunction) expm1_0, 563.8821, (-1.0), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [563.882, -1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1363.84);
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1425, (UnivariateRealFunction) sinh0, (double) 1425, 3830.9649557256, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [1,425, 3,830.965], values: [\u221E, \u221E]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Logit logit0 = new Logit((-1.0556479351408385E-16), 2942);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2942, univariateRealFunction0, (-1.0), (-1.0556479351408385E-16), 330.5111, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,942) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.8230325401638382E-17), (-1.0));
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(750, (UnivariateRealFunction) sinc0, (-4274.003792), 330.51110621, 2157.1920382342, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (750) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(131, (UnivariateRealFunction) tanh0, (double) 131, (double) 131, (double) 131, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [131, 131]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.5574460331607005, 1536.255336231);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1470, (UnivariateRealFunction) sinc0, (-4266.282822956567), (double) 1470, (-4.730122100215574E-27), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-4,266.283, 1,470], values: [-0, -0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1702.583055726637));
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-1702.583055726637), 2.242E-320, (double) 2942);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,942) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(265, (UnivariateRealFunction) sinc0, 4.396605282730955, (-1181.25061272), (-2795.60136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [4.397, -1,181.251]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Inverse inverse0 = new Inverse();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2412, (UnivariateRealFunction) inverse0, 1.986821492305628E-8, (double) 2412, (double) 2412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 2,412], values: [50,331,648.005, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      illinoisSolver0.setup(750, sinc0, (-4274.003792), 3300.0, (-3330.6876680386));
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-4,274.004, 3,300], values: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(7.977403276, 418.3587901677);
      Logit logit0 = new Logit((-1335.812), 7.569688456932513E-306);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(5, univariateRealFunction0, (-1.0), 1.0E-6, 0.0, allowedSolution0);
      assertEquals((-0.9999989992508308), double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(742);
      double double0 = regulaFalsiSolver0.solve(742, (UnivariateRealFunction) sinc0, (-4272.937601371428), 330.51110621, 2157.1920382342, allowedSolution0);
      assertEquals(2157.1920382342, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3578.754025587417), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2942);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(395, (UnivariateRealFunction) inverse0, (-5.345948259334619E-14), 0.5, (-49.5221607562662), allowedSolution0);
      assertEquals((-49.5221607562662), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.49999999999994654, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-49.5221607562662), (double) 2942, (double) 2942, allowedSolution0);
      assertEquals(2942.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-0.10166759289586702), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1390914626, (UnivariateRealFunction) sinc0, (-2259.196039357201), (double) 1390914626, allowedSolution0);
      assertEquals(1.390914626E9, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.3908998218935797E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Logit logit0 = new Logit((-1.0556479351408385E-16), 2942);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2419.042815, (-1.0), 0.5);
      double double0 = illinoisSolver0.solve(2942, univariateRealFunction0, (-1.0), 2419.042815, allowedSolution0);
      assertEquals(1209.0214075, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) sinc0, (-3.315205411927383E-4), 42.2651263032289, 2.1755053098258812E-8, allowedSolution0);
      assertEquals(2.1755053098258812E-8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(40.840704496667314, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-4274.173325137037), 42.2651263032289, (-4274.173325137037), allowedSolution0);
      assertEquals((-4228.583711731867), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-4684.4), (-145.3463822386), allowedSolution0);
      assertEquals((-145.3463822386), pegasusSolver0.getMax(), 0.01);
      assertEquals((-4684.114646111175), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-4274.003792), 42.3472009668, (-4274.003792), allowedSolution0);
      assertEquals((-4274.003792), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4266.282822956567), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(5, (UnivariateRealFunction) expm1_0, (-1050.5236829), (double) 5, (-2.7744144393153737E-19));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Inverse inverse0 = new Inverse();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double double0 = pegasusSolver0.solve(2942, (UnivariateRealFunction) inverse0, (-3392.798225), 6.344780561308204E-307, (-2512.3947831707032));
      assertEquals((-2512.3947831707032), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(2147469429, (UnivariateRealFunction) asinh0, (double) 2147469429, 0.0, (double) 2147469429);
      assertEquals(2.147469429E9, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian();
      double double0 = regulaFalsiSolver0.solve(174, (UnivariateRealFunction) gaussian0, (-505.63899155), (double) 174, (double) 174);
      assertEquals((-505.63899155), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-505.63899155), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(750, (UnivariateRealFunction) sinc0, (-4684.4), (-145.3463822386), allowedSolution0);
      assertEquals((-145.3463822386), pegasusSolver0.getMax(), 0.01);
      assertEquals((-4684.114646502382), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(248, (UnivariateRealFunction) tan0, (-999999.9992327488), (-808.5), 2.931621501970159E-17);
      assertEquals(2.931621501970159E-17, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-955664.6312400735), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Power power0 = new Power(750);
      pegasusSolver0.setup(1128, power0, 460.0, (-222.82022), 1065.022);
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [460, -222.82]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }
}

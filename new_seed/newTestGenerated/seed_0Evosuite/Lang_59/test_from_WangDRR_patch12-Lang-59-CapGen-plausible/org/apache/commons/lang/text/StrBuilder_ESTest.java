/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 11:06:25 GMT 2022
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(116);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(7, charArray0.length);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(7, charArray0.length);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(7, int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("end < start");
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;dQCR+6");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("end < start");
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("end < start");
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1584, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("gRRVSk6}!BawjCU");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("DqCAH_ ", 0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('H', 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((float) 0);
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("length must be valid", "length must be valid");
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(52, strBuilder2.capacity());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(5, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("line.separator", 669);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(5, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must{be valid");
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.size());
      assertEquals(88, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("r");
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.size());
      assertEquals(88, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-1), 273);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(0, 0);
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('#');
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.rightString(1);
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString((-3691));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(1949);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.leftString(4);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("1949", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.region");
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString((-1571));
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "iT{Q0[asP_}", 782, 'L');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(782, strBuilder0.length());
      assertEquals(782, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(782, strBuilder0.size());
      assertEquals(782, strBuilder1.size());
      assertEquals(782, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(782, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith("iT{Q0[asP_}");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(782, strBuilder0.length());
      assertEquals(782, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(782, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("s=LLpkb 12k");
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('\u001C');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(57, strBuilder1.length());
      assertEquals(57, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(88, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(56, strBuilder2.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(52, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(' ');
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(52, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder1.trim();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(52, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(52, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("5=MZ['7 DI%");
      assertEquals("5=MZ['7 DI%", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("5=MZ['7 DI%", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.size());
      assertEquals(52, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst("5=MZ['7 DI%", "5=MZ['7 DI%");
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("5=MZ['7 DI%", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(31, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.size());
      assertEquals(52, strBuilder1.capacity());
      assertEquals(52, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(31, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(31, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(50, strBuilder0.length());
      assertEquals(50, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(50, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("S", (String) null);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(49, strBuilder0.length());
      assertEquals(49, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(49, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertEquals(49, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(49, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('+', 'h');
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '9';
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000'}, charArray0);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(3, charArray0.length);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('9');
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(27, 27, '-');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 0, 'C');
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(44, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, '`');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '9';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000'}, charArray0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertNotNull(strTokenizer0);
      assertEquals(3, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 3
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("end < start");
      assertEquals(11, stringBuffer0.length());
      assertEquals("end < start", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(11, stringBuffer0.length());
      assertEquals("end < start", stringBuffer0.toString());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("4.1");
      assertEquals("4.1", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1, (-4134));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = strBuilder1.getChars(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("jF\"");
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'O');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-969));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.size());
      assertEquals(50, strBuilder0.length());
      assertEquals(50, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.size());
      assertEquals(50, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 57;
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder0.length());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(57, strBuilder0.length());
      assertEquals(50, strBuilder1.capacity());
      assertEquals(57, strBuilder1.size());
      assertEquals(57, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertEquals(57, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(57, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("StrTokenizer");
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, 3, 3);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(4, 4, '9');
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder0.validateIndex(4);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[8];
      strBuilder0.getChars(0, 0, charArray0, 4);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("*ANk");
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer");
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean0 = strBuilder_StrBuilderReader0.ready();
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      char[] charArray0 = new char[4];
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.validateRange(0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(82, 813, '8');
      assertEquals(813, strBuilder0.size());
      assertEquals(813, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(813, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(813, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(813, strBuilder1.length());
      assertEquals(813, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder1.validateRange(813, 813);
      assertEquals(813, strBuilder0.size());
      assertEquals(813, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(813, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(813, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(813, strBuilder1.length());
      assertEquals(813, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(813, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", stringBuffer0.toString());
      assertEquals(56, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder0.toString();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (long) 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.substring(0, 1916);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0, 0);
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(4, charArray0.length);
      
      String string0 = strBuilder0.substring(0);
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.substring(0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertEquals(24, strBuilder0.size());
      assertEquals(24, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-1644);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals((-1644), strBuilder0.length());
      assertEquals((-1644), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertEquals((-1644), strBuilder0.length());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", strBuilder0.getNullText());
      assertEquals((-1644), strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1644), strBuilder1.length());
      assertEquals("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals((-1644), strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-1644);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1644), strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1644), strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1644), strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1644), strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(39, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1644), strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1644), strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "(zR,Vhj&");
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      assertEquals(24, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(56, strBuilder1.capacity());
      assertEquals(24, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll(strMatcher0, "(pe[8})NMnFL");
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll("=ll-ULfSm", "java.awt.printerjob");
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll('i', 'F');
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replace(strMatcher0, "", 0, 108, 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(5);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.length();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("f57$F~5]");
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("f57$F~5]");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("pf$%HIPCLm!0T_&O");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('\u0015');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('\u0015');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('\u001C');
      assertEquals(57, strBuilder0.size());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(88, strBuilder1.capacity());
      assertEquals(57, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(57, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf('\u001C');
      assertEquals(57, strBuilder0.size());
      assertEquals(57, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(273.74F);
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertEquals(46, strBuilder0.capacity());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(40, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(40, strBuilder2.size());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.insert(31, (Object) strBuilder0);
      assertEquals(90, strBuilder0.capacity());
      assertEquals(90, strBuilder0.length());
      assertEquals(90, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(90, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(90, strBuilder3.size());
      assertEquals(90, strBuilder3.capacity());
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotNull(strBuilder3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, 4);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (-3544.891F));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (double) 0);
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder1.size());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('v');
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("\"QldZ");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("user.country");
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pf$%HIPCLm!0T_&O");
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("pf$%HIPCLm!0T_&O");
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append('#');
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      
      int int0 = strBuilder0.indexOf('#', 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 649, '=');
      assertEquals(649, strBuilder0.size());
      assertEquals(649, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(649, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(649, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(649, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(649, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      int int0 = strBuilder1.indexOf('=');
      assertEquals(649, strBuilder0.size());
      assertEquals(649, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(649, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(649, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(649, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(649, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">F0_<>On;Cw");
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('_');
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("Wy/?");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('9');
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-2014);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-2014), strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2014), strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-2014), strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2014), strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals((-2014), strBuilder1.length());
      assertEquals((-2014), strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-623));
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-623);
      assertEquals((-623), strBuilder0.length());
      assertEquals((-623), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('`');
      assertEquals((-623), strBuilder0.length());
      assertEquals((-623), strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-623), strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-623), strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('0');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(7, charArray0.length);
      
      char char0 = strBuilder0.charAt(4);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setCharAt(0, '3');
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char char0 = strBuilder0.charAt(0);
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-2123);
      assertEquals((-2123), strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals((-2123), strBuilder0.size());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-2123), strBuilder1.size());
      assertEquals((-2123), strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("file.separator"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Collection) linkedList0, ";6X");
      assertFalse(linkedList0.contains("file.separator"));
      assertEquals((-2123), strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals((-2123), strBuilder0.size());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-2123), strBuilder1.size());
      assertEquals((-2123), strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals((-2123), strBuilder2.size());
      assertEquals((-2123), strBuilder2.length());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) "", (-1494), 'D');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-2499), (-2499), 'm');
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "5.0", (-2271), ' ');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[0];
      strBuilder1.buffer = charArray0;
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) "5.0", (-602), 'b');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-102));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-102), 0, 'p');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      char[] charArray0 = new char[3];
      StrBuilder strBuilder2 = strBuilder0.append(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.append(stringBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateRange(5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(576);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 576
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-777);
      assertNull(strBuilder0.getNullText());
      assertEquals((-777), strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-777), strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.toStringBuffer();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray((-2641), 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2641
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-2123);
      assertEquals((-2123), strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-2123), strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-2123), strBuilder1.size());
      assertEquals((-2123), strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.toCharArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-1789);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1789), strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1789), strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.setLength(614);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      strBuilder0.buffer = null;
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.rightString(3165);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?eb+)JDqQXe");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      strBuilder0.buffer = charArray0;
      assertEquals(6, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.reverse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-850));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace(strMatcher0, (String) null, (-850), (-850), (-598));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -850
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.replace(1, 1, "DJcwAyEi3=7co");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert((-64), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -64
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-900), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -900
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(4, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('\'');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = 39;
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.size());
      assertEquals(39, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, (-3544.891F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(32, 'r');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = 46;
      assertEquals(32, strBuilder0.capacity());
      assertEquals(46, strBuilder0.size());
      assertEquals(46, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 0, charArray0, (-1414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apacheHcommons.lang.text.StrBuilder$StrBuilderWriter");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.equalsIgnoreCase((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.equals((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      assertNull(strBuilder0.getNullText());
      assertEquals(114, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = (-5091);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(114, strBuilder0.capacity());
      assertEquals((-5091), strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-5091), strBuilder0.size());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher0);
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteAll(strMatcher0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.delete('\u0019', '\u0019');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      strBuilder0.buffer = charArray0;
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<)Yv(_Wtq:");
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      assertEquals(60, strBuilder0.length());
      assertEquals(60, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(60, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight(4225, 24, ';');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, Integer.MAX_VALUE, '#');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be vali");
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      strBuilder0.buffer = charArray0;
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      strBuilder0.size = Integer.MAX_VALUE;
      assertFalse(strBuilder0.isEmpty());
      assertEquals(Integer.MAX_VALUE, strBuilder0.length());
      assertEquals(Integer.MAX_VALUE, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = new StringBuffer("file.separator");
      assertEquals("file.separator", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("V=8+iS-|");
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("DNB6(@p^5>pJ}Z3_t'4");
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals("DNB6(@p^5>pJ}Z3_t'4", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals("DNB6(@p^5>pJ}Z3_t'4", strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      strBuilder1.size = (-4219);
      assertEquals(40, strBuilder0.capacity());
      assertEquals((-4219), strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-4219), strBuilder0.size());
      assertEquals("DNB6(@p^5>pJ}Z3_t'4", strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals("DNB6(@p^5>pJ}Z3_t'4", strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertEquals((-4219), strBuilder1.size());
      assertEquals((-4219), strBuilder1.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((-101L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$StringMatcher");
      assertEquals(53, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(85, strBuilder0.capacity());
      assertEquals(53, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[4];
      strBuilder0.buffer = charArray0;
      assertEquals(53, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(53, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((float) 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (long) 0);
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(21, strBuilder1.size());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(52, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 677);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 116);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, 677);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("m]f&A(");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("m]f&A(", 44);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('S', 342);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('l', 0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (long) 0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('t');
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, (-1));
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertSame(strBuilder0, strBuilder1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('#');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.charMatcher('#');
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, (-1));
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.indexOf(strMatcher0, 20);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) null, Integer.MAX_VALUE);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("I,/[1z_", 0);
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("l>5HlOD08}'wOhXX*3", (-225));
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("t: ", 3);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('l', (-404));
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-416));
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('\"', 4050);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1079, 1079, '\'');
      assertEquals(1079, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1079, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1079, strBuilder0.size());
      assertEquals(1079, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1079, strBuilder1.size());
      assertEquals(1079, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.delete(39, 1079);
      assertEquals(1079, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(39, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1079, strBuilder2.capacity());
      assertEquals(39, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (String) null);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(52, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 5, '#');
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertEquals(56, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(88, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 1, 1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-19), (-19));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -19
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apacheHcommons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(56, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("", 0, 0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("", 0, (-1889));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertNull(strBuilder0.getNullText());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append("?G8A>V~", 0, 95);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(48, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(2, 2, (char[]) null, 1551);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      char char0 = strBuilder0.charAt(0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(88);
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(88, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.length();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.size();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replace((StrMatcher) strMatcher_NoMatcher0, (String) null, 15, 97, 114);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip((-966L));
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2165));
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(2437L);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder1 = strBuilder0.append((-1045.4144F));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      long long0 = strBuilder_StrBuilderReader0.skip(1L);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('#');
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[2];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {'#', '\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, int0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 3195);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 740, 740);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(44, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, 4, (-3093));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-128), (-128));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals("i;5RC'|VR+6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      assertNotNull(strTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(".q`QG-gT>Y/{QXc");
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-2900), 702.3F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2900
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.substring(42, 42);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      strBuilder0.hashCode();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals((Object) "Invalid offset: ");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("Invalid offset: ");
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("U");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("end < start");
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(11, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("k>fW'd%Lw0r,w__p");
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("");
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("end < start");
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Solaris");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Solaris");
      assertNotNull(strMatcher_StringMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_StringMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('\u0015');
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder1.lastIndexOf(strMatcher0);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder0 = new StrBuilder(5);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-4088));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("tfHK", 1551);
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5f<>#Q\"W\"bC!OgRJ");
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("un,`", 0);
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("s", 1304);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.size());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$StringMatcher");
      assertEquals(53, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(53, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(85, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf("", 590);
      assertEquals(53, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(53, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(85, strBuilder0.capacity());
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf((String) null, 1634);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf(")>?YV3#W44Etm", 590);
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('W');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.size());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('c', 342);
      assertEquals(56, strBuilder0.size());
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_TrimMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("", 0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf((String) null, 2727);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("d0iN$w:Wg-NG");
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf("0", (-309));
      assertEquals(12, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = strBuilder0.indexOf('0', (-1558));
      assertEquals(56, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(88, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(56, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append('\u0015');
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      assertNotNull(strMatcher_TrimMatcher0);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("k>fW'd%Lw0r,w__p");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("k>fW'd%Lw0r,w__p");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer");
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('t');
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('?');
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(654);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(654, strBuilder0.size());
      assertEquals(654, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(654, strBuilder0.length());
      assertEquals(654, strBuilder1.capacity());
      assertEquals(654, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(654, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.midString(0, 654);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(654, strBuilder0.size());
      assertEquals(654, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(654, strBuilder0.length());
      assertEquals(654, strBuilder1.capacity());
      assertEquals(654, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(654, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString(2337, 2337);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">F=0_<>On#Cwd");
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.midString((-3182), (-3182));
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(3);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals("t: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(614);
      assertEquals(614, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(614, strBuilder0.length());
      assertEquals(614, strBuilder0.size());
      assertEquals(614, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(614, strBuilder1.size());
      assertEquals(614, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      
      String string0 = strBuilder1.leftString(1);
      assertEquals(614, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(614, strBuilder0.length());
      assertEquals(614, strBuilder0.size());
      assertEquals(614, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(614, strBuilder1.size());
      assertEquals(614, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.leftString(1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("k>fW'd%Lw0r,w__p");
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("java.specification.version");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("D2'`+Zm~YqZ,Kv$");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apacheHcommons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("org.apacheHcommons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(56, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("[*f#'><");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("N$k%=[-");
      assertEquals(11, strBuilder0.size());
      assertEquals(43, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(975);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(975, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(975, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      strBuilder0.deleteAll(strMatcher0);
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("5.a", "i;5RC'|VR+6");
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-335));
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("Invalid offset: ", "Invalid offset: ");
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('X', 'g');
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('R', ' ');
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('.', '.');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('i', 'F');
      assertEquals(46, strBuilder1.capacity());
      assertEquals(14, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll('s', 's');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight((Object) "iT{Q0[asP_}", 782, 'L');
      strBuilder0.replace(40, 860, (String) null);
      assertEquals(782, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, "");
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("'\"");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.deleteFirst("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight((Object) "iT{Q0[asP_}", 782, 'L');
      strBuilder0.deleteFirst('L');
      assertEquals(782, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) '\'', (int) '\'', '\'');
      strBuilder1.deleteAll('\'');
      assertEquals(39, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">F=0_<>On#Cwd");
      strBuilder0.deleteAll('d');
      assertEquals(12, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      strBuilder0.insert(9, true);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, false);
      strBuilder0.midString(0, 4);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1584);
      char[] charArray0 = new char[5];
      strBuilder0.insert(0, charArray0, 0, 1);
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 10
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.append(stringBuffer0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, charArray0, 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 1, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-1681), 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1681
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("f57$F~5]");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("f57$F~5]");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "f57$F~5]");
      strBuilder1.insert(14, (char[]) null);
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("The Array must not be null");
      strBuilder0.insert(4, "The Array must not be null");
      assertEquals(52, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.insert(48, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer0, 5, '#');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 4338, 'Y');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 1628, '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(5, 'M');
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-2499), 'm');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "length must be valid");
      assertEquals(3, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(188, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dweI/&]Q;#G");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "");
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("");
      linkedList0.push("`}");
      StrBuilder strBuilder0 = new StrBuilder("^n8C*sbJ");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      assertEquals(62, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("t+GhxS{3");
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "Invalid offset: ");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[4];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(false);
      strBuilder0.midString(0, 19);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-425));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -425
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 24, 24);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 24
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(975);
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 3178, 3178);
      assertEquals(975, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;dQCR+6");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apacheHcommons.lang.text.StrBuilder$StrBuilderWriter");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 5, (-931));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-3988), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1168);
      StringBuffer stringBuffer0 = new StringBuffer(1168);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1168, 1168);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-27), (-27));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 32, 2);
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("fw-#zOtl#@");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(10, strBuilder1.length());
      assertEquals(42, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      StrBuilder strBuilder2 = strBuilder0.append((-2329.6724F));
      Object[] objectArray0 = new Object[2];
      char[] charArray0 = new char[0];
      strBuilder1.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder2.appendWithSeparators(objectArray0, "org.apache.commons.lang.text.StrMatcher$NoMatcher");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", 5, 5);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", 0, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("", 2913, 2913);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5R;'NVR+\"");
      // Undeclared exception!
      try { 
        strBuilder0.append("i;5R;'NVR+\"", (-107), (-107));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 83, 83);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.setNullText("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.appendNull();
      assertEquals(112, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      strBuilder0.append((Object) strBuilder0);
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      // Undeclared exception!
      try { 
        strBuilder1.replaceAll(strMatcher0, "'`3[c@pUl4+6~6");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("");
      StrBuilder strBuilder2 = strBuilder1.appendNewLine();
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("os.version");
      // Undeclared exception!
      try { 
        strBuilder0.getChars(9, 3, (char[]) null, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 631, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 631
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">F=0_<>On#Cwd");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(13, strBuilder0.size());
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertEquals(45, strBuilder0.capacity());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1586), 15, charArray0, (-1586));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1586
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(4, (-3703), charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3703
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      char[] charArray0 = new char[0];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      char[] charArray0 = strBuilder0.toCharArray(4, 141);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(12, charArray0.length);
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i;5RC'|VR+6");
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">F0_<>On;Cw");
      strBuilder0.deleteCharAt(1);
      strBuilder0.deleteAll(">F0_<>On;Cw");
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-326));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -326
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-969));
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1343, '2');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1343
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-511), '1');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -511
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(48, strBuilder0.capacity());
      assertEquals(107, int0);
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1409));
      // Undeclared exception!
      try { 
        strBuilder0.charAt(2362);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2362
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2208));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2208
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(16, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      strBuilder0.append("");
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      strBuilder1.minimizeCapacity();
      assertEquals(50, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1083));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1083
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      assertEquals(14, strBuilder0.length());
      
      strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("Invalid offset: ", 0, 0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">9'");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray(0, 636);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("org.apache.commons.lang.text.StrBuilder");
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.country");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(5);
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(1893);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-850));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      strBuilder0.insert(0, '}');
      assertEquals(15, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append('\u0015');
      assertEquals(1, strBuilder0.size());
      
      strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.separator");
      int int0 = strBuilder0.lastIndexOf("file.separator");
      assertEquals(14, strBuilder0.size());
      assertEquals(0, int0);
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(59, (-697.4886154284472));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 59
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(9);
      // Undeclared exception!
      try { 
        strBuilder0.insert(57, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 57
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">F0_<>On;Cw");
      // Undeclared exception!
      try { 
        strBuilder0.insert(103, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 103
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.getNullText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asTokenizer();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      strBuilder0.asReader();
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("V=8+iS-|");
      strBuilder0.append((-101L));
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf("Irix");
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1821);
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertEquals(1821, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("k>fW'd%Lw0r,w__p");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("k>fW'd%Lw0r,w__p");
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.toString();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-860));
      // Undeclared exception!
      try { 
        strBuilder0.substring((-860));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -860
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      strBuilder0.asWriter();
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('=');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.setNewLineText("java.vm.vendor");
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertEquals(16, strBuilder0.length());
      
      strBuilder0.trim();
      assertEquals(15, strBuilder0.length());
  }
}

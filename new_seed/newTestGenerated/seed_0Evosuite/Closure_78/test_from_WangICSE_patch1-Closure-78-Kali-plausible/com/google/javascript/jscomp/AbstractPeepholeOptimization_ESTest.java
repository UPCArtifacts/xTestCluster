/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:18:29 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.CheckGlobalThis;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConvertToDottedProperties;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPeepholeOptimization_ESTest extends AbstractPeepholeOptimization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.AbstractPeepholeOptimization", "X:16L'$L");
      Node node1 = new Node(4095, node0, node0, 48, 27);
      node0.addChildAfter(node1, node1);
      // Undeclared exception!
      AbstractPeepholeOptimization.validateResult(node1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.AbstractPeepholeOptimization", "X:16L'$L");
      Node node1 = new Node(4095, node0, node0, 48, 27);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      exploitAssigns0.reportCodeChange();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Denormalize denormalize0 = new Denormalize(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.beginTraversal(nodeTraversal0);
      Node node0 = Node.newString("x");
      peepholeRemoveDeadCode0.error(nodeTraversal0.NODE_TRAVERSAL_ERROR, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("X:16L'$L");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("X:16L'$L", "y(0>*k\"I`");
      node0.setWasEmptyNode(true);
      node0.setIsSyntheticBlock(true);
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertTrue(node1.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newString(" }");
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DefaultPassConfig$76", "");
      Node node2 = new Node(42, node0, node1, 2, 18);
      node1.addChildAfter(node2, node1);
      Node node3 = AbstractPeepholeOptimization.validateResult(node2);
      assertEquals(2, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("X:16L'$L", "");
      Node node1 = AbstractPeepholeOptimization.validateResult(node0);
      assertEquals(24, Node.LASTUSE_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[6];
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, peepholeOptimizationsPass0, (ScopeCreator) null);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      boolean boolean0 = exploitAssigns0.isASTNormalized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties((AbstractCompiler) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, convertToDottedProperties0, syntacticScopeCreator0);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      // Undeclared exception!
      try { 
        exploitAssigns0.reportCodeChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      DiagnosticType diagnosticType0 = TypeCheck.BAD_DELETE;
      // Undeclared exception!
      try { 
        exploitAssigns0.error(diagnosticType0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Denormalize denormalize0 = new Denormalize(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.beginTraversal(nodeTraversal0);
      Node node0 = Node.newString("SETPROP");
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.areNodesEqualForInlining(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.AbstractPeepholeOptimization", "X:16L'$L");
      node0.addChildAfter(node0, node0);
      // Undeclared exception!
      AbstractPeepholeOptimization.validateResult(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("X:16L'$L", "");
      Node node1 = new Node(0, node0, node0, node0, node0, 12, 46);
      node0.addChildAfter(node1, node1);
      Node node2 = AbstractPeepholeOptimization.validateResult(node1);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = AbstractPeepholeOptimization.validateResult((Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
      exploitAssigns0.beginTraversal(nodeTraversal0);
      Node node0 = new Node((-55), 1066, (-55));
      boolean boolean0 = exploitAssigns0.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((-55), 1066, (-55));
      // Undeclared exception!
      try { 
        exploitAssigns0.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler((PrintStream) null);
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, (ScopeCreator) null);
      exploitAssigns0.endTraversal(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatementFusion statementFusion0 = new StatementFusion();
      // Undeclared exception!
      try { 
        statementFusion0.areNodesEqualForInlining((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.reportCodeChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.isASTNormalized();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.MISSING_PROVIDE_ERROR;
      Node node0 = Node.newString((-1591), "JSC_MISSING_PROVIDE_ERROR");
      // Undeclared exception!
      try { 
        exploitAssigns0.error(diagnosticType0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1591
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}

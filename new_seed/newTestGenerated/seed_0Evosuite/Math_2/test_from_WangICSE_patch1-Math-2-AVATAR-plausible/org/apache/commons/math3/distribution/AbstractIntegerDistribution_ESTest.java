/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 19:47:36 GMT 2022
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(270, 171, 3391);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3391, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.solveInverseCumulativeProbability(0.0, (-6), 0);
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals((-5), int0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 38);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(38.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(38, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(38.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(38, hypergeometricDistribution0.getSampleSize());
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 10000000, 0, 10000000);
      assertEquals(10000000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(10000000, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-543675233), 1877);
      assertEquals(10000000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(10000000, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      assertNotNull(randomAdaptor0);
      
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(randomAdaptor0, 1145.565559739273, 1145.565559739273, 4306);
      assertEquals(1145.565559739273, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1145.565559739273, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1145.565559739273, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.sample(4306);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.random.RandomAdaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2145115654, 677, 883);
      assertEquals(883, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.7867541728358484E-4, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2145115654, hypergeometricDistribution0.getPopulationSize());
      assertEquals(677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(891913097);
      assertEquals(8.91913097E8, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(8.91913097E8, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(8.91913097E8, poissonDistribution0.getMean(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(0.4329352926383119);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-3668), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(270.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(270, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(270, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(270, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(15, 15, 15);
      assertEquals(15, hypergeometricDistribution0.getPopulationSize());
      assertEquals(15, hypergeometricDistribution0.getSampleSize());
      assertEquals(15.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(15, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-845815374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-845,815,374)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(571194701, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(571194701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.7507165214405588E-9, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(571194701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.7507165214405588E-9, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.005635072173);
      assertEquals(0.005635072173, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.005635072173, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.005635072173, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(0.005635072173, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.005635072173, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.005635072173, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, 5.5257514455273825E-8);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(Double.NaN, poissonDistribution0.getMean(), 0.01);
      assertEquals(Double.NaN, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Double.NaN, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution((double) 269, (double) 269);
      assertEquals(269.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(269.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(269.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(269.0, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(269.0, poissonDistribution0.getMean(), 0.01);
      assertEquals(269.0, poissonDistribution0.getNumericalVariance(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.2896352208370958, 0.2896352208370958);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.2896352208370958, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.2896352208370958, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.2896352208370958, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(0.2896352208370958, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.2896352208370958, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0.2896352208370958, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1092.97851811);
      assertEquals(1092.97851811, poissonDistribution0.getMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1092.97851811, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(1092.97851811, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertNotNull(poissonDistribution0);
      
      try { 
        poissonDistribution0.inverseCumulativeProbability(1092.97851811);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,092.979 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.09752617770565408);
      assertEquals(0.09752617770565408, poissonDistribution0.getMean(), 0.01);
      assertEquals(0.09752617770565408, poissonDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(0.09752617770565408, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertNotNull(poissonDistribution0);
      
      try { 
        poissonDistribution0.inverseCumulativeProbability((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(269, 269, 269);
      assertEquals(269, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(269.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(269, hypergeometricDistribution0.getSampleSize());
      assertEquals(269, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      try { 
        hypergeometricDistribution0.cumulativeProbability(269, (-4155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (269) must be less than or equal to upper endpoint (-4,155)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(258, 258, 258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(258.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(258, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(258, 258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(258.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(258, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1224, 1224, 1224);
      int[] intArray0 = hypergeometricDistribution0.sample(5530);
      assertEquals(5530, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(15, 15, 15);
      hypergeometricDistribution0.reseedRandomGenerator(15);
      assertEquals(15.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }
}

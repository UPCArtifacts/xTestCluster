/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 19:34:35 GMT 2022
 */

package org.apache.commons.math3.ml.clustering;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;
import org.apache.commons.math3.ml.distance.ChebyshevDistance;
import org.apache.commons.math3.ml.distance.EuclideanDistance;
import org.apache.commons.math3.ml.distance.ManhattanDistance;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuzzyKMeansClusterer_ESTest extends FuzzyKMeansClusterer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      linkedList0.add(doublePoint0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(2, 4.0, 2, euclideanDistance0, 1780.302437, well44497a0);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.cluster(linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DoublePoint doublePoint0 = new DoublePoint(doubleArray0);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      linkedList0.add(doublePoint0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1034.4421690796505, 0, euclideanDistance0, (-6.1837904549178745E-9), well44497a0);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.cluster(linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      intArray0[1] = 2146212563;
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      double[] doubleArray0 = new double[5];
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1026.8253312594306, 1, euclideanDistance0, 1026.8253312594306, well44497a0);
      fuzzyKMeansClusterer0.cluster(linkedList0);
      double double0 = fuzzyKMeansClusterer0.getObjectiveFunctionValue();
      assertEquals(1026.8253312594306, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(2.3031141827895145E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 5006.90801943163);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      fuzzyKMeansClusterer0.cluster(linkedList0);
      double double0 = fuzzyKMeansClusterer0.getObjectiveFunctionValue();
      assertEquals(0.001, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals((-1), fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals(5006.90801943163, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(5742, 2997.6, 0, manhattanDistance0);
      int int0 = fuzzyKMeansClusterer0.getMaxIterations();
      assertEquals(0.001, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(2997.6, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-208), 461.93);
      int int0 = fuzzyKMeansClusterer0.getMaxIterations();
      assertEquals((-1), int0);
      assertEquals(0.001, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(461.93, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 1491.0);
      int int0 = fuzzyKMeansClusterer0.getK();
      assertEquals((-1), fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals(1491.0, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(0.001, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-5), 2550.7132);
      int int0 = fuzzyKMeansClusterer0.getK();
      assertEquals(0.001, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(2550.7132, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals((-1), fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Well19937a well19937a0 = new Well19937a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-1640531527), 2286, (-1570), chebyshevDistance0, (-1640531527), well19937a0);
      double double0 = fuzzyKMeansClusterer0.getEpsilon();
      assertEquals((-1570), fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals(2286.0, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals((-1.640531527E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 5006.90801943163);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      fuzzyKMeansClusterer0.cluster(linkedList0);
      fuzzyKMeansClusterer0.getClusters();
      assertEquals(0.001, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(5006.90801943163, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals((-1), fuzzyKMeansClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      double[] doubleArray0 = new double[5];
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1027.485679765558, 1, euclideanDistance0, 1027.485679765558, well44497a0);
      assertEquals(1, fuzzyKMeansClusterer0.getK());
      
      fuzzyKMeansClusterer0.cluster(linkedList0);
      fuzzyKMeansClusterer0.getClusters();
      assertEquals(1, fuzzyKMeansClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 5006.90801943163);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      fuzzyKMeansClusterer0.cluster(linkedList0);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.getMembershipMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      linkedList0.add((DoublePoint) null);
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1.5518584251403809);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.cluster(linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      double[] doubleArray0 = new double[5];
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a(4);
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 4, (-1156), euclideanDistance0, (-1156), well44497a0);
      // Undeclared exception!
      fuzzyKMeansClusterer0.cluster(linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(3, 3);
      try { 
        fuzzyKMeansClusterer0.cluster((Collection<DoublePoint>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      linkedList0.add((DoublePoint) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1.8921151161193848, 1, euclideanDistance0, 1.8921151161193848, well44497a0);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.cluster(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-2123369520), 853.7);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.cluster(linkedList0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = null;
      try {
        fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1, 1, euclideanDistance0, 1, well44497a0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 is smaller than, or equal to, the minimum (1)
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = null;
      try {
        fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-1308), (-1308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,308 is smaller than, or equal to, the minimum (1)
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      double[] doubleArray0 = new double[5];
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 4, 4, euclideanDistance0, (-2778.56673785206), well44497a0);
      assertEquals(1, fuzzyKMeansClusterer0.getK());
      
      fuzzyKMeansClusterer0.cluster(linkedList0);
      assertEquals(4.0, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(4, fuzzyKMeansClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, chebyshevDistance0, (-479.1554), iSAACRandom0);
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      try { 
        fuzzyKMeansClusterer0.cluster(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (2,147,483,647)
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      double[] doubleArray0 = new double[5];
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1026.8253312594306, 1, euclideanDistance0, 1026.8253312594306, well44497a0);
      fuzzyKMeansClusterer0.cluster(linkedList0);
      double double0 = fuzzyKMeansClusterer0.getObjectiveFunctionValue();
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>((-208), 461.93);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.getObjectiveFunctionValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 1491.0);
      // Undeclared exception!
      try { 
        fuzzyKMeansClusterer0.getMembershipMatrix();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<DoublePoint> linkedList0 = new LinkedList<DoublePoint>();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      DoublePoint doublePoint0 = new DoublePoint(intArray0);
      linkedList0.add(doublePoint0);
      double[] doubleArray0 = new double[5];
      DoublePoint doublePoint1 = new DoublePoint(doubleArray0);
      linkedList0.add(doublePoint1);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1026.8253312594306, 1, euclideanDistance0, 1026.8253312594306, well44497a0);
      assertEquals(1, fuzzyKMeansClusterer0.getK());
      
      fuzzyKMeansClusterer0.cluster(linkedList0);
      RealMatrix realMatrix0 = fuzzyKMeansClusterer0.getMembershipMatrix();
      assertEquals(1, fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals(1026.8253312594306, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(2, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1027.485679765558, 1, euclideanDistance0, 1027.485679765558, well44497a0);
      fuzzyKMeansClusterer0.getClusters();
      assertEquals(1, fuzzyKMeansClusterer0.getK());
      assertEquals(1027.485679765558, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(1027.485679765558, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(1, fuzzyKMeansClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 5006.90801943163);
      double double0 = fuzzyKMeansClusterer0.getEpsilon();
      assertEquals(0, fuzzyKMeansClusterer0.getK());
      assertEquals(5006.90801943163, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(0.001, double0, 0.01);
      assertEquals((-1), fuzzyKMeansClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a(422);
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 422, 156, euclideanDistance0, (-2494.719404), well44497a0);
      fuzzyKMeansClusterer0.getDataPoints();
      assertEquals((-2494.719404), fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(1, fuzzyKMeansClusterer0.getK());
      assertEquals(422.0, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(156, fuzzyKMeansClusterer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      Well44497b well44497b0 = new Well44497b((long) 2655);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(2655, 2655, 2655, manhattanDistance0, (-3903.0), randomAdaptor0);
      int int0 = fuzzyKMeansClusterer0.getK();
      assertEquals(2655, fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals((-3903.0), fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(2655.0, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(2655, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      Well19937c well19937c0 = new Well19937c(4503599627370495L);
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1491, 1491, 1032, manhattanDistance0, 1491, well19937c0);
      int int0 = fuzzyKMeansClusterer0.getMaxIterations();
      assertEquals(1491, fuzzyKMeansClusterer0.getK());
      assertEquals(1491.0, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(1491.0, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(1032, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      Well44497b well44497b0 = new Well44497b((long) 2655);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(2655, 2655, 2655, manhattanDistance0, (-3903.0), randomAdaptor0);
      double double0 = fuzzyKMeansClusterer0.getFuzziness();
      assertEquals(2655.0, double0, 0.01);
      assertEquals((-3903.0), fuzzyKMeansClusterer0.getEpsilon(), 0.01);
      assertEquals(2655, fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals(2655, fuzzyKMeansClusterer0.getK());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = null;
      try {
        fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(0, 0, 0, manhattanDistance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (1)
         //
         verifyException("org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      Well44497a well44497a0 = new Well44497a();
      FuzzyKMeansClusterer<DoublePoint> fuzzyKMeansClusterer0 = new FuzzyKMeansClusterer<DoublePoint>(1, 1027.485679765558, 1, euclideanDistance0, 1027.485679765558, well44497a0);
      fuzzyKMeansClusterer0.getRandomGenerator();
      assertEquals(1027.485679765558, fuzzyKMeansClusterer0.getFuzziness(), 0.01);
      assertEquals(1, fuzzyKMeansClusterer0.getMaxIterations());
      assertEquals(1, fuzzyKMeansClusterer0.getK());
      assertEquals(1027.485679765558, fuzzyKMeansClusterer0.getEpsilon(), 0.01);
  }
}

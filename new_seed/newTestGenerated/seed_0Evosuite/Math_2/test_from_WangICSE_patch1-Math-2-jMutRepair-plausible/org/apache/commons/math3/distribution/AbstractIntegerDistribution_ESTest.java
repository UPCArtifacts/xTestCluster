/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 19:30:47 GMT 2022
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.GeometricDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegerDistribution_ESTest extends AbstractIntegerDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      poissonDistribution0.solveInverseCumulativeProbability(0.0, (-6), 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      hypergeometricDistribution0.cumulativeProbability(270, 270);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      poissonDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(270, 171, 3391);
      assertEquals(3391, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1257), 270);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(0.9999999999468384);
      // Undeclared exception!
      geometricDistribution0.solveInverseCumulativeProbability(0.9999999999468384, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.solveInverseCumulativeProbability(0.18788706637045638, 0, 255);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 127
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(216, 216, 216);
      int[] intArray0 = hypergeometricDistribution0.sample(5672);
      assertEquals(5672, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1300, 1, 1300);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2145115654, 677, 883);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3395.03719, (-1777.6746540961506));
      // Undeclared exception!
      poissonDistribution0.inverseCumulativeProbability(0.6738241160953109);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0, 0);
      // Undeclared exception!
      try { 
        poissonDistribution0.cumulativeProbability((-3668), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.38308101892471313);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1109, 1109, 1109);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-527));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-527)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 270);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-741.0), Integer.MIN_VALUE, 2);
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(163, 1, 96);
      int[] intArray0 = hypergeometricDistribution0.sample(258);
      assertEquals(258, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(91.88961206340302, 91.88961206340302);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.535328465386564);
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2267);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int[] intArray0 = hypergeometricDistribution0.sample(185);
      assertEquals(185, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(216);
      GeometricDistribution geometricDistribution0 = new GeometricDistribution(well19937c0, 4.464279133463661E-201);
      int int0 = geometricDistribution0.sample();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        poissonDistribution0.inverseCumulativeProbability(Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Discrete cumulative probability function returned NaN for argument 1,073,741,823
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.7068508052384, 0.7068508052384);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2267);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3395.03719);
      try { 
        poissonDistribution0.inverseCumulativeProbability(3395.03719);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,395.037 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(3162.2776601683795);
      try { 
        poissonDistribution0.inverseCumulativeProbability((-1522.3213117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,522.321 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.4554787047714477, 0.4554787047714477);
      try { 
        poissonDistribution0.cumulativeProbability(10000000, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (10,000,000) must be less than or equal to upper endpoint (-2,147,483,648)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(270, 270, 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(255, 255, 255);
      hypergeometricDistribution0.reseedRandomGenerator(255);
      assertEquals(255, hypergeometricDistribution0.getNumberOfSuccesses());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 21:15:02 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.2250738585072014E-308);
      assertEquals(2.2250738585072014E-308, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(1048.0);
      assertEquals(1048.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[0];
      Double double2 = new Double((-2375.97398097809));
      assertEquals((-2375.97398097809), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double2;
      doubleArray0[6] = doubleArray0[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17887.895923912358, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5799.94796195618, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(3519.773958164039, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17887.895923912358, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5799.94796195618, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(3519.773958164039, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.2250738585072014E-308);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17887.895923912358, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5799.94796195618, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(3519.773958164039, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(17887.895923912358, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5799.94796195618, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(3519.773958164039, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(2167.02167755304);
      assertEquals(2167.02167755304, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4337.04335510608, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3064.631935807232, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17344.17342042432, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4337.04335510608, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3064.631935807232, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17344.17342042432, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (double) doubleArray0[0]);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4337.04335510608, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3064.631935807232, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17344.17342042432, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4337.04335510608, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(3064.631935807232, arrayRealVector0.getNorm(), 0.01);
      assertEquals(17344.17342042432, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1837.934601599;
      doubleArray0[1] = 1718.6329186577134;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 775.128398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 680.3403026124);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(17);
      assertNotNull(realVector0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(20, realVector0.getDimension());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(2167.02167755304);
      assertEquals(2167.02167755304, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1048.0);
      assertEquals(1048.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1622.3102602));
      assertEquals((-1622.3102602), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(34672.34684084864, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9171.37529285912, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4221.1542773635465, arrayRealVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(34672.34684084864, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9171.37529285912, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4221.1542773635465, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1582.1262361756));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(34672.34684084864, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9171.37529285912, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4221.1542773635465, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(4.828707838457007E-31, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double3 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(4.828707838457007E-31, double3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(34672.34684084864, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9171.37529285912, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4221.1542773635465, arrayRealVector0.getNorm(), 0.01);
      assertEquals(5, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(4.828707838457007E-31, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(17);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1022.543);
      assertEquals(1022.543, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = Double.valueOf((-1622.3102602));
      assertEquals((-1622.3102602), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double2;
      Double double3 = new Double(233.07177);
      assertEquals(233.07177, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[1] = double3;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(103827.8566528, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2722.1076364407995, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5556.7782904, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(103827.8566528, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2722.1076364407995, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5556.7782904, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1622.3102602));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(103827.8566528, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2722.1076364407995, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5556.7782904, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals((-2.0485671419405016E-75), eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double4 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-2.0485671419405016E-75), double4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(103827.8566528, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2722.1076364407995, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(5556.7782904, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals((-2.0485671419405016E-75), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(31, 31);
      assertNotNull(blockRealMatrix0);
      assertEquals(31, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(31, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(31, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(31, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(31, 31);
      assertNotNull(blockRealMatrix0);
      assertEquals(31, blockRealMatrix0.getColumnDimension());
      assertEquals(31, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(31, blockRealMatrix0.getColumnDimension());
      assertEquals(31, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(32, 32);
      assertNotNull(blockRealMatrix0);
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(32, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(32, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(827, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(827, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-2518.7374229997827));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 827x39 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(8, 18);
      assertNotNull(blockRealMatrix0);
      assertEquals(8, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(18, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (8, 0) in a 8x18 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1048.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(17);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1622.3102602));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix1);
      assertEquals(7, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(2.031432247062908E-12);
      assertEquals(2.031432247062908E-12, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2776.6);
      assertEquals(2776.6, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2.0);
      assertEquals(2.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double2;
      doubleArray0[3] = double2;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5557.2000000000035, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(88851.2, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3926.7063959506827, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5557.2000000000035, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(88851.2, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3926.7063959506827, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.2965150551651916E-8);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5557.2000000000035, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(88851.2, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(3926.7063959506827, arrayRealVector0.getNorm(), 0.01);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(2.031432247062908E-12);
      assertEquals(2.031432247062908E-12, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2.0);
      assertEquals(2.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      Double double2 = new Double(1.01);
      assertEquals(1.01, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[1] = double2;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(24.080000000016252, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5.0100000000060945, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.0033481316690542, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(6, doubleArray0.length);
      assertEquals(24.080000000016252, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5.0100000000060945, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.0033481316690542, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.2965150551651916E-8);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, doubleArray0.length);
      assertEquals(24.080000000016252, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(5.0100000000060945, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3.0033481316690542, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(2.7171233546385734E-155, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(17);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1022.543);
      assertEquals(1022.543, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4141.1720000000005, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(2045.2979605416908, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8724.344000000001, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4141.1720000000005, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(2045.2979605416908, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8724.344000000001, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1622.3102602));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4141.1720000000005, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(2045.2979605416908, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(8724.344000000001, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Double double0 = new Double(162.0);
      assertEquals(162.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1.3526755271442426E-9);
      assertEquals(1.3526755271442426E-9, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      Double double2 = new Double(39.0);
      assertEquals(39.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[7] = double2;
      doubleArray0[8] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(326.33878102364724, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(687.0000000054108, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(41472.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertEquals(326.33878102364724, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(687.0000000054108, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(41472.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1253.585));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(9, doubleArray0.length);
      assertEquals(326.33878102364724, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(687.0000000054108, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(41472.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      assertNotNull(blockRealMatrix0);
      assertEquals(66, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(66, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = new Double(162.0);
      assertEquals(162.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Double.valueOf(2.0);
      assertEquals(2.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[2];
      doubleArray0[8] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals(498.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(280.63499425410225, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(41472.0, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertEquals(498.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(280.63499425410225, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(41472.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1253.585));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertEquals(14, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Double double0 = new Double(17);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1622.3102602));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double1 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(44.97777228809804, arrayRealVector0.getNorm(), 0.01);
      assertEquals(119.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1088.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertNotNull(blockRealMatrix0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(20, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3441.218);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(17, 17);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3441.218);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(14, 14);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 14);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(1385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1385
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Double double0 = new Double(17);
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4.650790682304741E-22);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Double double0 = new Double(2167.02167755304);
      Double double1 = new Double(1048.0);
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1582.1262361756));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 20:14:26 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(1);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(3, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, double0, 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(3, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 576.0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(Double.POSITIVE_INFINITY, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(Double.POSITIVE_INFINITY, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3758347.1818161546;
      doubleArray0[2] = 3758347.1818161546;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {3758347.1818161546, 0.0, 3758347.1818161546}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {3758347.1818161546, 0.0, 3758347.1818161546}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 52);
      assertArrayEquals(new double[] {3758347.1818161546, 0.0, 3758347.1818161546}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals((-1.3470815218987877E7), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertArrayEquals(new double[] {3758347.1818161546, 0.0, 3758347.1818161546}, doubleArray0, 0.01);
      assertEquals((-1.3470815218987877E7), double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals((-1.3470815218987877E7), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 24);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(24, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.9066));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(41, 41);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(41, blockRealMatrix0.getColumnDimension());
      assertEquals(41, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(41, blockRealMatrix0.getColumnDimension());
      assertEquals(41, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-1743.349660738017));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(4128, 219);
      assertNotNull(blockRealMatrix0);
      assertEquals(4128, blockRealMatrix0.getRowDimension());
      assertEquals(219, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 219);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 7x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(24, 32);
      assertNotNull(blockRealMatrix0);
      assertEquals(24, blockRealMatrix0.getRowDimension());
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (24, 0) in a 24x32 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.01);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-200.76));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 1675.07628;
      doubleArray0[4] = (-2261.36067355183);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 2207.779594366249;
      doubleArray1[2] = 0.9999999999999998;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1675.07628, (-2261.36067355183), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2207.779594366249, 0.9999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(10, 10);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 10);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(10, realMatrix0.getColumnDimension());
      assertEquals(10, realMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(10, blockRealMatrix0.getColumnDimension());
      assertEquals(10, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, 4594234.872927373);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      try { 
        eigenDecompositionImpl0.getEigenvector(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[3] = (double) 10;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {10.0, 10.0, 0.0, 10.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      assertArrayEquals(new double[] {10.0, 10.0, 0.0, 10.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-2398.353279154307));
      assertArrayEquals(new double[] {10.0, 10.0, 0.0, 10.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertArrayEquals(new double[] {10.0, 10.0, 0.0, 10.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(0.42857142857142855, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertTrue(decompositionSolver0.isNonSingular());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-2261.36067355183);
      doubleArray0[7] = (-1766.0574387840074);
      doubleArray0[8] = (-1786.19041);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = 444.2693319128598;
      doubleArray1[5] = 2207.779594366249;
      doubleArray1[6] = 444.2693319128598;
      doubleArray1[7] = 1675.07628;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2261.36067355183), 0.0, 0.0, (-1766.0574387840074), (-1786.19041)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 444.2693319128598, 2207.779594366249, 444.2693319128598, 1675.07628}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-2261.36067355183);
      doubleArray0[6] = 8.217870828275409E-13;
      doubleArray0[7] = (-1766.0574387840074);
      doubleArray0[8] = (-1786.19041);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = 444.2693319128598;
      doubleArray1[5] = 2207.779594366249;
      doubleArray1[7] = 1675.07628;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2261.36067355183), 0.0, 8.217870828275409E-13, (-1766.0574387840074), (-1786.19041)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 444.2693319128598, 2207.779594366249, 0.0, 1675.07628}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-2261.36067355183);
      doubleArray0[6] = 8.217870828275409E-13;
      doubleArray0[7] = (-1766.0574387840074);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = 444.2693319128598;
      doubleArray1[5] = 2207.779594366249;
      doubleArray1[7] = 1675.07628;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2261.36067355183), 0.0, 8.217870828275409E-13, (-1766.0574387840074), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 444.2693319128598, 2207.779594366249, 0.0, 1675.07628}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 444.2693319128598;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[5] = 2207.779594366249;
      doubleArray1[6] = 8.217870828275409E-13;
      doubleArray1[7] = 1675.07628;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 444.2693319128598, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2207.779594366249, 8.217870828275409E-13, 1675.07628}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 24;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {24.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(24.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(24.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(192.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {24.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(24.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(24.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(192.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 2207.779594366249;
      doubleArray0[3] = 1675.07628;
      doubleArray0[4] = (-2261.36067355183);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-481.0);
      doubleArray1[1] = 2207.779594366249;
      doubleArray1[2] = 0.9999999999999998;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 2207.779594366249, 1675.07628, (-2261.36067355183), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-481.0), 2207.779594366249, 0.9999999999999998, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 52;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 52;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {52.0, 10.0, 0.0, 10.0, 52.0, 10.0, 52.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {52.0, 10.0, 0.0, 10.0, 52.0, 10.0, 52.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-4124.815190704015));
      assertArrayEquals(new double[] {52.0, 10.0, 0.0, 10.0, 52.0, 10.0, 52.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-2865.553137665535));
      assertNotNull(double0);
      assertEquals((-2865.553137665535), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2.1760628934033994E-14);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(2.1760628934033994E-14, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2.788575505424172E-13);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(2.788575505424172E-13, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(581.008004);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(581.008004, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2865.553137665535));
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((-2865.553137665535), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[5]);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((-2865.553137665535), (double)double6, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[6] = double6;
      doubleArray0[7] = doubleArray0[3];
      doubleArray0[8] = doubleArray0[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-92.831165707));
      assertNotNull(openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-92.831165707), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-92.831165707), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(5760.481788865514, arrayRealVector0.getNorm(), 0.01);
      assertEquals(12044.220554662139, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(733581.6032423769, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(realMatrix0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-92.831165707), openMapRealVector0.getEpsilon(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01);
      assertEquals(5760.481788865514, arrayRealVector0.getNorm(), 0.01);
      assertEquals(12044.220554662139, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(733581.6032423769, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = 444.2693319128598;
      doubleArray1[5] = 2207.779594366249;
      doubleArray1[6] = 444.2693319128598;
      doubleArray1[7] = 1675.07628;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3620.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 444.2693319128598, 2207.779594366249, 444.2693319128598, 1675.07628}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 52;
      doubleArray0[6] = (double) 52;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-2398.353279154307));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2374.9793325);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(18, 18);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(10, 10);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-4173.945954050956));
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(10, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 39.0);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(10, 10);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3758347.1818161546);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 18;
      doubleArray0[2] = 3.6773701989398816E-13;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.6773701989398816E-13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(624);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 624
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-2398.353279154307));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }
}

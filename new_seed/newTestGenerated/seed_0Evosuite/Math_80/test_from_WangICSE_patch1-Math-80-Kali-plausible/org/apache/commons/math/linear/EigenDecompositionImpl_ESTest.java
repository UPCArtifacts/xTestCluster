/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 20:04:12 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[2] = 2.0;
      doubleArray0[4] = (-4732.078103512231);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-1587.01));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(14, doubleArray0.length);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4737.1738216);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-4737.1738216)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-4737.1738216)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(1, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-3518.731389861));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-4737.1738216)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(2.244081581605235E7, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(1, doubleArray0.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(2.244081581605235E7, double0, 0.01);
      assertArrayEquals(new double[] {(-4737.1738216)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(2.244081581605235E7, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(52);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2108, 2108);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(2108, blockRealMatrix0.getColumnDimension());
      assertEquals(2108, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2108);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3099, 3);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(3099, blockRealMatrix0.getRowDimension());
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 2.665040983057222E7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 3,099x3 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(11, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(11, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertEquals(11, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(11, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(11, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 3.5542027592489034E7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (1, 0) in a 1x11 matrix
         //
         verifyException("org.apache.commons.math.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.232595164407831E-28);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.740023637220472E7;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 4.740023637220472E7);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {4.740023637220472E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4.740023637220472E7, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {4.740023637220472E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4.740023637220472E7, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertTrue(decompositionSolver0.isNonSingular());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3764.504424);
      doubleArray0[1] = (-5162.403493584381);
      doubleArray0[2] = (-4737.1738216);
      doubleArray0[3] = (-5162.403493584381);
      doubleArray0[4] = 2.0;
      doubleArray0[5] = (-5162.403493584381);
      doubleArray0[6] = 265.8726936741967;
      doubleArray0[7] = (-4737.1738216);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-3764.504424), (-5162.403493584381), (-4737.1738216), (-5162.403493584381), 2.0, (-5162.403493584381), 265.8726936741967, (-4737.1738216), 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-3764.504424), (-5162.403493584381), (-4737.1738216), (-5162.403493584381), 2.0, (-5162.403493584381), 265.8726936741967, (-4737.1738216), 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {(-3764.504424), (-5162.403493584381), (-4737.1738216), (-5162.403493584381), 2.0, (-5162.403493584381), 265.8726936741967, (-4737.1738216), 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, 2.2250738585072014E-308);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-3764.504424), (-5162.403493584381), (-4737.1738216), (-5162.403493584381), 2.0, (-5162.403493584381), 265.8726936741967, (-4737.1738216), 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2.0;
      doubleArray0[4] = 2.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix2 = realMatrix1.scalarAdd(1889.067342);
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix2.getRowDimension());
      assertEquals(5, realMatrix2.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix2);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, realMatrix2);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, array2DRowRealMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
      assertEquals(5, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix2, (-1587.01));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix2.getRowDimension());
      assertEquals(5, realMatrix2.getColumnDimension());
      assertEquals((-2.7356396477484292E-37), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix2));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix2));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5162.403493584381);
      doubleArray0[1] = (-4737.1738216);
      doubleArray0[2] = 2.0;
      doubleArray0[4] = (-1587.01);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, 0.0, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, 0.0, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, 0.0, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(5, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-22.61060097844927));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, 0.0, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5162.403493584381);
      doubleArray0[1] = (-4737.1738216);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-4737.1738216);
      doubleArray0[4] = (-1587.01);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, (-4737.1738216), (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, (-4737.1738216), (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, (-4737.1738216), (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix2 = realMatrix1.scalarAdd(1889.067342);
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, (-4737.1738216), (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix2.getRowDimension());
      assertEquals(5, realMatrix2.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix2);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix1, realMatrix2);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix2, array2DRowRealMatrix0);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
      assertEquals(5, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix2, (-1587.01));
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 2.0, (-4737.1738216), (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix2.getRowDimension());
      assertEquals(5, realMatrix2.getColumnDimension());
      assertEquals(1.1002944001909466E-16, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix2));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix2));
      assertFalse(realMatrix1.equals((Object)realMatrix2));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5193.60652842107);
      doubleArray0[1] = (-4737.1738216);
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 47.28498704663035;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-5193.60652842107), (-4737.1738216), 2.0, 47.28498704663035, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-5193.60652842107), (-4737.1738216), 2.0, 47.28498704663035, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {(-5193.60652842107), (-4737.1738216), 2.0, 47.28498704663035, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-5193.60652842107));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[2] = 2.0;
      doubleArray0[4] = (-4732.078103512231);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix2 = realMatrix1.scalarAdd(1889.067342);
      assertNotNull(realMatrix2);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix2.getColumnDimension());
      assertEquals(14, realMatrix2.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertNotSame(array2DRowRealMatrix0, realMatrix2);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix2);
      assertNotSame(realMatrix2, array2DRowRealMatrix0);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
      assertEquals(14, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix2, (-1587.01));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix2.getColumnDimension());
      assertEquals(14, realMatrix2.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)realMatrix2));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix2));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertEquals(14, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[2] = 2.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      RealMatrix realMatrix2 = realMatrix1.scalarAdd(1889.067342);
      assertNotNull(realMatrix2);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix2.getRowDimension());
      assertEquals(14, realMatrix2.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix2);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, realMatrix2);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, array2DRowRealMatrix0);
      assertEquals(14, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix2, (-1587.01));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(14, realMatrix1.getColumnDimension());
      assertEquals(14, realMatrix1.getRowDimension());
      assertEquals(14, realMatrix2.getRowDimension());
      assertEquals(14, realMatrix2.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrix2));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix2));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertEquals(14, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5162.403493584381);
      doubleArray0[1] = (-4737.1738216);
      doubleArray0[3] = 47.28498704663035;
      doubleArray0[4] = (-1587.01);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 0.0, 47.28498704663035, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 0.0, 47.28498704663035, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(5, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {(-5162.403493584381), (-4737.1738216), 0.0, 47.28498704663035, (-1587.01)}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(5, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(5, realMatrix1.getColumnDimension());
      assertEquals(5, realMatrix1.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertEquals(5, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, 2.665040983057222E7);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(7, doubleArray0.length);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix1.getRowDimension());
      assertEquals(7, realMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, realMatrix2.getColumnDimension());
      assertEquals(7, realMatrix2.getRowDimension());
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix0));
      assertFalse(realMatrix2.equals((Object)realMatrix1));
      assertFalse(realMatrix2.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, realMatrix2);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix0, realMatrix2);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertNotSame(realMatrix1, realMatrix2);
      assertNotSame(realMatrix2, realMatrix0);
      assertNotSame(realMatrix2, realMatrix1);
      assertNotSame(realMatrix2, array2DRowRealMatrix0);
      assertEquals(7, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix2, 2.665040983057222E7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5162.403493584381);
      doubleArray0[1] = (-4737.1738216);
      doubleArray0[2] = 2.0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-22.61060097844927));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      RealMatrix realMatrix2 = realMatrix1.scalarAdd(1889.067342);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix2, (-1587.01));
      eigenDecompositionImpl0.getSolver();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-1587.01));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3, 3);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-1587.01));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(2);
      assertTrue(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(3, 3);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 3);
      eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(12, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getD();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertNotNull(realMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-1587.01));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-5162.403493584381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5162.403493584381);
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-4737.1738216));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(39, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(12, 12);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.transpose();
      RealMatrix realMatrix1 = array2DRowRealMatrix0.multiply(realMatrix0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix1, (-1587.01));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

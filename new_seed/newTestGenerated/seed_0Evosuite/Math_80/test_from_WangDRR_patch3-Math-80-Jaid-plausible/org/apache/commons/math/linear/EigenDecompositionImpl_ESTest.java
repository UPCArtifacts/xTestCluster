/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 20:55:04 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 39.0;
      doubleArray0[3] = 39.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 52;
      doubleArray0[0] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, doubleArray0.length);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 52);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(52.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(52.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(52.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) 39;
      doubleArray0[3] = 2504.26487725;
      doubleArray0[5] = (double) 52;
      doubleArray0[6] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(21282.119018, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2673.26487725, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2505.715381967385, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {39.0, 39.0, 0.0, 2504.26487725, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(21282.119018, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2673.26487725, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2505.715381967385, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {39.0, 39.0, 0.0, 2504.26487725, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.4709121410927734E8);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(21282.119018, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2673.26487725, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2505.715381967385, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals((-3.142152457193154E-78), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {39.0, 39.0, 0.0, 2504.26487725, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(21282.119018, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(2673.26487725, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(2505.715381967385, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals((-3.142152457193154E-78), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-3.142152457193154E-78), double0, 0.01);
      assertArrayEquals(new double[] {39.0, 39.0, 0.0, 2504.26487725, 0.0, 52.0, 39.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7, doubleArray0.length);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 121.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 7x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(19, 1617);
      assertEquals(1617, blockRealMatrix0.getColumnDimension());
      assertEquals(19, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (19, 0) in a 19x1,617 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, Double.NaN);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(104.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 39.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(104.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(2, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 39.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 39.0);
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(104.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(4112784.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 39.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(91.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(104.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(65.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(2, realMatrix0.getRowDimension());
      assertEquals(4112784.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2, realMatrix1.getColumnDimension());
      assertEquals(2, realMatrix1.getRowDimension());
      assertEquals(2, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {52.0, 39.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 49.9728813107;
      doubleArray0[1] = 39.0;
      doubleArray0[2] = 49.9728813107;
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = (double) 18;
      doubleArray0[5] = 39.0;
      doubleArray0[6] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(105.74434547284278, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(263.9186439321, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {49.9728813107, 39.0, 49.9728813107, 18.0, 18.0, 39.0, 49.9728813107}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(105.74434547284278, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(263.9186439321, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {49.9728813107, 39.0, 49.9728813107, 18.0, 18.0, 39.0, 49.9728813107}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1274.39513063634));
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(105.74434547284278, arrayRealVector0.getNorm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(263.9186439321, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {49.9728813107, 39.0, 49.9728813107, 18.0, 18.0, 39.0, 49.9728813107}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 39.0;
      doubleArray0[2] = 39.0;
      doubleArray0[4] = 39.0;
      doubleArray0[5] = 39.0;
      doubleArray0[7] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(205.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(92.63524635090744, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 0.0, 39.0, 39.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(205.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(92.63524635090744, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 0.0, 39.0, 39.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1081.430948856));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(205.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(92.63524635090744, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 0.0, 39.0, 39.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 39.0;
      doubleArray0[2] = 39.0;
      doubleArray0[4] = 39.0;
      doubleArray0[5] = 39.0;
      doubleArray0[7] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(92.68381124281257, arrayRealVector0.getNorm(), 0.01);
      assertEquals(208.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5376.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {3.0, 39.0, 39.0, 0.0, 39.0, 39.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(92.68381124281257, arrayRealVector0.getNorm(), 0.01);
      assertEquals(208.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5376.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {3.0, 39.0, 39.0, 0.0, 39.0, 39.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1081.430948856));
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(92.68381124281257, arrayRealVector0.getNorm(), 0.01);
      assertEquals(208.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(5376.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {3.0, 39.0, 39.0, 0.0, 39.0, 39.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 49.9728813107;
      doubleArray0[2] = 49.9728813107;
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = (double) 18;
      doubleArray0[5] = 39.0;
      doubleArray0[6] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(224.91864393209997, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(98.28970749513871, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {49.9728813107, 0.0, 49.9728813107, 18.0, 18.0, 39.0, 49.9728813107}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(224.91864393209997, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(98.28970749513871, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {49.9728813107, 0.0, 49.9728813107, 18.0, 18.0, 39.0, 49.9728813107}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1274.39513063634));
      assertEquals(224.91864393209997, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(98.28970749513871, arrayRealVector0.getNorm(), 0.01);
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {49.9728813107, 0.0, 49.9728813107, 18.0, 18.0, 39.0, 49.9728813107}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 49.9728813107;
      doubleArray0[3] = (double) 18;
      doubleArray0[4] = (double) 18;
      doubleArray0[6] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(135.94576262139998, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(75.11709348068932, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {49.9728813107, 0.0, 0.0, 18.0, 18.0, 0.0, 49.9728813107}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(135.94576262139998, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(75.11709348068932, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(7, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {49.9728813107, 0.0, 0.0, 18.0, 18.0, 0.0, 49.9728813107}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1274.39513063634));
      assertEquals(135.94576262139998, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(7, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(3198.2644038848, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(75.11709348068932, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(7, realMatrix0.getRowDimension());
      assertEquals(7, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {49.9728813107, 0.0, 0.0, 18.0, 18.0, 0.0, 49.9728813107}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 39.0;
      doubleArray0[1] = (double) 39;
      doubleArray0[2] = 39.0;
      doubleArray0[3] = (double) 39;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(156.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(312.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 39.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(156.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(312.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 39.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.25);
      assertEquals(156.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(312.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 39.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(156.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(78.0, arrayRealVector0.getNorm(), 0.01);
      assertEquals(312.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(4, realMatrix1.getRowDimension());
      assertEquals(4, realMatrix1.getColumnDimension());
      assertEquals(4, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 39.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(208.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(72.11996163679865, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(101.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {52.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(208.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(72.11996163679865, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(101.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals(3, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {52.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(208.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(72.11996163679865, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(101.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(3, realMatrix0.getRowDimension());
      assertEquals(3, realMatrix0.getColumnDimension());
      assertEquals((-4.302405310651178E-21), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {52.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 39.0;
      doubleArray0[2] = 39.0;
      doubleArray0[3] = 39.0;
      doubleArray0[4] = 39.0;
      doubleArray0[5] = 39.0;
      doubleArray0[6] = 39.0;
      doubleArray0[7] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(107.81135778058501, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(283.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(107.81135778058501, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(283.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(107.81135778058501, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(283.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(107.81135778058501, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(283.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-1388.1));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(107.81135778058501, arrayRealVector0.getNorm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(283.9728813107, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {0.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 39.0;
      doubleArray0[4] = 39.0;
      doubleArray0[7] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(74.4263989891578, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(127.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 39.0, 0.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(74.4263989891578, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(127.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 39.0, 0.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(74.4263989891578, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(127.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 39.0, 0.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(74.4263989891578, arrayRealVector0.getNorm(), 0.01);
      assertEquals(4992.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(127.97288131069999, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 39.0, 0.0, 0.0, 49.9728813107, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-1388.1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 39.0;
      doubleArray0[4] = 39.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix1, (-1388.1));
      assertEquals(55.154328932550705, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(78.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(2496.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getColumnDimension());
      assertEquals(9, realMatrix1.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertNotNull(eigenDecompositionImpl1);
      assertArrayEquals(new double[] {0.0, 0.0, 39.0, 0.0, 39.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(4, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2504.26487725);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(4, realMatrix1.getRowDimension());
      assertEquals(4, realMatrix1.getColumnDimension());
      assertEquals(4, doubleArray0.length);
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertNotNull(realMatrix1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(4, realMatrix0.getRowDimension());
      assertEquals(4, realMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertEquals(4, doubleArray0.length);
      assertFalse(realMatrix0.equals((Object)realMatrix1));
      assertNotNull(decompositionSolver0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(realMatrix0, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, doubleArray0.length);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, doubleArray0.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1081.430948856));
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(39);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2504.26487725);
      eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 39.0);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(18, 18);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39.0);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(18, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 39.0;
      doubleArray0[3] = 39.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, Double.NEGATIVE_INFINITY);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2504.26487725);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotSame(realMatrix0, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 39.0;
      doubleArray0[1] = 39.0;
      doubleArray0[3] = 39.0;
      doubleArray0[4] = 39.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-67.787));
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 775.128398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 39.0;
      doubleArray0[7] = 49.9728813107;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanh();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 2685.4407106494);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}

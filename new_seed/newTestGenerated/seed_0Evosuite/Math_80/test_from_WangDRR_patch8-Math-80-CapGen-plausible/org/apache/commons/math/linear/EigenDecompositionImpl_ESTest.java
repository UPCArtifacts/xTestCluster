/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 21:01:08 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (-2152.07516351182);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2152.07516351182), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix0.getRowDimension());
      assertEquals(9, realMatrix0.getColumnDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2152.07516351182), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1837.934601599;
      doubleArray0[1] = 1718.6329186577134;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 775.128398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 680.3403026124);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(17);
      assertEquals(20, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(20, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertTrue(realVector0.isNaN());
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertEquals(20, realVector0.getDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 39;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(1);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 680.3403026124);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(39.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(9, doubleArray0.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(39.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(39.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (-2610.768022976069);
      doubleArray0[4] = (double) 20;
      doubleArray0[5] = (double) 20;
      doubleArray0[8] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (-1326.727789);
      doubleArray1[6] = (-2610.768022976069);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-5.011739491767488E21), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {20.0, (-2610.768022976069), 0.0, 0.0, 20.0, 20.0, 0.0, 0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1326.727789), 0.0, 0.0, 0.0, (-2610.768022976069), 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-5.011739491767488E21), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {20.0, (-2610.768022976069), 0.0, 0.0, 20.0, 20.0, 0.0, 0.0, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1326.727789), 0.0, 0.0, 0.0, (-2610.768022976069), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-5.011739491767488E21), double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(32, 32);
      assertEquals(32, blockRealMatrix0.getRowDimension());
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(32, blockRealMatrix0.getRowDimension());
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(32, 32);
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(32, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(32, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(32, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector(219);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(2950, 8);
      assertEquals(8, blockRealMatrix0.getColumnDimension());
      assertEquals(2950, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 2,950x8 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(66, 2129958560);
      assertEquals(2129958560, openMapRealMatrix0.getColumnDimension());
      assertEquals(66, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 4.565379185805796E-9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // row index 66 out of allowed range [0, 65]
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 768.196189205598);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 2769.8413);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 39;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(1);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(9, doubleArray0.length);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 680.3403026124);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(39.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertEquals(9, doubleArray0.length);
      
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(39.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(1, realMatrix1.getRowDimension());
      assertEquals(1, realMatrix1.getColumnDimension());
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(array2DRowRealMatrix0, realMatrix1);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertNotSame(realMatrix0, realMatrix1);
      assertNotSame(realMatrix1, realMatrix0);
      assertNotSame(realMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix1);
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertFalse(realMatrix1.equals((Object)realMatrix0));
      assertFalse(realMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      doubleArray1[7] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0, 20.0, 20.0, (-2610.768022976069), 20.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      doubleArray1[7] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 20.0, 20.0, (-2610.768022976069), 20.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      doubleArray1[7] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0, 20.0, 20.0, (-2610.768022976069), 20.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2610.768022976069);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[6] = (-2610.768022976069);
      doubleArray1[1] = (-2152.07516351182);
      doubleArray1[2] = 20.0;
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, (-2610.768022976069), 0.0, 0.0, 0.0, 0.0, (-2610.768022976069), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2152.07516351182), 20.0, 20.0, 20.0, 20.0, (-2610.768022976069), 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2610.768022976069);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2610.768022976069);
      doubleArray1[1] = (-2152.07516351182);
      doubleArray1[2] = (-1326.727789);
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, (-2610.768022976069), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2610.768022976069), (-2152.07516351182), (-1326.727789), 20.0, 20.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (-2610.768022976069);
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      doubleArray1[7] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2610.768022976069), 20.0, 20.0, 20.0, (-2610.768022976069), 20.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(66, blockRealMatrix0.getColumnDimension());
      assertEquals(66, blockRealMatrix0.getRowDimension());
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2610.768022976069);
      doubleArray1[5] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2610.768022976069), 0.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = (-2152.07516351182);
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2152.07516351182), 20.0, (-2610.768022976069), 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) 20;
      doubleArray0[6] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 20.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0, 20.0, 20.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2610.768022976069);
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 20;
      doubleArray0[6] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2610.768022976069);
      doubleArray1[1] = (-2152.07516351182);
      doubleArray1[2] = 0.08325;
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, (-2610.768022976069), 20.0, 20.0, 20.0, 0.0, 20.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2610.768022976069), (-2152.07516351182), 0.08325, 20.0, 20.0, 20.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2610.768022976069);
      doubleArray1[1] = (-2152.07516351182);
      doubleArray1[2] = 0.08325;
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2610.768022976069), (-2152.07516351182), 0.08325, 20.0, 20.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (double) 20;
      doubleArray1[4] = (double) 20;
      doubleArray1[5] = (double) 20;
      doubleArray1[6] = (-2610.768022976069);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 20.0, 20.0, 20.0, (-2610.768022976069), 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 20;
      doubleArray0[1] = (-2610.768022976069);
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = (double) 20;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2610.768022976069));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2610.768022976069);
      doubleArray1[1] = (-2152.07516351182);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2610.768022976069), (-2152.07516351182), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 20.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(decompositionSolver0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(9, realMatrix0.getColumnDimension());
      assertEquals(9, realMatrix0.getRowDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(realMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertFalse(decompositionSolver0.isNonSingular());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(decompositionSolver0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 680.3403026124);
      try { 
        eigenDecompositionImpl0.getEigenvector((-1153));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1153
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      try { 
        eigenDecompositionImpl0.getEigenvector(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(9, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(9, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.2348374849266129E-4);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertNotSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(20, 20);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 680.3403026124);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(20, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(66, 66);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(66, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 20;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2610.768022976069);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 20.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3164
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(39, doubleArray0.length);
  }
}

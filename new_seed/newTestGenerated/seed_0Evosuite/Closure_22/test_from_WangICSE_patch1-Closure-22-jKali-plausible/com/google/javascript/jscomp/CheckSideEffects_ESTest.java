/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 22:30:56 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSideEffects;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CheckSideEffects_ESTest extends CheckSideEffects_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      SyntheticAst syntheticAst0 = new SyntheticAst(")>");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = Node.newNumber((double) 8, (-680), 16);
      checkSideEffects_StripProtection0.process(node0, node1);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = Node.newString(106, "// Input %num%", 106, 106);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkMissingGetCssNameLevel, false);
      Node node1 = new Node(85, node0, node0, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      Node node3 = new Node(1485, node2, node1, node1, node1);
      checkSideEffects0.process(node0, node1);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst(")>");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      checkSideEffects0.hotSwapScript(node0, (Node) null);
      assertFalse(node0.isAnd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DataFlowAnalysis$BranchedFlowState");
      checkSideEffects_StripProtection0.visit((NodeTraversal) null, node0, node0);
      assertFalse(node0.isBreak());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      // Undeclared exception!
      try { 
        checkSideEffects0.hotSwapScript((Node) null, (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = compiler1.parseTestCode("c;t");
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      // Undeclared exception!
      try { 
        checkSideEffects0.hotSwapScript(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Node node0 = Node.newString(130, "// Input %num%", 130, 130);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkMissingGetCssNameLevel, false);
      Node node1 = new Node(85, node0, node0, node0, node0);
      Node node2 = new Node(52, node1, node1, node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, (ScopeCreator) null);
      checkSideEffects0.visit(nodeTraversal0, node0, node1);
      assertTrue(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects_StripProtection0, (ScopeCreator) null);
      SyntheticAst syntheticAst0 = new SyntheticAst(")>");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      checkSideEffects0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isWith());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Node node0 = Node.newString(130, "wB*;v:rWYmpj:=^k", 130, (-280));
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkGlobalNamesLevel, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      // Undeclared exception!
      try { 
        checkSideEffects0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      Node node0 = Node.newString(306, "V3&$XQZB9k");
      Node node1 = new Node(125, node0, node0, 49, 40);
      // Undeclared exception!
      try { 
        checkSideEffects0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = Node.newString(106, "// Input %num%", 106, 106);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkMissingGetCssNameLevel, false);
      Node node1 = new Node(85, node0, node0, node0, node0);
      Node node2 = new Node(85, node1, 45, 29);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, (ScopeCreator) null);
      checkSideEffects0.visit(nodeTraversal0, node0, node1);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects_StripProtection0, (ScopeCreator) null);
      SyntheticAst syntheticAst0 = new SyntheticAst(")>");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
      checkSideEffects0.visit(nodeTraversal0, node0, (Node) null);
      assertFalse(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Node node0 = Node.newString(810, "", 810, 3806);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, true);
      Node node1 = new Node(85, node0, node0, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      checkSideEffects0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SyntheticAst syntheticAst0 = new SyntheticAst(")>");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      checkSideEffects0.process(node0, node0);
      assertFalse(node0.isAssignAdd());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.rhino.head.ast.PropertyGet", "com.google.javascript.rhino.head.ast.PropertyGet");
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      // Undeclared exception!
      try { 
        checkSideEffects0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects_StripProtection0, (ScopeCreator) null);
      SyntheticAst syntheticAst0 = new SyntheticAst("YXcR]");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
      Node node1 = Node.newString(115, "AaT^%S;OL,F*3H", 38, 30);
      checkSideEffects0.visit(nodeTraversal0, node0, node1);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = Node.newString(106, "// Input %num%", 106, 106);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkMissingGetCssNameLevel, false);
      Node node1 = new Node(85, node0, node0, node0, node0);
      Node node2 = new Node(52, node1, node1, node1, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
      // Undeclared exception!
      try { 
        checkSideEffects0.visit(nodeTraversal0, node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = Node.newString(133, "// Input %num%", 133, 133);
      CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkMissingGetCssNameLevel, false);
      Node node1 = new Node(85, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        checkSideEffects0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 04 21:30:05 GMT 2023
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.setRelativeAccuracy(1204.9939582631);
      assertEquals(1204.9939582631, brentOptimizer0.getRelativeAccuracy(), 0.01);
      
      brentOptimizer0.resetRelativeAccuracy();
      assertEquals(0.0, brentOptimizer0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(2558.069535328401);
      brentSolver0.setMaximalIterationCount((-501));
      assertEquals((-501), brentSolver0.getMaximalIterationCount());
      
      brentSolver0.resetMaximalIterationCount();
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setAbsoluteAccuracy(0.0);
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      
      brentSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0, Double.NaN);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(Double.NaN, brentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setRelativeAccuracy(0.5555555555555556);
      assertEquals(0.5555555555555556, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0, 0);
      brentSolver0.setAbsoluteAccuracy(0.0);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      double double0 = simpsonIntegrator0.getRelativeAccuracy();
      assertEquals(0, simpsonIntegrator0.getIterationCount());
      assertEquals(64, simpsonIntegrator0.getMaximalIterationCount());
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(1.0E-15, simpsonIntegrator0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setRelativeAccuracy((-1769.73));
      double double0 = brentSolver0.getRelativeAccuracy();
      assertEquals((-1769.73), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      
      brentSolver0.setMaximalIterationCount(0);
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(2551.7975);
      brentSolver0.setMaximalIterationCount((-501));
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals((-501), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-729.01));
      assertEquals(0, brentSolver0.getIterationCount());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 100;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      brentSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-729.01), 100.0, 1.0);
      int int0 = brentSolver0.getIterationCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(81, 0.0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(81, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-307.94));
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-307.94), double0, 0.01);
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      double double0 = brentSolver0.getRelativeAccuracy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setAbsoluteAccuracy(1788.0);
      double double0 = brentSolver0.getAbsoluteAccuracy();
      assertEquals(1788.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver((-729.01));
      int int0 = brentSolver0.getIterationCount();
      assertEquals(0, int0);
      assertEquals((-729.01), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      int int0 = brentSolver0.getMaximalIterationCount();
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(100, int0);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getRelativeAccuracy(), 0.01);
  }
}

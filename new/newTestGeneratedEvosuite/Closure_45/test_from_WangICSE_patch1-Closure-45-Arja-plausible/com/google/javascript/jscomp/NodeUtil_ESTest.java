/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 17:47:31 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.Set;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("c*fv}c^&");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("#![oL");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString("HW$O=", 5284, 5284);
      NodeUtil.setDebugInformation(node0, node0, "HW$O=");
      assertFalse(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      Node node0 = NodeUtil.numberNode(1963.887642787837, (Node) null);
      assertNotNull(node0);
      
      NodeUtil.newName(jqueryCodingConvention0, "-infinity", node0);
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(99, (-2624), (-2624));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(49);
      boolean boolean0 = nodeUtil_MatchNodeType0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "b\f");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("CvgH");
      assertEquals("CvgH", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = NodeUtil.opToStr((-1986));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\n parent:", "-infinity");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(5, 3178, 3178);
      Node node1 = NodeUtil.newVarNode("{Jb^Pp", node0);
      assertEquals(3178, node1.getCharno());
      assertTrue(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString(1, "b\f");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("com.gogle.common.base.Predicates$1");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isVarDeclaration(node0);
      assertEquals(43, node0.getType());
      assertTrue(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isUndefined(node0);
      assertFalse(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(0, (-2515), (-2515));
      Node node1 = new Node(0, node0, node0);
      boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(54.0);
      boolean boolean0 = NodeUtil.isSymmetricOperation(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(0, 2, 2);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NodeUtil.isStrWhiteSpaceChar(52);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(node0.isFalse());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isRelationalOperation(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(122, "|)YP");
      boolean boolean0 = NodeUtil.isObjectCallMethod(node0, "\".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(0, (-2515), (-2515));
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString("Wi ;d^L.=@d}");
      boolean boolean0 = NodeUtil.isNumericResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString(1, "b\f");
      boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(894, 894, 65535);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(32, node0);
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString("UbZyc[_HjAS5p");
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("UbZyc[_HjAS5p");
      boolean boolean0 = NodeUtil.isCallOrNew(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isAssignmentOp(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("NaN", charset0);
      Node node0 = compiler0.parse(jSSourceFile0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(40);
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString("HW$O=", 5284, 5284);
      boolean boolean0 = NodeUtil.containsType(node0, 41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.valueCheck(node0, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("UffkuV@|S9.(?AHh8*");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.setDebugInformation((Node) null, (Node) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("white");
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$VarCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(1889.0);
      NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("function", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "Wi ;d^L.=@d}", (Node) null, "Wi ;d^L.=@d}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(closureCodingConvention0, "AMpM9#@c", (Node) null, "AMpM9#@c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName(jqueryCodingConvention0, "Object", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.IR", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString((-2568), "false");
      // Undeclared exception!
      try { 
        NodeUtil.newExpr(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(52, node0);
      // Undeclared exception!
      try { 
        NodeUtil.newExpr(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects((Node) null, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState((Node) null, compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(100, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(0, 2, 2);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue((Node) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isUndefined((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "b\f");
      // Undeclared exception!
      try { 
        NodeUtil.isTryCatchNodeContainer(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isSwitchCase((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatementBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isReferenceName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced((Node) null, "Unexpected expression node", predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLoopStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLatin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGetOrSetKey((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGet((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCallOrApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString("com.gogle.common.base.Predicates$1");
      // Undeclared exception!
      try { 
        NodeUtil.isExpressionResultUsed(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention((CodingConvention) null, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isCallOrNew((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isBooleanResultHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("UffkuV@|S9.(?A/Hh8*");
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getStringNumberValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:STRING  M`_?88k](B7i{W
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("NaN", charset0);
      Node node0 = compiler0.parse(jSSourceFile0);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("*`>BQ");
      node0.setType(39);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("99)}*LT]#wC", (-128), 0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TRUE does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("Wi ;d^L.=@d}");
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(nodeArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("Wi ;d^L.=@d}");
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, (-895));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("c*fv}c^&");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName(">>>=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getVarsDeclaredInBranch((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$VarCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = NodeUtil.numberNode(39, node0);
      assertTrue(node1.isNumber());
      assertEquals(0, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("false");
      Node node1 = NodeUtil.newVarNode("false", node0);
      assertEquals(118, node1.getType());
      
      boolean boolean0 = NodeUtil.isExpressionResultUsed(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString(1, "b\f");
      Node node1 = NodeUtil.getBestLValueOwner(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = NodeUtil.getBestLValueOwner((Node) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      Node node1 = new Node(48, node0, node0, node0, node0, 30, 40);
      Node node2 = NodeUtil.getBestLValue(node0);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      Node node1 = new Node(29, node0, node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(303, 1207, 3178);
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertFalse(node0.isFalse());
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString(164, "n07uN=8!O,H.$");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(122, "|)YP");
      InputId inputId0 = NodeUtil.getInputId(node0);
      assertNull(inputId0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("d");
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(1, "b\f");
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString("UffkuV@|S9.(?AHh8*");
      Node node1 = new Node((-1219), node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0, node0);
      int int0 = NodeUtil.getNameReferenceCount(node1, "^\"9");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString(164, "n07uN=8!O,H.$");
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-3594), nodeUtil_NumbericResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(99, (-2624), 0);
      Node node1 = new Node(1, node0, node0);
      boolean boolean0 = NodeUtil.referencesThis(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Wi ;d^L.=@d}");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString(122, "|)YP");
      Node node1 = NodeUtil.newVarNode("Wi ;d^L.=@d}", node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("*X");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("com/google/javascript/jscomp/mozilla/rhino/Script");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.containsType(node0, 16, nodeUtil_MatchDeclaration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("-infinity");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com/google/javascript/jscomp/mozilla/rhino/Script");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "b]P1[st&3IG$.A%AaSJ");
      assertFalse(boolean0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "b\f");
      int int0 = NodeUtil.getNameReferenceCount(node0, "b\f");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("t6zx&7HY(&WHMiV", (Node) null);
      assertNotNull(node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(2792);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertTrue(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = NodeUtil.newUndefinedNode(nodeArray0[0]);
      assertFalse(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("{~$dBL", 18, 18);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString("UbZyc[_HjAS5p");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("void");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidSimpleName("d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("{~$dBL", 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "msg.generator.returns");
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString("c*fv}c^&", 122, 104);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertFalse(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertNotNull(string0);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2020);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2020
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString(1, "b\f");
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("UbZyc[_HjAS5p");
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("UbZyc[_HjAS5p", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("HW$O=", 5284, 5284);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.containsType(node0, 43, compilerOptions0.sourceMapDetailLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("Wi ;d^L.=@d}");
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      Node node1 = NodeUtil.newVarNode("M:)]vJQc?", node0);
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
      assertTrue(boolean0);
      assertEquals(Integer.MIN_VALUE, node1.getSourceOffset());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("*`>BQ");
      boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString(18, "-infinity");
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(164, "n07uN=8!O,H.$");
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = NodeUtil.isFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node((-7), (-7), (-7));
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(1524, "");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1524
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node((-7), (-7), (-7));
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("{~$dBL", 0, 0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(96, "B80x^:WqnL%o");
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node((-2126), 123, 782);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "");
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(18);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = new Node(29, node0, node0, node0);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(16);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      Node node1 = new Node(29, node0, node0);
      boolean boolean0 = NodeUtil.isNumericResult(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString(100, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.isNumericResult(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1184);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1184
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(123);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for WITH (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for BREAK (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for DO (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CASE (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 99
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 80
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      Node node1 = NodeUtil.newVarNode(" M`_?88k](B7i{W", node0);
      assertEquals(118, node1.getType());
      
      Node node2 = NodeUtil.getBestLValue(node0);
      assertNotNull(node2);
      
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(116, 113, 116);
      Node node1 = new Node(37, node0, node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\"R]uuYn", "NaN");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got SCRIPT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      Node node1 = new Node(29, node0, node0);
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\"R]uuYn", "NaN");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber(1889.0);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString(100, "infinity");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.mayHaveSideEffects(node0);
      assertEquals(44, node0.getType());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.isTrue());
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(1889.9969);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "b\f");
      Logger logger0 = Logger.getAnonymousLogger((String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, 0, (-1466));
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(114);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(111, 113, 115);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCASE 113
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(99, (-2624), 0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 99
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(96);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("Wi ;d^L.=@d}");
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, 0, (-1466));
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "-infinity");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "\"R]uuYn", "NaN");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
      assertEquals(44, node0.getType());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertEquals(43, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("d");
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("Rh");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      Node node1 = new Node(29, node0, node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(722, 0, 0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node((-7), (-7), (-7));
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = NodeUtil.getStringValue(54);
      assertEquals("54", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = NodeUtil.getStringValue(2982.2558723);
      assertEquals("2982.2558723", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newString("c*fv}c^&");
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("c*fv}c^&", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = new Node(303, 1207, 3178);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("*`>BQ");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("-infinity");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com/google/javascript/jscomp/mozilla/rhino/Script");
      NodeUtil.getImpureBooleanValue(node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString(100, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber(1889.9969);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Node node0 = Node.newNumber(1889.9969);
      boolean boolean0 = nodeUtil_BooleanResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isConstantName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newString(96, "B80x^:WqnL%o");
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newString("99)}*LT]#wC", (-128), 0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString(100, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newString(96, "B80x^:WqnL%o");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(1072, 1072, 1072);
      Node node1 = NodeUtil.newName(jqueryCodingConvention0, "yyZQ", node0, "yyZQ");
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newString("UffkuV@|S9.(?AHh8*");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newString(0, "b\f");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(1072, 1072, 1072);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "yyZQ", node0, "yyZQ");
      assertEquals(1072, node1.getLineno());
      assertTrue(node1.isName());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
      assertEquals(43, node0.getType());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("Wi ;d^L.=@d}");
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getErrorManager();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodePARAM_LIST
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "b\f");
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newString(164, "n07uN=8!O,H.$");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isSimpleFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString(" M`_?88k](B7i{W");
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(1963.887642787837, (Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "NaN", "NaN");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(9);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "NaN", nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
  }
}

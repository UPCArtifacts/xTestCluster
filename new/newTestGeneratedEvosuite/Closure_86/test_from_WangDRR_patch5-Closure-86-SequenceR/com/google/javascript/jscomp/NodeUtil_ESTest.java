/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 13:26:42 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "L%zm", "L%zm");
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node((-1799));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1799), node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 40);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString(9, "JSC_NODE_TRAVERSAL_ERROR", 91, 40);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(91, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(9, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(91, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(9, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isThis(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog.exportProperty", 833, 833);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(33, node0.getType());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(833, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(833, node0.getCharno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog.exportProperty", 112, 30);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(5, Node.FUNCTION_PROP);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(112, node0.getLineno());
      assertEquals(30, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(33, node0.getType());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}};QDR");
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      
      Node node0 = Node.newNumber((-1.0));
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      assertNotNull(syntheticAst0);
      
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(132, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasOneChild());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: SCRIPT of NUMBER -1.0
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("Hvv", "Hvv");
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isExprAssign(node0);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber((double) 32);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isString(node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isVar(node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(26);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals(26, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals(26, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(1, 734, 1);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(734, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", ".prototype.");
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(125, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = new Node(1, node0, 29, 49);
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(125, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(29, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getType());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node1, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got EOL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NodeUtil");
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      NodeUtil.getExpressionBooleanValue(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      NodeUtil.setDebugInformation(node0, node0, "goog.exportProperty");
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(24);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      MockFile mockFile0 = new MockFile("[{5tn'2RzD\"", "[{5tn'2RzD\"");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/[{5tn'2RzD\"/[{5tn'2RzD\"", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("[{5tn'2RzD\"", mockFile0.getName());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/[{5tn'2RzD\"", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("runtimeTypeCheck", "");
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/[{5tn'2RzD\"/[{5tn'2RzD\"", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("[{5tn'2RzD\"", mockFile0.getName());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/[{5tn'2RzD\"", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.apply(node0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/[{5tn'2RzD\"/[{5tn'2RzD\"", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("[{5tn'2RzD\"", mockFile0.getName());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/[{5tn'2RzD\"", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isQualifiedName());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newName(closureCodingConvention0, "Boo2lean", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isQualifiedName());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(38, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      node0.addChildToBack(node0);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(38, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(38, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("VVZYl3w6f", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(118, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(132, nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertEquals(132, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.newUndefinedNode(node1);
      assertEquals(1, nodeArray0.length);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertEquals(132, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertEquals(122, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isLocalResultCall());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isNoSideEffectsCall());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("IMMEDIATE", "IMMEDIATE");
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(0, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Node node0 = Node.newString("goog.expo~tProperty", 113, (-3401));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newFunctionNode("", vector0, node0, 32, 29);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertFalse(vector0.contains(node0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(105, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertEquals(29, node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.newUndefinedNode(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(vector0.contains(node0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(105, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(32, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertEquals(29, node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(32, node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isLocalResultCall());
      assertEquals(122, node2.getType());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(29, node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertTrue(node2.hasOneChild());
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.defaultCodingConvention;
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(googleCodingConvention0);
      
      Node node0 = Node.newNumber((double) 0, 37, 96);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(96, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(37, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.RhinoException", node0, "long");
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(96, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(37, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(33, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(37, node1.getLineno());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(96, node1.getCharno());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(130, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLocalResultCall());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber((-3375.47758098565), 0, 636);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(636, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(636, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(130, node1.getType());
      assertEquals(636, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isLocalResultCall());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.expo~tProperty", "goog.expo~tProperty");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(125, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertTrue(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(125, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertEquals(130, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_NODE_TRAVERSAL_ERROR");
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_NODE_TRAVERSAL_ERROR", "JSC_NODE_TRAVERSAL_ERROR");
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_NODE_TRAVERSAL_ERROR");
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      
      SyntheticAst syntheticAst0 = new SyntheticAst("JSC_NODE_TRAVERSAL_ERROR");
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Hvv", "Hvv");
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isString(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isStatementBlock(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2>-Q6_%rj}T?[BA", "JSC_NODE_TRAVERSAL_ERROR");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA/JSC_NODE_TRAVERSAL_ERROR", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("JSC_NODE_TRAVERSAL_ERROR", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotNull(compiler0);
      
      SyntheticAst syntheticAst0 = new SyntheticAst("");
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA/JSC_NODE_TRAVERSAL_ERROR", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("JSC_NODE_TRAVERSAL_ERROR", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isObjectCallMethod(node0, " - FUNCTIONS: ");
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA/JSC_NODE_TRAVERSAL_ERROR", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("JSC_NODE_TRAVERSAL_ERROR", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(26);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(26, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isNew(node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(26, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isName(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog.exportProperty", (-1799), (-1799));
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isGetProp(node0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isFunctionExpression(node0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(26);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(26, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isFunction(node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isLocalResultCall());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isExprAssign(node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isLocalResultCall());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(38, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isConstantName(node0);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(38, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.LEFT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isCallOrNew(node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.LEFT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isCall(node0);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isAssignmentOp(node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      Node node0 = Node.newNumber(0.0);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", ".prototype.");
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      boolean boolean0 = NodeUtil.has(node0, compilerOptions0.sourceMapDetailLevel, compilerOptions0.sourceMapDetailLevel);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(125, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(115);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertEquals(115, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = new Node(115, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertEquals(115, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(115, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_NAMESPACE);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertEquals(115, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(115, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals(115, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.hasMoreThanOneChild());
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertSame(node2, node0);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      NodeUtil.getBooleanValue(node0);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_NODE_TRAVERSAL_ERROR");
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_NODE_TRAVERSAL_ERROR", "JSC_NODE_TRAVERSAL_ERROR");
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      assertNotNull(nodeUtil_MatchNotFunction0);
      
      boolean boolean0 = NodeUtil.containsType(node0, (-1054), nodeUtil_MatchNotFunction0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber((-2089.0985915028), (-360), (-360));
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.containsType(node0, 27);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.setDebugInformation((Node) null, node0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.removeChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2839);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2839
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects((Node) null, (AbstractCompiler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.nodeTypeMayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog", 38, 585);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(38, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(585, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      Node node1 = new Node(119, node0, node0, node0, 0, 5278);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(38, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(585, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(119, node1.getType());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertEquals(0, node1.getLineno());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("goog", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.defaultCodingConvention;
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNotNull(googleCodingConvention0);
      
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "jSU{h", (Node) null, "+<rOg**@}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((CodingConvention) null, "Boo2lean", (-1992), (-3948));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.newName((CodingConvention) null, "goog.exportProperty", node0, "78ST_F'#9 ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.newName((CodingConvention) null, (String) null, node0, "}d)!muon1!o7t15<K$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString("JSC_NODE_TRAVERSAL_ERROR", 3536, (-3401));
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("JSC_NODE_TRAVERSAL_ERROR", (List<Node>) null, node0, 113, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      Node node1 = new Node(31, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertEquals(31, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      ImmutableMultimap<Integer, Node> immutableMultimap0 = ImmutableMultimap.of((Integer) 1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertEquals(31, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, immutableMultimap0.size());
      assertFalse(immutableMultimap0.isEmpty());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(immutableMultimap0);
      
      LinkedListMultimap<Integer, Node> linkedListMultimap0 = LinkedListMultimap.create((Multimap<? extends Integer, ? extends Node>) immutableMultimap0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertEquals(31, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, immutableMultimap0.size());
      assertFalse(immutableMultimap0.isEmpty());
      assertFalse(linkedListMultimap0.isEmpty());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(linkedListMultimap0);
      
      List<Node> list0 = linkedListMultimap0.removeAll(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(list0.contains(node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertEquals(31, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, immutableMultimap0.size());
      assertFalse(immutableMultimap0.isEmpty());
      assertFalse(linkedListMultimap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode(".prototype.", list0, node0, 25, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isWithinLoop((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isVar((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isTryFinallyNode((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isString((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatementBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isStatement((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(38, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isReferenceName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypeProperty((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber((double) 29);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isObjectLitKey(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isObjectCallMethod((Node) null, "Boo2lean");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isNew((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced((Node) null, "NaN", predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog", 124, 585);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(124, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(585, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(38, node0, 141, 827);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(124, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(585, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(38, node1.getType());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isLocalResultCall());
      assertEquals(141, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isQualifiedName());
      assertEquals(827, node1.getCharno());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced(node1, "-p,");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 141 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced((Node) null, ".prototype.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLoopStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue((Node) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLhs((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isLatin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isImmutableValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGetOrSetKey((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isGet((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCallOrApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("IMMEDIATE", "IMMEDIATE");
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertNotNull(node0);
      
      Vector<Node> vector0 = new Vector<Node>(76, 147);
      assertFalse(vector0.contains(node0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(76, vector0.capacity());
      assertNotNull(vector0);
      
      Node node1 = NodeUtil.newFunctionNode("IMMEDIATE", vector0, node0, 39, 41);
      assertFalse(node1.equals((Object)node0));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(vector0.contains(node0));
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(76, vector0.capacity());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertEquals(105, node1.getType());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(39, node1.getLineno());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionExpression(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isForIn((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isExpressionNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isConstantName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertNotNull(node0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.defaultCodingConvention;
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNotNull(googleCodingConvention0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isConstantByConvention(googleCodingConvention0, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LP is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isCallOrNew((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isAssign((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NaN);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertNotNull(node0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      // Undeclared exception!
      try { 
        NodeUtil.has(node0, compilerOptions0.sourceMapDetailLevel, compilerOptions0.sourceMapDetailLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getStringValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(2, 1, 89);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.BOTH);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(2, node0.getType());
      assertEquals(89, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [sourcename: java.lang.String@0000000426] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("IMMEDIATE", "IMMEDIATE");
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [sourcename: java.lang.String@0000000421] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node((-1976), 0, 112);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(112, node0.getCharno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1976), node0.getType());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getCount(node0, (Predicate<Node>) null, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction((Node) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, 2697);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got SCRIPT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      MockFile mockFile0 = new MockFile("2>-Q6_%rj}T?[BA", "JSC_NODE_TRAVERSAL_ERROR");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA/JSC_NODE_TRAVERSAL_ERROR", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("JSC_NODE_TRAVERSAL_ERROR", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(compiler0);
      
      SyntheticAst syntheticAst0 = new SyntheticAst("");
      assertNotNull(syntheticAst0);
      
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA/JSC_NODE_TRAVERSAL_ERROR", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("JSC_NODE_TRAVERSAL_ERROR", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/mmartinez/xTestCluster/tool_xTestCluster/2>-Q6_%rj}T?[BA", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT [sourcename: java.lang.String@0000000047]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsType((Node) null, (-3684));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "goog.exportProperty", sourceMap_DetailLevel0);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.acceptEcmaScript5());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(132, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog.exportProperty", (-1799), (-1799));
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(1, "4", 9, 2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isQualifiedName());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(9, node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals(1, node0.getType());
      assertNotNull(node0);
      
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertNotNull(node0);
      
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString("G4u.CfII(.", 2276, 100);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isVarArgs());
      assertEquals(2276, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(100, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString("SAFE_TO_FOLD_WITH_ARGS");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_NAMESPACE);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.BOTH);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(1, 734, 1);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getType());
      assertEquals(734, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      assertNotNull(predicate0);
      
      int int0 = NodeUtil.getCount(node0, predicate0, predicate0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getType());
      assertEquals(734, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isQualifiedName());
      assertNotNull(node0);
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(38, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1820), (-1820));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "Boo2lean");
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(83, node0.getType());
      assertNotNull(node0);
      
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(112, node0, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isSyntheticBlock());
      assertTrue(node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isOptionalArg());
      assertEquals(112, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLocalResultCall());
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.newVarNode("+7(),", node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("EXPR_VOID", (Node) null);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(118, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNotNull(closureCodingConvention0);
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals((-1), node0.getCharno());
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.FREE_CALL);
      assertEquals(39, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals((-1), node0.getCharno());
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("0KK<qjEG7sFdGk+66_#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("ijHdA`6S6][z!3e;{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_NODE_TRAVERSAL_ERROR", "JSC_NODE_TRAVERSAL_ERROR");
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.defaultCodingConvention;
      Node node1 = NodeUtil.newName(googleCodingConvention0, "JSC_NODE_TRAVERSAL_ERROR", node0, "jSU{h");
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode(".prototype.", ".prototype.");
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(codingConvention0, "IMMEDIATE", node0, ".prototype.");
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.rhino.jstype.AllType", (-1799), (-1799));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.newFunctionNode("applicationClassLoader can only be set once", linkedList0, node0, (-1), (-1023));
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog.exportProperty", 833, 833);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(833, node0.getCharno());
      assertEquals(33, node0.getType());
      assertEquals(833, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 119: WITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertNotNull(string0);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 34: SETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("Boolean", "IMMEDIATE");
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.exportProperty", "goog.exportProperty");
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = NodeUtil.newVarNode("JSC_NODE_TRAVERSAL_ERROR", node0);
      boolean boolean0 = NodeUtil.isLhs(node1, node1);
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("arguments", "arguments");
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      Node node1 = NodeUtil.newFunctionNode("goog.expo~tProperty", vector0, node0, 0, (-2));
      // Undeclared exception!
      try { 
        SimpleDefinitionFinder.getNameNodeFromFunctionNode(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      Node node1 = NodeUtil.newFunctionNode("goog.expo~tProperty", vector0, node0, 0, (-2));
      assertEquals(105, node1.getType());
      
      NodeUtil.getArgumentForFunction(node1, 33);
      assertEquals(3, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(9);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: BITOR of BITOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.expo~tProperty", "goog.expo~tProperty");
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber((-531.768831326), 11, (-226));
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = NodeUtil.newVarNode("JSC_NODE_TRAVERSAL_ERROR", node0);
      assertEquals(118, node1.getType());
      
      boolean boolean0 = NodeUtil.isStatement(node0);
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.expo~tProperty", "goog.expo~tProperty");
      assertEquals(7, Node.LOCAL_PROP);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NAME Boo2lean does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "goog", 124, 585);
      Node node1 = new Node(119, node0, node0, node0, 0, 5278);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node1);
      assertEquals(124, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(585, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode(".prototype.", "goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(112, node0, node0, node0);
      boolean boolean0 = NodeUtil.isControlStructure(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(811.491987156);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = new Node(115);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = new Node(1, 734, 1);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node((-1219), (-1219), 122);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      String string0 = googleCodingConvention0.extractClassNameIfRequire(node0, node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), 833);
      Node node1 = new Node((-1078), node0, node0, node0);
      assertEquals(38, node0.getType());
      
      NodeUtil.getAssignedValue(node0);
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), 833);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(811.491987156);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(21);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      Node node1 = NodeUtil.newFunctionNode("goog.expo~tProperty", vector0, node0, 0, (-2));
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("NaN");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boo2lean", (-1799), (-1799));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newNumber(162.24, (-360), (-360));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeFOR 115
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString("Boo2lean", 16, (-1510));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newNumber((double) 36, (-21), 16);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(26);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode(".prototype.", ".prototype.");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", 112, 19);
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.expo~tProperty", "goog.expo~tProperty");
      boolean boolean0 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", 112, 19);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("goog.expo~tProperty", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.expo~tProperty", "goog.expo~tProperty");
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.getExpressionBooleanValue(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString("Lu}(ry", 16, (-1510));
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      NodeUtil.getExpressionBooleanValue(node0);
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newNumber(2.0, 63, 63);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newString(8292, "[im}8TS");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      int int0 = NodeUtil.getNameReferenceCount(node0, "L'-CVdt4=_vr6NSw");
      assertEquals(122, node0.getType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Boo2lean", (-1799), (-1799));
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString("goog.expo~tProperty", (-3401), 113);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 33);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("goog.exportProperty");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got SCRIPT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Boolean", (-1799), (-1799));
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(12, 12, 12);
      Collection<Node> collection0 = NodeUtil.getVarsDeclaredInBranch(node0);
      assertFalse(collection0.contains(node0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("IMMEDIATE", "IMMEDIATE");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("arguments", "arguments");
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("IMMEDIATE", "IMMEDIATE");
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("goog.exportProperty", "goog.exportProperty");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_NODE_TRAVERSAL_ERROR");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_NODE_TRAVERSAL_ERROR", "JSC_NODE_TRAVERSAL_ERROR");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "com.google.javascript.jscomp.mozilla.rhino.ast.Assignment", nodeUtil_MatchShallowStatement0);
      assertFalse(boolean0);
  }
}

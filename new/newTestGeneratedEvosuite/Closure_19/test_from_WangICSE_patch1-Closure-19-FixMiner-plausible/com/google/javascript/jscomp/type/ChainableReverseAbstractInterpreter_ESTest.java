/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 04:17:32 GMT 2022
 */

package com.google.javascript.jscomp.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChainableReverseAbstractInterpreter_ESTest extends ChainableReverseAbstractInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node.newNumber((-1.0));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry3);
      modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", true);
      JSTypeNative jSTypeNative1 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isNullType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention2 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", false);
      JSTypeNative jSTypeNative1 = JSTypeNative.DATE_TYPE;
      JSType jSType1 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative1);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry2.createNamedType("}z$5UekKI", "df=Ob", (-97), (-769));
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      Node node0 = Node.newString((-97), "}z$5UekKI");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("function", node0, jSType0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByOneTypeOfResultVisitor", true);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "]KRc{`", (-1879783279), (-13));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createFunctionType((ObjectType) parameterizedType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("--K;Td/", (Node) null, parameterizedType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getElementsType();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(functionType0, "undefined", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(parameterizedType0);
      assertFalse(jSType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "]KRc{`", (-1879783279), (-13));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createFunctionType((ObjectType) parameterizedType0, (JSType) parameterizedType0, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", (Node) null, parameterizedType0);
      enumType0.toMaybeEnumType();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(functionType0, "undefined", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(parameterizedType0);
      assertSame(jSType1, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", true);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      assertFalse(jSType1.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention2 = new JqueryCodingConvention(jqueryCodingConvention1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", true);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType0);
      JSType jSType2 = semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType1);
      assertFalse(jSType2.isNoType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("/OI:Qr=", "/OI:Qr=", (-769), (-769));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "toString", true);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, jSType1);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(parameterizedType0, "function", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, jSType0);
      ParameterizedType parameterizedType1 = parameterizedType0.toMaybeParameterizedType();
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(parameterizedType1, "Unknown class name", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      Node node0 = Node.newString((-1954482143), "Named type with empty name component", 0, (-775));
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_PROTOTYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      assertSame(semanticReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(33, "Unknown class name", (-1956582452), (-1848));
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      EnumType enumType0 = jSTypeRegistry2.createEnumType("f`e", node0, jSType0);
      enumType0.isNumber();
      semanticReverseAbstractInterpreter0.getFirst();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      closureReverseAbstractInterpreter2.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter2.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter1.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(33, "Unknown class name", (-1956582452), 33);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      EnumType enumType0 = jSTypeRegistry2.createEnumType("f`e", node0, jSType0);
      enumType0.isNumber();
      semanticReverseAbstractInterpreter0.getFirst();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      closureReverseAbstractInterpreter2.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter1.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "string", (-1879783279), 2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(2, "]KRc{`");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscop.type.ChainableReerseAbstractInterpreter", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.resolve(simpleErrorReporter0, enumType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      enumType1.canTestForEqualityWith(enumType0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Unknown class name", true);
      enumType1.forceResolve(simpleErrorReporter0, enumType1);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(enumType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      assertFalse(semanticReverseAbstractInterpreter2.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("string", "oY]ssK3nrg", (-495156790), (-495156790));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      jSTypeRegistry0.createNullableType(jSType0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "}", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      semanticReverseAbstractInterpreter2.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$1", 0, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType1 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(enumElementType0);
      assertTrue(jSType1.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.getType("undefined");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("STRING_OBJECT_FUNCTION_TYPE", node0, jSType0);
      enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry2);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, (String) null, true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
      assertFalse(jSType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber((-945.591));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(jSType1);
      semanticReverseAbstractInterpreter2.getRestrictedByTypeOfResult(enumElementType0, "Named type with empty name component", false);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      assertSame(semanticReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "string", (-1879783279), 2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(2, "]KRc{`");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscop.type.ChainableReerseAbstractInterpreter", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      enumType1.canTestForEqualityWith(enumType0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Unknown class name", true);
      enumType1.forceResolve(simpleErrorReporter0, enumType1);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(enumType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      assertFalse(semanticReverseAbstractInterpreter2.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      String string0 = "]\\KRc{`";
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "string", (-1879783279), 2);
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "boolean", true);
      jSTypeArray0[3] = jSType1;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        Node.newString(1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.getType("boolean");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "8)xq", false);
      semanticReverseAbstractInterpreter0.getFirst();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber((-945.591));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      EnumType enumType0 = jSTypeRegistry1.createEnumType("", node0, jSType0);
      enumType0.getElementsType();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.getAssertionFunctions();
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry4 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry4);
      enumType0.collapseUnion();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isRecordType());
  }

//   @Test(timeout = 4000)
//   public void test019()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
//       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
//       JSType jSType0 = jSTypeRegistry0.getType("boolean");
//       GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
//       JSType jSType1 = jSTypeRegistry1.createNullableType(jSType0);
//       JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "boolean", false);
//       assertNull(jSType2);
//       
//       JSType jSType3 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
//       assertFalse(jSType3.isNoResolvedType());
//   }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node.newString("]KRc{`");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) null;
      jSTypeArray0[2] = jSType0;
      jSTypeRegistry1.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      jSType0.getPossibleToBooleanOutcomes();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseBooleanType();
      jSType0.hasAnyTemplate();
      JSType jSType2 = jSTypeRegistry1.createNullableType(jSType1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType2, "Named type with empty name component", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType3 = modificationVisitor0.caseNoType();
      JSType jSType4 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType3);
      assertTrue(jSType4.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("string", "oY]ssK3nrg", (-495156790), (-495156790));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "TlKJE$+Ey{d&480I69", true);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(unknownType0);
      jSType_TypePair0.typeA.getPossibleToBooleanOutcomes();
      unknownType0.hasOwnProperty("`'ptegRmEb{aIo0l");
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unknownType0, "Not declared as a constructor", false);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType_TypePair0.typeA, "string", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      NullType nullType0 = (NullType)modificationVisitor0.caseNullType();
      modificationVisitor0.caseAllType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(nullType0, "W71%5", true);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType_TypePair0.typeB);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      assertFalse(semanticReverseAbstractInterpreter1.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "string", (-1879783279), 3);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "string", true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertFalse(jSType1.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType("string", "string", (-495156790), (-495156790));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "undefined", true);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      assertFalse(semanticReverseAbstractInterpreter1.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.getType("Sei_vI1;m@Vqw");
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "toString", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry3);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "number", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("}n2_BW-dJ", "", 38, (-495156790));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "number", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      jSTypeRegistry0.createNullableType(jSType1);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "com.google.javascript.rhino.jstype.InstanceObjectType", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType2 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      jSType2.differsFrom(jSType1);
      JSType jSType3 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType3.isInterface());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention2 = new JqueryCodingConvention(jqueryCodingConvention1);
      jSType0.matchesObjectContext();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      modificationVisitor0.caseNoObjectType();
      JSType jSType1 = jSType0.collapseUnion();
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "Unknown class name", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      assertFalse(semanticReverseAbstractInterpreter2.equals((Object)semanticReverseAbstractInterpreter1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseNullType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "3gFhvTE\"9su*s\"yPe", true);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "m;/c]NS^FJ%]v7B`aT", true);
      closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      assertSame(closureReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      Node node0 = Node.newNumber((-945.591));
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry2);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      node0.getInputId();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(closureCodingConvention0);
      JSTypeRegistry jSTypeRegistry4 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry4);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter2.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("this:", node0, jSType1);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber((-945.591));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "G(71\"x%\u0001l9x0'4OO", true);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter1.getFirst();
      assertSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.createNamedType(".aG8x1", ".aG8x1", (-495156790), (-1505));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "objdect", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Named type with empty name component", (Node) null, jSType1);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "M}/+N+'`7x0F", false);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.getType("boolean");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "SA8$PM@", false);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "boolean", true);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalType((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, (String) null, true);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(closureCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter2);
      semanticReverseAbstractInterpreter3.getRestrictedWithoutNull((JSType) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter4 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry2);
      JSType.toMaybeFunctionType((JSType) null);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "function", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter5 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry2);
      JSType jSType1 = semanticReverseAbstractInterpreter5.getRestrictedWithoutNull((JSType) null);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "function", true);
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      assertFalse(jSType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      JSType jSType1 = modificationVisitor0.caseNullType();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, (String) null, true);
      JSTypeNative jSTypeNative1 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      Node node0 = Node.newNumber((-2467.050794));
      Node node1 = new Node(1, node0, node0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node1, jSType0);
      enumType0.getElementsType();
      JSType jSType2 = modificationVisitor0.caseNoType();
      JSType jSType3 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType2);
      assertFalse(jSType3.isVoidType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node.newString(0, "Named type with empty name component");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType jSType1 = modificationVisitor0.caseStringType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a constructor", true);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention2 = new ClosureCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention2, jSTypeRegistry1);
      assertFalse(semanticReverseAbstractInterpreter1.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry1.createNamedType("oY]ssK3nrg", "/)GNnP&", (-495156790), 427);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "BOTH", true);
      JSType.TypePair jSType_TypePair0 = jSType1.getTypesUnderInequality(jSType0);
      jSType_TypePair0.typeA.getPossibleToBooleanOutcomes();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType_TypePair0.typeA, ")b+dUC", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      JSType jSType2 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType_TypePair0.typeA);
      assertFalse(boolean0);
      
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType2);
      JSType jSType3 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType_TypePair0.typeA);
      JSType jSType4 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType3);
      assertNotSame(jSType4, jSType3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry1.createNamedType("}n2_BW-dJ", "}n2_BW-dJ", (-495156790), (-495156790));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = jSTypeRegistry1.createNullableType(jSType0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "}", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertFalse(semanticReverseAbstractInterpreter1.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
      JSType.TypePair jSType_TypePair0 = jSType1.getTypesUnderInequality(jSType0);
      jSType_TypePair0.typeB.getPossibleToBooleanOutcomes();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter3.append(closureReverseAbstractInterpreter0);
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter2);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter4 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry3);
      semanticReverseAbstractInterpreter4.append(semanticReverseAbstractInterpreter2);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType_TypePair0.typeB);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter5 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      assertFalse(semanticReverseAbstractInterpreter5.equals((Object)semanticReverseAbstractInterpreter2));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber((-1.0));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("?9_;T9`Q's", node0, jSType0);
      enumType0.getElementsType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "ALL_TYPE", false);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter2.getFirst();
      assertSame(semanticReverseAbstractInterpreter2, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString((-1848), ")b+dUC", 1, 1734);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((-1781.7));
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType0.toMaybeEnumType();
      enumType1.isDateType();
      Node node1 = new Node(33);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.DATE_FUNCTION_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      Node node0 = Node.newString(33, "Named type with empty name component", 1433, 1);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString("]KRc{`");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "T%Y's@", false);
      JSType jSType1 = enumType1.forceResolve(simpleErrorReporter0, enumType0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.getAssertionFunctions();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "97y*:O", false);
      JSType jSType2 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType1);
      JSType jSType3 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(enumType1);
      assertSame(jSType3, jSType2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node.newNumber((-945.591));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSType0.getJSDocInfo();
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "feZE^(8zVjC(", false);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      assertFalse(semanticReverseAbstractInterpreter2.equals((Object)semanticReverseAbstractInterpreter1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString("]KRc{`");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "T%Y's@", false);
      enumType1.forceResolve(simpleErrorReporter0, enumType0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, "Mv_o:]36", true);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(enumType1, "Named type with empty name component", true);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      assertFalse(semanticReverseAbstractInterpreter3.equals((Object)semanticReverseAbstractInterpreter2));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString("]KRc{`");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "T%Y's@", false);
      enumType1.forceResolve(simpleErrorReporter0, enumType0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, "Mv_o:]36", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry1.createEnumType("'\u0001=qg'gjr", node0, jSType0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      assertFalse(semanticReverseAbstractInterpreter3.equals((Object)semanticReverseAbstractInterpreter2));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      JSType jSType1 = modificationVisitor0.caseNullType();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, (String) null, true);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "?Cd$8uP", true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertFalse(jSType2.isInterface());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry1.createNamedType("}n2_BW-dJ", "object", (-495156790), 427);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "X..xUs.]}K1ii6e+Qz", true);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(jSType1);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry1.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      functionType0.getPossibleToBooleanOutcomes();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType2 = jSTypeRegistry1.createNullableType(jSType0);
      JSType jSType3 = semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType2, "}", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType4 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      jSType3.differsFrom(jSType_TypePair0.typeA);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType4);
      JSType jSType5 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType4);
      assertFalse(jSType5.isResolved());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "95o\"TBNsCRVB'&6h8", false);
      JSType jSType2 = jSTypeRegistry1.createDefaultObjectUnion(jSType1);
      JSType.TypePair jSType_TypePair0 = jSType2.getTypesUnderInequality(jSType0);
      jSType_TypePair0.typeB.getPossibleToBooleanOutcomes();
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType_TypePair0.typeA, "INHERITS", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter2.append(semanticReverseAbstractInterpreter1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter4 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter4.append(semanticReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      JSType jSType3 = semanticReverseAbstractInterpreter2.getNativeType(jSTypeNative0);
      jSType_TypePair0.typeA.differsFrom(jSType_TypePair0.typeB);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter5 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter5.getRestrictedWithoutNull((JSType) null);
      JSType jSType4 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType3);
      assertFalse(jSType4.isRecordType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString("VlXGRj!y\"r", 2, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("oY]ssK3nrg", node0, jSType0);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.isNumber();
      Node node1 = new Node(32, node0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString("?Cd$8uP", 0, 1);
      jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("?Cd$8uP", node0, jSType0);
      jSType0.getTypesUnderEquality(enumType0);
      enumType0.isNumber();
      Node node1 = new Node(0, node0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, enumType0);
      enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      node1.getBooleanProp(29);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType1);
      semanticReverseAbstractInterpreter2.getRestrictedByTypeOfResult(jSType1, "oj", false);
      semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter2);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("string", node1, (ObjectType) enumElementType0);
      enumType1.differsFrom(objectType0);
      JSType jSType2 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType2.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", true);
      JSType jSType2 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      assertFalse(jSType2.isNullType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeRegistry0.createOptionalNullableType(jSType0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", true);
      assertEquals(BooleanLiteralSet.EMPTY, jSType1.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newNumber(0.0, 0, 907);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.isNumber();
      Node node1 = Node.newNumber(1070.9);
      EnumType enumType2 = enumType1.toMaybeEnumType();
      EnumType enumType3 = enumType2.toMaybeEnumType();
      EnumType enumType4 = enumType0.toMaybeEnumType();
      enumType4.isDateType();
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      JSType jSType2 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType1, "Not declared as a type name");
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType2, "Not declared as a type name", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter1 = semanticReverseAbstractInterpreter1.append(chainableReverseAbstractInterpreter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter1.append(chainableReverseAbstractInterpreter1);
      NumberType numberType0 = (NumberType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(numberType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(enumType3);
      semanticReverseAbstractInterpreter3.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1092, "Named type with empty name component", (-358), (-358));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((double) 47);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType0.isDateType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = new Node(38, 4, (-2073794324));
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter2.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter2);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry1.createParametersWithVarArgs(jSTypeArray0);
      EnumType enumType0 = jSTypeRegistry2.createEnumType((String) null, node0, jSType0);
      enumType0.toMaybeEnumType();
      semanticReverseAbstractInterpreter1.getFirst();
      node0.getInputId();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative1 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(enumType0);
      jSTypeRegistry0.createEnumType("undefined", node0, enumType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter3.getRestrictedWithoutUndefined(enumElementType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.getType("]KRc{`");
      closureCodingConvention0.getAssertionFunctions();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "#", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "end index", true);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, (Node) null, jSType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(38, "Unknown class name", 38, (-1848));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.isNumber();
      Node node1 = Node.newNumber((-945.591));
      enumType0.toMaybeEnumType();
      enumType0.toMaybeEnumType();
      semanticReverseAbstractInterpreter0.getFirst();
      node1.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, enumType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(38, "Unknown class name", 38, (-1848));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.isNumber();
      semanticReverseAbstractInterpreter0.getFirst();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, enumType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isConstructor());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString("?Cd$8uP", 0, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("?Cd$8uP", node0, jSType0);
      enumType1.isNumber();
      Node node1 = new Node(0, node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(enumType0, "{, z|", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      AllType allType0 = (AllType)modificationVisitor0.caseAllType();
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(allType0);
      node0.clonePropsFrom(node1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined((JSType) null);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      String string0 = "?Cd$8uP";
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-1728069263), 2443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString("?Cd$8uP", 0, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("?Cd$8uP", node0, jSType0);
      enumType1.isNumber();
      Node node1 = new Node(0, node0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType0, "[t'ctz-n:", false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
      semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter1);
      JSTypeNative jSTypeNative1 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      JSType jSType2 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType3 = closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType2);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((double) 43);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumType enumType2 = enumType0.toMaybeEnumType();
      enumType2.toMaybeEnumType();
      EnumType enumType3 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType3.getElementsType();
      Node.newNumber(1233.426021279);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NO_TYPE;
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry2);
      semanticReverseAbstractInterpreter3.getRestrictedWithoutNull(enumType1);
      EnumElementType enumElementType1 = (EnumElementType)semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(enumElementType0);
      assertFalse(enumElementType1.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      jSType0.isInstanceType();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      jSDocInfo0.addSuppression(";h*qCwW2nw([>v");
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getTypeIfRefinable((Node) null, (FlowScope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      simpleErrorReporter0.error("string", "4!jgQBEF5v", 964, 964);
      JSType jSType0 = modificationVisitor0.caseNullType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      NullType nullType0 = (NullType)semanticReverseAbstractInterpreter3.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(nullType0);
      NullType nullType1 = (NullType)semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(nullType0);
      assertFalse(nullType1.isEnumType());
  }

//   @Test(timeout = 4000)
//   public void test067()  throws Throwable  {
//       ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
//       JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
//       JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
//       JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
//       ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
//       JSType jSType1 = modificationVisitor0.caseVoidType();
//       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
//       JSType jSType2 = jSType0.getLeastSupertype(jSType1);
//       semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType0);
//       jSTypeRegistry1.createNullableType(jSType2);
//       JSType jSType3 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType2, "Named type with empty name component", false);
//       assertNull(jSType3);
//   }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("}EbJqF]0t{", "TCG}RNl_rQz%O", 306654252, (-1186292591));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((double) 43);
      enumType0.toMaybeEnumType();
      enumType0.toMaybeEnumType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.getFirst();
      node0.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative1 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType0);
      UnionType unionType1 = (UnionType)semanticReverseAbstractInterpreter3.getRestrictedWithoutUndefined(unionType0);
      assertFalse(unionType1.isNullType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(jqueryCodingConvention1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "function", false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      assertSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Named type with empty name component", true);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "<<=", false);
      assertFalse(jSType1.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node node1 = Node.newNumber((double) 44);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumType enumType2 = enumType1.toMaybeEnumType();
      enumType2.toMaybeEnumType();
      enumType0.isDateType();
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Unknown class name", false);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter1 = semanticReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test073()  throws Throwable  {
//       ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
//       ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
//       Node node0 = Node.newString("]KRc{`");
//       Node node1 = new Node(101, node0, node0, 43, 388);
//       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
//       JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
//       EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node1, jSType0);
//       EnumType enumType1 = enumType0.toMaybeEnumType();
//       EnumElementType enumElementType0 = enumType1.getElementsType();
//       Node node2 = Node.newNumber((double) 4095);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
//       semanticReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
//       JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
//       enumElementType0.matchesStringContext();
//       semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
//       GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
//       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
//       FlowScope flowScope0 = semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
//       boolean boolean0 = true;
//       FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, flowScope0, boolean0);
//       semanticReverseAbstractInterpreter2.getTypeIfRefinable(node0, flowScope1);
//       semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(enumElementType0);
//       JSType jSType1 = null;
//       semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType1);
//   }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "oY]ssK3nrg", (-495156790), 427);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "oY]ssK3nrg", true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) linkedList0);
      functionType0.getTypesUnderInequality(jSType0);
      functionType0.getPossibleToBooleanOutcomes();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(functionType0, "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull((JSType) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined((JSType) null);
      JSTypeNative jSTypeNative1 = JSTypeNative.ALL_TYPE;
      AllType allType0 = (AllType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      assertFalse(allType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      Node node0 = Node.newString("]KRc{`");
      Node node1 = new Node(101, node0, node0, 43, 396);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.newNumber((-1436.0));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      StringType stringType0 = (StringType)semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      assertFalse(stringType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString("?Cd$8uP", 0, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      EnumType enumType2 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, enumType1);
      EnumType enumType3 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, enumType0);
      enumType3.isNumber();
      enumType2.isUnknownType();
      Node.newNumber((-3050.0));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "[t'ctz-n:", true);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "?Cd$8uP", true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry2);
      semanticReverseAbstractInterpreter1.append(closureReverseAbstractInterpreter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(enumType0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      JSType jSType1 = modificationVisitor0.caseBooleanType();
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType1);
      assertFalse(jSType2.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      //  // Unstable assertion: assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType jSType0 = jSTypeRegistry0.getType("undefined");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry2.createNullableType(jSType0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      assertFalse(semanticReverseAbstractInterpreter1.equals((Object)semanticReverseAbstractInterpreter0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString((-674), "Kl%xlo+qEZ-`3;", (-674), 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("bz8G #}qbMH+1og8", node0, jSType0);
      enumType0.isNumber();
      enumType0.isUnknownType();
      Node.newNumber(61.226674);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseVoidType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Not declared as a type name", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative1 = JSTypeNative.GLOBAL_THIS;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType1);
      EnumType enumType1 = (EnumType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumType0);
      assertTrue(enumType1.isObject());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber((-945.591));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType1);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType2 = semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(enumElementType0);
      assertSame(enumElementType0, jSType2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      Node node0 = Node.newString("]KRc{`");
      Node node1 = new Node(101, node0, node0, 43, 396);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node1, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      simpleErrorReporter0.error("number", "Not declared as a type name", (-1796573331), 1083);
      Node.newNumber((double) 4095);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(functionType0, "Named type with empty name component", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter4 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      EnumElementType enumElementType1 = (EnumElementType)semanticReverseAbstractInterpreter4.getRestrictedWithoutNull(enumElementType0);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutNull((JSType) null);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType1);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter3.append(semanticReverseAbstractInterpreter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      enumType0.isUnknownType();
      Node.newNumber((-2559.41204270836));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter1.append(closureReverseAbstractInterpreter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative1 = JSTypeNative.BOOLEAN_TYPE;
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter3.getRestrictedWithoutNull(jSType0);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined((JSType) null);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(noObjectType0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(googleCodingConvention0);
      semanticReverseAbstractInterpreter2.getRestrictedByTypeOfResult(noObjectType0, "RNnM|I", true);
      semanticReverseAbstractInterpreter1.getFirst();
      NoObjectType noObjectType1 = (NoObjectType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(noObjectType0);
      assertTrue(noObjectType1.matchesStringContext());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString((-2510), "undefined", 1778, (-2189));
      Node node1 = new Node((-1525), node0, 1, (-495156790));
      Node node2 = new Node(5760, node1);
      closureCodingConvention0.extractClassNameIfRequire(node2, node2);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertTrue(jSType1.matchesNumberContext());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
      semanticReverseAbstractInterpreter0.getFirst();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertTrue(jSType1.equals((Object)jSType0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "a", (-273), 1531);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      Node node0 = new Node(569, (-2054553589), 989);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "cTQD#sn3=[S-NR@8-o", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Not declared as a constructor", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(unionType0);
      FunctionType functionType1 = (FunctionType)semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(functionType0);
      assertFalse(functionType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("]KRc{`");
      Node node1 = new Node(46, node0, node0, 43, 388);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      enumType1.collapseUnion();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
      assertFalse(jSType1.isRecordType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      Node node0 = Node.newString("]KRc{`");
      Node node1 = new Node(101, node0, node0, 43, 396);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node1, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      Node.newNumber((double) 4095);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(functionType0, "Named type with empty name component", true);
      semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter3.getRestrictedWithoutNull(enumElementType0);
      JSType jSType0 = semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined((JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", "a", (-280), 1531);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      Node node0 = new Node(569, (-2054553589), 989);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "cTQD#sn3=[S-NR@8-o", false);
      JSType.TypePair jSType_TypePair0 = jSType1.getTypesUnderInequality(functionType0);
      jSType_TypePair0.typeB.getPossibleToBooleanOutcomes();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType_TypePair0.typeB, "Named type with empty name component", true);
      assertNull(jSType2);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createDefaultObjectUnion(jSType_TypePair0.typeA);
      UnknownType unknownType1 = (UnknownType)semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(jSType_TypePair0.typeA);
      assertSame(unknownType1, unknownType0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSTypeNative jSTypeNative1 = JSTypeNative.REGEXP_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      Node node0 = Node.newString((-2054553589), "Not declared as a constructor", 0, (-2054553589));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("Unknown class name", node0, enumType0);
      enumType1.isNumber();
      enumType1.isUnknownType();
      Node.newNumber(22.72744);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(enumType0, "T]v oOgp+L#p`PDlZ", true);
      assertNull(jSType1);
      
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumType0);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType0);
      assertSame(semanticReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
      assertNotSame(semanticReverseAbstractInterpreter1, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("]KRc{`", "string", (-1879783279), 2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(0, "]KRc{`");
      Node node1 = new Node(1, node0, node0, node0, 39, 54);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumType enumType2 = enumType1.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Unknown class name", true);
      JSType jSType1 = enumType1.forceResolve(simpleErrorReporter0, enumType2);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Pw{Y9:2gCU", false);
      JSType jSType2 = jSTypeRegistry0.createOptionalType(enumType0);
      assertFalse(jSType2.isAllType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node.newString("]KR]{*");
      Node node0 = Node.newString(31, "]KR]{*");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Unknown class name", false);
      //  // Unstable assertion: assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      Node node0 = Node.newString("]KRc{`");
      Node node1 = new Node(101, node0, node0, 43, 396);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("gnbMA5|y{&zMGev#Ut", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSType.TypePair jSType_TypePair0 = enumElementType0.getTypesUnderInequality(enumType1);
      JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
      jSType1.getPossibleToBooleanOutcomes();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType_TypePair0.typeA, "Unknown class name", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        chainableReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(38, "?Cd$8uP", 38, (-1848));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((double) 43);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType0.toMaybeEnumType();
      enumType1.isDateType();
      FlowScope flowScope0 = null;
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(38, "Unknown class name", 38, (-1848));
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        ((SemanticReverseAbstractInterpreter) chainableReverseAbstractInterpreter0).getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, (-3307), (-3307));
      node0.getJSType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a type name", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      assertFalse(jSType2.isAllType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node.newString("]KRc{`");
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isNominalType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node.newString(41, "Unknown class name", 0, 1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) enumType0, node0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", node0, functionType0);
      ObjectType objectType0 = enumType1.getImplicitPrototype();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, "Named type with empty name component", false);
      //  // Unstable assertion: assertNull(jSType1);
      
      JSType.TypePair jSType_TypePair0 = enumType1.getTypesUnderInequality(enumType0);
      jSType_TypePair0.typeA.getPossibleToBooleanOutcomes();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType2 = enumElementType0.getPrimitiveType();
      JSType jSType3 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType2, "Named type with empty name component", true);
      //  // Unstable assertion: assertNull(jSType3);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative1 = JSTypeNative.GLOBAL_THIS;
      semanticReverseAbstractInterpreter3.getNativeType(jSTypeNative1);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType2);
      //  // Unstable assertion: assertNotSame(semanticReverseAbstractInterpreter0, semanticReverseAbstractInterpreter2);
      //  // Unstable assertion: assertSame(semanticReverseAbstractInterpreter1, semanticReverseAbstractInterpreter2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("LcOHG//8 dE@*b(Q", "a", 1524, 3);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.getFirst();
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "Named type with empty name component", true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      enumType0.isUnknownType();
      Node.newNumber((-2559.41204270836));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "/=}0Pmbt(keVG", true);
      assertNull(jSType1);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(enumType0);
      assertSame(semanticReverseAbstractInterpreter2, semanticReverseAbstractInterpreter1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry2);
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "eZO(>j.\"xsQ", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("LcOHG//8 dE@*b(Q", "a", 1524, 3);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      Node node0 = Node.newString(1524, "", (-1971311820), 0);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType(jSType0, node0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(functionType0, (String) null, false);
      jSType0.getTypesUnderInequality(functionType0);
      functionType0.getPossibleToBooleanOutcomes();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry1.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("*r#K]y{+2BIK2qMY}6", node0, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.toMaybeEnumType();
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(functionType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter2.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      Node node0 = new Node(32, 32, 32);
      closureReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeRegistry0.overwriteDeclaredType("boolean", functionType0);
      jSTypeRegistry0.getType((StaticScope<JSType>) objectType0, "Named type with empty name component", "/)GNnP&", 1, (-1008));
      semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(functionType0);
      assertSame(semanticReverseAbstractInterpreter2, semanticReverseAbstractInterpreter1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = closureReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      assertSame(jSType0, jSType1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node node1 = Node.newNumber((-2559.41204270836));
      enumType0.toMaybeEnumType();
      enumType0.toMaybeEnumType();
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      semanticReverseAbstractInterpreter0.getFirst();
      node0.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node1, jSType0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(355, "Not declared as a constructor", (-1106), (-1106));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
      enumType0.isNumber();
      semanticReverseAbstractInterpreter0.getFirst();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, enumType0);
      assertFalse(enumType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, (String) null, false);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.getType("]KRc{`");
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a type name", true);
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("LcOHG//8 dE@*b(Q", "a", 1524, 3);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      Node node0 = Node.newString(1524, "", (-1971311820), 0);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType(jSType0, node0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(functionType0, (String) null, false);
      jSType0.getTypesUnderInequality(functionType0);
      functionType0.getPossibleToBooleanOutcomes();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(32, 32, 32);
      JSType jSType0 = closureReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeRegistry0.overwriteDeclaredType("boolean", jSType0);
      jSTypeRegistry0.getType((StaticScope<JSType>) null, ")b+dUC", ")b+dUC", (-1008), 0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ObjectType.cast(jSType0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Named type with empty name component", true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getFirst();
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      assertFalse(jSType2.isAllType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeRegistry0.overwriteDeclaredType("boolean", jSType0);
      JSType jSType1 = jSTypeRegistry0.getType((StaticScope<JSType>) null, ")b+dUC", ")b+dUC", (-1008), 0);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      assertFalse(jSType2.isNoType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      Node node0 = Node.newString("]vKRc{}");
      Node node1 = new Node(19, node0, node0, node0, node0);
      FlowScope flowScope0 = null;
      simpleErrorReporter0.warning("]vKRc{}", "]vKRc{}", 0, (-1747));
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      node1.getChildBefore(node0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("]vKRc{}", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      Node node0 = Node.newNumber(2050.4093, (-2035298732), (-2035298732));
      semanticReverseAbstractInterpreter1.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      semanticReverseAbstractInterpreter1.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      Node node0 = Node.newString("Qb\"OnkW_%$p}WzA(", 0, 0);
      Node node1 = new Node((-1894), node0, node0, node0, node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.NumberType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      Node node0 = null;
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome((Node) null, (FlowScope) null, true);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome((Node) null, (FlowScope) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      assertSame(semanticReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
      
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      FlowScope flowScope0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
      semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      Node.newString(0, "Ama9.eE");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseStringType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((-2559.41204270836));
      EnumType enumType1 = enumType0.toMaybeEnumType();
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      assertSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter0);
      
      jSTypeRegistry0.getType("Unknown class name");
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "P2:qwGhq", false);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      assertSame(chainableReverseAbstractInterpreter0, closureReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertNotSame(semanticReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
      assertNotNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber(1.0, (-1493652847), (-1493652847));
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(1, "Unknown class name", 38, 0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
      enumType0.isNumber();
      Node.newNumber((-2559.41204270836));
      EnumType enumType1 = enumType0.toMaybeEnumType();
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumType1);
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      semanticReverseAbstractInterpreter0.getFirst();
      node0.getInputId();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.getType("com.google.javascript.jscomp.type.hainableReverseAbstractInterpreter");
      closureCodingConvention0.getAssertionFunctions();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a type name", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a constructor", false);
      assertFalse(jSType1.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("}n_BW-dJ", "}n_BW-dJ", 33, (-1843));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", true);
      assertFalse(jSType1.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("FUNCTION_PROTOTYPE", "", 4, 4);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "FUNCTION_PROTOTYPE", true);
      jSType1.getTypesUnderInequality(jSType0);
      jSType1.getPossibleToBooleanOutcomes();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Named type with empty name component", false);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
      //  // Unstable assertion: assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "c{a4?FkVSn-ziw<", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      JSType jSType2 = jSTypeRegistry0.createOptionalType(jSType1);
      assertFalse(jSType2.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("", "", 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      Node node0 = Node.newNumber(821.7505510088, (-1771), 0);
      Node node1 = new Node(0, node0, node0, node0, (-690), 8);
      closureCodingConvention1.describeFunctionBind(node1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = (JSType) null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, false, jSTypeArray0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(functionType0);
      assertFalse(jSType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isConstantKey("f\"&Y,_FNk/o,f O");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(38, 38, 0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        googleCodingConvention0.isOptionalParameter(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 38 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 10 19:19:03 GMT 2022
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1837.934601599;
      doubleArray0[1] = 1718.6329186577134;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 775.128398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 117070.01463886745);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-5.129119169563494E13));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(11);
      assertEquals(0.0, double0, 0.01);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 14);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(4);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realVector0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
      assertFalse(realVector0.isInfinite());
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
      assertTrue(realVector0.isNaN());
      assertEquals(14, realVector0.getDimension());
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1832.2760603530355;
      doubleArray0[1] = (-639.0);
      doubleArray0[2] = 2466.178;
      doubleArray0[3] = 1303.0;
      doubleArray0[4] = 1521.0;
      doubleArray0[5] = 3940.0866;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[5] = 1303.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.383301872816024E10));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1832.2760603530355, (-639.0), 2466.178, 1303.0, 1521.0, 3940.0866, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1303.0}, doubleArray1, 0.01);
      assertEquals(9.715801782349254E21, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9.715801782349254E21, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1832.2760603530355, (-639.0), 2466.178, 1303.0, 1521.0, 3940.0866, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1303.0}, doubleArray1, 0.01);
      assertEquals(9.715801782349254E21, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1832.2760603530355;
      doubleArray0[1] = (-639.0);
      doubleArray0[2] = 2466.178;
      doubleArray0[3] = 2466.178;
      doubleArray0[4] = 1521.0;
      doubleArray0[6] = (-532.79);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[4] = 1521.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.383301872816024E10));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1832.2760603530355, (-639.0), 2466.178, 2466.178, 1521.0, 0.0, (-532.79)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1521.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-8.777181862376906E21), eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-8.777181862376906E21), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1832.2760603530355, (-639.0), 2466.178, 2466.178, 1521.0, 0.0, (-532.79)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1521.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-8.777181862376906E21), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getVT();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getV();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getSolver();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      // Undeclared exception!
      eigenDecompositionImpl0.getEigenvector((-1685));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-2190.3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(39, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 11);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(39, blockRealMatrix0.getRowDimension());
      assertEquals(11, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 39x11 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 52);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(52, blockRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (14, 0) in a 14x52 matrix
         //
         verifyException("org.apache.commons.math.linear.BlockRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1517.4620054058291);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, array2DRowRealMatrix0.getColumnDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1783.541);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.TriDiagonalTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, array2DRowRealMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 2345.309);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2466.178;
      doubleArray0[2] = (-1.383301872816024E10);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1957.247573));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 2466.178, (-1.383301872816024E10), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 2466.178, (-1.383301872816024E10), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(8, realMatrix0.getColumnDimension());
      assertEquals(8, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1832.2760603530355;
      doubleArray0[1] = (-639.0);
      doubleArray0[4] = 1521.0;
      doubleArray0[5] = 3940.0866;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3940.0866;
      doubleArray1[1] = (-532.79);
      doubleArray1[2] = (-532.79);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3940.0866;
      doubleArray1[5] = 1303.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-216.384515371917));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1832.2760603530355, (-639.0), 0.0, 0.0, 1521.0, 3940.0866, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3940.0866, (-532.79), (-532.79), 1.0, 3940.0866, 1303.0}, doubleArray1, 0.01);
      assertEquals((-1.2238252483052007E22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1832.2760603530355;
      doubleArray0[1] = (-639.0);
      doubleArray0[2] = 2466.178;
      doubleArray0[4] = 1521.0;
      doubleArray0[5] = 3940.0866;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3940.0866;
      doubleArray1[2] = (-532.79);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3940.0866;
      doubleArray1[5] = 1303.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-216.384515371917));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {1832.2760603530355, (-639.0), 2466.178, 0.0, 1521.0, 3940.0866, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3940.0866, 0.0, (-532.79), 1.0, 3940.0866, 1303.0}, doubleArray1, 0.01);
      assertEquals((-1.2238321504057194E22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-639.0);
      doubleArray0[3] = 835.1;
      doubleArray0[4] = 1521.0;
      doubleArray0[5] = 3940.0866;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3940.0866;
      doubleArray1[1] = (-532.79);
      doubleArray1[2] = (-532.79);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3940.0866;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.383301872816024E10));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, (-639.0), 0.0, 835.1, 1521.0, 3940.0866, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3940.0866, (-532.79), (-532.79), 1.0, 3940.0866, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (-532.79);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3940.0866;
      doubleArray1[5] = 1303.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-216.384515371917));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-532.79), 1.0, 3940.0866, 1303.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(blockRealMatrix0);
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-5.129119169563494E13));
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(52, BlockRealMatrix.BLOCK_SIZE);
      assertNotNull(realMatrix0);
      assertEquals(14, blockRealMatrix0.getColumnDimension());
      assertEquals(14, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(14, realMatrix0.getColumnDimension());
      assertEquals(14, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl(realMatrix0, 4.3691929581845487E-150);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 2466.178;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = (-532.79);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3940.0866;
      doubleArray1[5] = 1303.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-216.384515371917));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 2466.178, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-532.79), 1.0, 3940.0866, 1303.0}, doubleArray1, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-1.383301872816024E10);
      doubleArray0[3] = (-639.0);
      doubleArray0[4] = (-639.0);
      doubleArray0[5] = 2466.178;
      doubleArray0[6] = 1521.0;
      doubleArray0[7] = 100.0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[5] = 1832.2760603530355;
      doubleArray1[6] = 1.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1957.247573));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.383301872816024E10), (-639.0), (-639.0), 2466.178, 1521.0, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1832.2760603530355, 1.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1832.2760603530355;
      doubleArray0[1] = (-639.0);
      doubleArray0[2] = 2466.178;
      doubleArray0[3] = 2466.178;
      doubleArray0[4] = 1521.0;
      doubleArray0[6] = (-532.79);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2466.178;
      doubleArray1[4] = 1521.0;
      doubleArray1[5] = 1832.2760603530355;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.383301872816024E10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-532.79);
      doubleArray0[1] = 2466.178;
      doubleArray0[2] = (-1.383301872816024E10);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[2] = 1832.2760603530355;
      doubleArray1[3] = (-639.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1957.247573));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-532.79), 2466.178, (-1.383301872816024E10), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.2760603530355, (-639.0), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(6, 6);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      
      RealMatrix realMatrix0 = array2DRowRealMatrix0.scalarAdd(1691.92974428353);
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
      assertNotSame(realMatrix0, array2DRowRealMatrix0);
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotNull(realMatrix0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1003.352));
      assertFalse(array2DRowRealMatrix0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
      assertNotNull(eigenDecompositionImpl0);
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getColumnDimension());
      assertEquals(6, realMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-5.129119169563494E13));
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1957.247573));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.383301872816024E10));
      try { 
        eigenDecompositionImpl0.getEigenvector(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.383301872816024E10));
      eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 14);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 14);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertSame(realMatrix1, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 14);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(14, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(14, 14);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-5.129119169565193E13));
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(14, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 114.0729183;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, false);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 100.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-7161786.906607312));
      eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(49, 49);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalue(17);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(39, 39);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, 0.0);
      double[] doubleArray0 = eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(39, doubleArray0.length);
  }
}

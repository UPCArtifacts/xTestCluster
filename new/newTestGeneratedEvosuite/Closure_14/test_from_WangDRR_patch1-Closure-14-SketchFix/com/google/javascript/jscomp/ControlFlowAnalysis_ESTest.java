/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 05:55:23 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ControlFlowAnalysis_ESTest extends ControlFlowAnalysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node((-37));
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals((-37), node0.getType());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      
      Node node1 = new Node(1155, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals((-37), node0.getType());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getLength());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDefaultCase());
      assertEquals(1155, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newString(115, "?oj+[uHR", 115, 115);
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertEquals(115, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      Node node1 = new Node(8, node0, 115, 49);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertEquals(115, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals(8, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(115, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertEquals(471089, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      
      node0.addChildToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertEquals(115, node0.getType());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertEquals(8, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(115, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertEquals(471089, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node(102, 102, (-2011));
      assertNotNull(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertEquals(102, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Node node1 = new Node(49, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertEquals(102, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWith());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isThrow());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertEquals(49, node1.getType());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      
      controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertEquals(102, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWith());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertTrue(node1.isThrow());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertEquals(49, node1.getType());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = Node.newString(115, "\"Ad48Q@1|H", 115, 115);
      assertNotNull(node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(115, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(471155, node0.getSourcePosition());
      
      Node node1 = new Node(42, node0, 46, 35);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(115, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(42, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isVarArgs());
      assertEquals(188451, node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertEquals(35, node1.getCharno());
      assertEquals(46, node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.isThis());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      assertNotNull(makeDeclaredNamesUnique0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newString(114, "~S=>HGu '(Ul}3n#;", 118, (-292));
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertEquals(114, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isDo());
      
      Node node1 = new Node((-30), node0, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertEquals(114, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isDo());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isFunction());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-30), node1.getType());
      assertFalse(node1.isDebugger());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("~S=>HGu '(Ul}3n#;");
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler(mockPrintStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node(4072);
      assertNotNull(node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(4072, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      
      Node node1 = new Node(15, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(4072, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isWhile());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(15, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(4072, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isWhile());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(15, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = Node.newString(115, "\"Ad48Q@1|H", 115, 115);
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(115, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      
      node0.addChildToBack(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isNot());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(115, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      assertNotNull(makeDeclaredNamesUnique0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = Node.newString(120, "", 77, 4958);
      assertNotNull(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals(4095, node0.getCharno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isCatch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertEquals(319487, node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(77, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertEquals(120, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals(4095, node0.getCharno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isCatch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isObjectLit());
      assertEquals(319487, node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertEquals(77, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertEquals(120, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "SYMBOLS", "SYMBOLS");
      assertNotNull(node0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertTrue(boolean0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isScript());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isString());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.jscomp.RenameLabels$LabelInfo", 0, 1351);
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(1351, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(1351, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(1351, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(1351, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newString(115, "&u3-jG", 115, 115);
      assertNotNull(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertEquals(115, node0.getType());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertTrue(boolean0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertEquals(115, node0.getType());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseTestCode("d!v/\"A:E5F9W`3d");
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(2, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      
      boolean boolean0 = ControlFlowAnalysis.isBreakStructure(node0, true);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(boolean0);
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(2, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertTrue(node0.isScript());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(132, node0.getType());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newString(115, "?oj+[uHR", 115, 115);
      assertNotNull(node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(115, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(115, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      
      Node node1 = ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      assertNull(node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(115, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(115, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = compiler0.parseTestCode(";");
      assertNotNull(node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSourceOffset());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0, controlFlowAnalysis0);
      assertNull(node1);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabel());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSourceOffset());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertTrue(node0.isScript());
      assertFalse(node0.isFunction());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertNull(node1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      Node node0 = new Node(133, (-963), (-963));
      assertNotNull(node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertEquals(133, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "E}BG25Saw^EO(!/n", "E}BG25Saw^EO(!/n");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node1, node0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasOneChild());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertTrue(node1.isScript());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals(132, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFunction());
      
      Node node2 = new Node((-273), node0, node0, node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertEquals(133, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasOneChild());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertTrue(node1.isScript());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals(132, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFunction());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertEquals(1, node2.getChildCount());
      assertEquals((-273), node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isTry());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isNE());
      assertFalse(node2.isWhile());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isComma());
      assertFalse(node2.isOptionalArg());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      
      Node node3 = ControlFlowAnalysis.computeFollowNode(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node3, node1);
      assertSame(node3, node0);
      assertNotSame(node3, node2);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasOneChild());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTry());
      assertTrue(node1.isScript());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals(132, node1.getType());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFunction());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isRegExp());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isFor());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isIn());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isLocalResultCall());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isName());
      assertFalse(node3.isNE());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isFalse());
      assertFalse(node3.isInc());
      assertFalse(node3.isCall());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isComma());
      assertFalse(node3.isThrow());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isContinue());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isScript());
      assertEquals(133, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssignAdd());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isHook());
      assertEquals(0, node3.getLength());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isDo());
      assertFalse(node3.isCase());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThis());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newString(115, "\"Ad48Q@1|H", 115, 115);
      assertNotNull(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(115, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFor());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      
      Node node1 = new Node(42, node0, 46, 35);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(115, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFor());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals(42, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getLength());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertEquals(188451, node1.getSourcePosition());
      assertFalse(node1.isVarArgs());
      assertEquals(35, node1.getCharno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertEquals(46, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      
      node0.addChildToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(115, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFor());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertEquals(42, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getLength());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertEquals(188451, node1.getSourcePosition());
      assertFalse(node1.isVarArgs());
      assertEquals(35, node1.getCharno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertEquals(46, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNull());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      
      Node node2 = ControlFlowAnalysis.computeFallThrough(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertSame(node2, node1);
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(115, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFor());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertEquals(188451, node2.getSourcePosition());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertEquals(42, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isWith());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isCase());
      assertFalse(node2.isScript());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNE());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isThrow());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertEquals(35, node2.getCharno());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isVoid());
      assertFalse(node2.isName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isQuotedString());
      assertEquals(46, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = new Node(110, 119, 110);
      assertNotNull(node0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(110, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertEquals(487534, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(119, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertTrue(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertEquals(110, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertNotNull(node1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals(110, node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertEquals(487534, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(119, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertTrue(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertEquals(110, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getLength());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isExprResult());
      assertEquals(487534, node1.getSourcePosition());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertEquals(119, node1.getLineno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isIn());
      assertTrue(node1.isSwitch());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals(110, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isName());
      assertFalse(node1.isFor());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(110, node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = new Node(86, 86, (-4));
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(86, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isAssign());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      
      Node node1 = new Node(4, node0, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(86, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isAssign());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isDelProp());
      assertEquals(4, node1.getType());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isReturn());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(86, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isAssign());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isDelProp());
      assertEquals(4, node1.getType());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isReturn());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isOr());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isTrue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isLocalResultCall());
      assertEquals(4, node2.getType());
      assertFalse(node2.isTypeOf());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNull());
      assertFalse(node2.isDo());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isWith());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.isReturn());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node((-3735), (-3735), (-3735));
      assertNotNull(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals((-3735), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      
      Node node1 = new Node(39, node0, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals((-3735), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals((-3735), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node2.isContinue());
      assertFalse(node2.wasEmptyNode());
      assertEquals(39, node2.getType());
      assertFalse(node2.isDo());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.isNumber());
      assertFalse(node2.isHook());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFor());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getLineno());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = compiler0.parseTestCode(";");
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      
      Node node1 = new Node(51, node0, 51, 43);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isFor());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(208939, node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isQuotedString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isIf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertEquals(132, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCase());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertTrue(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertEquals(51, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isFor());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals(208939, node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isQuotedString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWhile());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isIf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOptionalArg());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIf());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNumber());
      assertEquals(51, node2.getType());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(208939, node2.getSourcePosition());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isReturn());
      assertEquals(51, node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isFromExterns());
      assertTrue(node2.isIn());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isNull());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertEquals(43, node2.getCharno());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      
      Node node1 = new Node(0, node0, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getType());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(0, node1.getType());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isHook());
      assertFalse(node2.isThis());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isOr());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertEquals(0, node2.getType());
      assertFalse(node2.isReturn());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isVoid());
      assertFalse(node2.isComma());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isVar());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIn());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isCase());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isRegExp());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = new Node((-2973), (-2973), (-2973));
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-2973), node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertNotNull(node1);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-2973), node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isThis());
      assertFalse(node1.isVar());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals((-2973), node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = new Node(1167);
      assertNotNull(node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(1167, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      
      node0.setLineno(0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(1167, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertNotNull(node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(1167, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(1167, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isBreak());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler0.parseTestCode(";");
      assertNotNull(node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertNotNull(node1);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isScript());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(132, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isLabelName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isString());
      assertEquals(4096, node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertTrue(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getSourceOffset());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertTrue(node1.isSyntheticBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = new Node(86, 86, (-4));
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertTrue(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertEquals(86, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      assertNotNull(node1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertTrue(node0.isAssign());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertEquals(86, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(86, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isOr());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isThis());
      assertTrue(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = new Node(114, 0, 0);
      assertNotNull(node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(114, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = Node.newString(115, "?oj+[uHR", 115, 115);
      assertNotNull(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(115, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      
      node0.addChildToBack(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertEquals(115, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals(115, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.mayThrowException(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR ?oj+[uHR 115
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isContinueStructure((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakStructure((Node) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = Node.newString(115, "?oj+[uHR", 115, 115);
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(115, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isNE());
      assertEquals(115, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      
      node0.addChildToBack(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isVar());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(115, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(115, node0.getLineno());
      assertFalse(node0.isNE());
      assertEquals(115, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      
      // Undeclared exception!
      ControlFlowAnalysis.getExceptionHandler(node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getCatchHandlerForBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFollowNode((Node) null, controlFlowAnalysis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.computeFallThrough((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = compiler0.parseTestCode(";");
      assertNotNull(node0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      
      Node node1 = new Node(51, node0, 51, 43);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertEquals(208939, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isThis());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(51, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isContinue());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean0);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isScript());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertTrue(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertEquals(208939, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isThis());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals(51, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isLocalResultCall());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNull());
      assertEquals(51, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isContinue());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      assertNotNull(printStreamErrorManager0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      assertNotNull(compiler0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = compiler0.parseTestCode(";");
      assertNotNull(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(boolean0);
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertTrue(node0.isScript());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(0, node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(132, node0.getType());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = Node.newString(125, "~S=>HGu '(Ul}3n#;", 118, (-292));
      assertNotNull(node0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertEquals(125, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertTrue(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      
      node0.setType(33);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(33, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertTrue(boolean0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(33, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = new Node(35);
      assertNotNull(node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertEquals(35, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertTrue(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(boolean0);
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertEquals(35, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertTrue(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = Node.newString(49, "");
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertEquals(49, node0.getType());
      
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertTrue(boolean0);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.isThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertEquals(49, node0.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = Node.newString(119, "?oj+[uHR", 119, 119);
      assertNotNull(node0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVar());
      assertEquals(487543, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(119, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertEquals(119, node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertEquals(119, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertTrue(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = Node.newString(108, "ZQj8meuIhtM`", (-685), 118);
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertTrue(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(108, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      assertNotNull(controlFlowAnalysis0);
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit((NodeTraversal) null, node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = Node.newString(125, "~S=>HGu '(Ul}3n#;", 118, (-292));
      assertNotNull(node0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(125, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSyntheticBlock());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      assertNotNull(controlFlowAnalysis0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      assertNotNull(node0);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isContinue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals(117, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertEquals(117, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(479349, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertEquals(117, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot find continue target.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = new Node(86, 86, (-4));
      assertNotNull(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(86, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      assertNotNull(loggerErrorManager0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "E}BG25Saw^EO(!/n", "Q&;Yp\"a'");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node1, node0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNull());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(132, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertTrue(node1.isScript());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isFromExterns());
      
      Node node2 = new Node(4, node1, node0, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(86, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isNull());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(132, node1.getType());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertTrue(node1.isScript());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertEquals("[testcode]", node1.getSourceFileName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isFromExterns());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNE());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNull());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isCatch());
      assertTrue(node2.isReturn());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLocalResultCall());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isThis());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getLength());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInc());
      assertEquals(4, node2.getType());
      assertFalse(node2.isThrow());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      assertNotNull(controlFlowAnalysis0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertNull(logger0.getResourceBundleName());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertEquals(1, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.acceptConstKeyword());
      assertTrue(compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compiler0.isIdeMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newString(118, "?oj+[uHR", 86, (-4));
      assertNotNull(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertEquals(118, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      Logger logger0 = Tracer.logger;
      assertNotNull(logger0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      assertNotNull(loggerErrorManager0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      assertNotNull(compiler0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node1 = new Node(4, node0, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertEquals(118, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isQuotedString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(4, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      assertNotNull(controlFlowAnalysis0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      controlFlowAnalysis0.process(node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertEquals(118, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0, (ScopeCreator) null);
      assertNotNull(nodeTraversal0);
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      boolean boolean0 = controlFlowAnalysis0.shouldTraverse(nodeTraversal0, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(boolean0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertEquals(118, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertEquals("com.google.javascript.jscomp.Tracer", logger0.getName());
      assertNull(logger0.getResourceBundleName());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isName());
      assertFalse(node1.isQuotedString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOr());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(4, node1.getType());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "SYMBOLS", "SYMBOLS");
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node0);
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) controlFlowAnalysis0);
      assertEquals(4096, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = Node.newString(125, "~S=>HGu '(Ul}3n#;", 118, (-292));
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node node0 = Node.newString(105, "~S=>HGu '(Ul}3n#;", 125, 33);
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseTestCode(";");
      Node node1 = ControlFlowAnalysis.getExceptionHandler(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newString(115, "com.google.javascript.jscomp.DefaultPassConfig$27", 115, 115);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Node node0 = new Node(113, 113, 113);
      boolean boolean0 = ControlFlowAnalysis.isContinueStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Node node0 = Node.newString(125, "~S=>HGu '(Ul}3n#;", 118, (-292));
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "~S=>HGu '(Ul}3n#;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Node node0 = Node.newString(110, "ZQj8muIhtM`", 110, (int) (byte) (-111));
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, ".UIzj1Ouz2*X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Node node0 = Node.newString(108, "&.mQo*$H|P");
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.isBreakTarget(node0, "Not reachable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = new Node(102, 4408, 2707);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Node node0 = Node.newString(30, "=HC%b$qSzKv", 41, 1879);
      boolean boolean0 = ControlFlowAnalysis.mayThrowException(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Node node0 = Node.newString(115, "?oj+[uHR", 115, 115);
      Node node1 = new Node(8, node0, 115, 49);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, "RgZiyH{mZA.E&e A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      boolean boolean0 = ControlFlowAnalysis.isBreakTarget(node0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Node node0 = Node.newString(115, "?oj+[uHR", 115, 115);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, true, true);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Node node0 = new Node(114, 0, 0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Node node0 = new Node(86, 86, (-4));
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "E}BG25Saw^EO(!/n", "Q&;Yp\"a'");
      Node node2 = new Node(4, node1, node0, node1, node1);
      Node node3 = ControlFlowAnalysis.computeFollowNode(node0);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Node node0 = Node.newString(114, "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph", 312, 114);
      Node node1 = new Node(4095, node0, 30, (-2057));
      node0.addChildToBack(node1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, false);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Node node0 = Node.newString(111, "");
      Node node1 = new Node(452, node0, 40, 132);
      node0.addChildToBack(node1);
      ControlFlowAnalysis.isBreakTarget(node1, "");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node2, node2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph");
      Node node1 = new Node(48, node0, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      controlFlowAnalysis0.process(node0, node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "ns^^/XI~!", "<&31Ylb,");
      Node node1 = new Node(112, node0, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      controlFlowAnalysis0.process(node0, node1);
      assertFalse(node0.isLabel());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Node node0 = Node.newString(126, "~S=>HGu '(Ul}3n#;", 118, (-5));
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, controlFlowAnalysis0);
      controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Node node0 = new Node(86, 86, (-4));
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node1 = new Node(4, node0, node0, node0, node0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.process(node0, node1);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Node node0 = Node.newString(120, "?oj+[uHR", 120, 120);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Node node0 = new Node(114, 0, 0);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, true);
      ControlFlowGraph<Node> controlFlowGraph0 = controlFlowAnalysis0.getCfg();
      assertNull(controlFlowGraph0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
      Node node0 = Node.newString(112, "number to skip cannot be negative", 1, 99);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Node node0 = Node.newString(119, "?oj+[uHR", 119, 119);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
      // Undeclared exception!
      try { 
        controlFlowAnalysis0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }
}

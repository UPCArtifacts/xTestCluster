/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 18:28:06 GMT 2022
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1.0E-10);
      boolean boolean0 = line0.isParallelTo(line1);
      assertFalse(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D(0.0, 1.0E-10);
      boolean boolean0 = line0.contains(vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.NaN;
      line0.getPointAt(vector1D0, 2970.343149249);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(4066.070204997, 0.0);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(line0);
      boolean boolean0 = line1.sameOrientationAs(line0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 1.625);
      Line line1 = new Line(line0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3.141592653589793);
      Line line1 = line0.getReverse();
      assertEquals(Double.NEGATIVE_INFINITY, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D(1.7380081788004549, vector2D0, 334.3863504521, vector2D0, 334.3863504521, vector2D0);
      Line line0 = new Line(vector2D0, vector2D1);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector1D0.getNormSq(), 0.01);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-3571.729), 0.036);
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      assertEquals(0.036, line0.getOriginOffset(), 0.01);
      assertEquals((-3571.729), vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(2769.259, 2769.259);
      Line line0 = new Line(vector2D0, 2769.259);
      Vector2D vector2D1 = Vector2D.ZERO;
      Vector1D vector1D0 = line0.toSubSpace(vector2D1);
      Vector2D vector2D2 = line0.toSpace(vector1D0);
      assertEquals(6828084.575894946, vector2D2.getNormSq(), 0.01);
      assertEquals(-0.0, vector1D0.getX(), 0.01);
      assertEquals(2609.1200169644385, vector2D2.getX(), 0.01);
      assertEquals((-143.44794515932944), vector2D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-1.0902938113007961E-8));
      Line line1 = new Line(vector2D1, 1298.5184576);
      Vector2D vector2D2 = line0.intersection(line1);
      assertNotNull(vector2D2);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertTrue(vector2D2.equals((Object)vector2D0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-705.7755508142699), (-705.7755508142699));
      Line line0 = new Line(vector2D0, (-705.7755508142699));
      Line line1 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line1);
      assertTrue(vector2D1.equals((Object)vector2D0));
      assertEquals((-292.48182227478577), line0.getOriginOffset(), 0.01);
      assertNotNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 1.0E-10);
      Vector2D vector2D1 = line1.intersection(line0);
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertNotNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setAngle((-2961.03704521542));
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.6);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-2961.03704521542), (-366.2621174));
      Vector2D vector2D2 = new Vector2D((-2961.03704521542), vector2D0, (-2961.03704521542), vector2D1, (-549.55816750476), vector2D0, (-2961.03704521542), vector2D0);
      Line line0 = new Line(vector2D2, vector2D2);
      assertEquals(1084515.6978804395, line0.getOriginOffset(), 0.01);
      
      line0.reset(vector2D2, vector2D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector2D vector2D3 = line0.getPointAt(vector1D0, 0.6);
      assertEquals(0.36, vector2D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      Line line0 = new Line(vector2D0, vector2D0);
      Vector1D vector1D0 = line0.toSubSpace(vector2D0);
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 0.0);
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOriginOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 4060.6753879899748);
      Line line1 = line0.getReverse();
      double double0 = line1.getOriginOffset();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(2056.02, 2056.02);
      Vector2D vector2D1 = new Vector2D(4112.04, vector2D0, 4112.04, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      Line line1 = new Line(vector2D1, 197.41352592659888);
      double double0 = line0.getOffset(line1);
      assertEquals(2.2990800935209714E7, double0, 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(2056.02, 2056.02);
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = new Line(vector2D0, 197.41352592659888);
      double double0 = line1.getOffset(line0);
      assertEquals((-739.5268496427216), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 4060.6753879899748);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-3571.729), 0.036);
      Vector2D vector2D1 = new Vector2D(0.036, vector2D0, 1.0E-10, vector2D0, (-51.33325686539953), vector2D0, 0.2749973189614399, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals((-3.3282200197894877E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.reset(vector2D0, 0.0);
      double double0 = line0.getAngle();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 2604.6886959);
      double double0 = line0.getAngle();
      assertEquals(3.4499787276513416, double0, 0.01);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.distance(vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-2681.88870937), (-2681.88870937));
      Vector2D vector2D1 = new Vector2D(791.2490549227042, vector2D0, (-930.47341), vector2D0, (-2681.88870937), vector2D0, (-2681.88870937), vector2D0);
      Line line0 = new Line(vector2D1, (-2681.88870937));
      double double0 = line0.distance(vector2D0);
      assertEquals(5084081.270627022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      Line line1 = line0.copySelf();
      assertEquals(0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-3571.729), 0.036);
      Vector2D vector2D1 = new Vector2D(0.036, vector2D0, 1.0E-10, vector2D0, (-51.33325686539953), vector2D0, 0.2749973189614399, vector2D0);
      Line line0 = new Line(vector2D1, vector2D0);
      Line line1 = line0.copySelf();
      assertEquals((-4.894771942462825E-18), line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 1.625);
      // Undeclared exception!
      try { 
        line0.translateToPoint((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.5574076175689697);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.sameOrientationAs((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.5574076175689697);
      // Undeclared exception!
      try { 
        line0.reset(vector2D0, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.isParallelTo((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.intersection((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Line.getTransform((AffineTransform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getPointAt((Vector1D) null, (-2.6437112632041807E-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.getOffset((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, 1.625);
      // Undeclared exception!
      try { 
        line0.getOffset((Vector<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 1.5574076175689697);
      // Undeclared exception!
      try { 
        line0.distance((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.contains((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Vector2D) null, 1615.806);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-705.7755508142699), (-705.7755508142699));
      Line line0 = new Line(vector2D0, (-705.7755508142699));
      line0.reset(vector2D0, vector2D0);
      assertEquals((-705.7755508142699), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      // Undeclared exception!
      try { 
        line0.reset((Vector2D) null, 0.534819558501852);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset((Vector<Euclidean2D>) vector2D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AffineTransform affineTransform0 = new AffineTransform((double) 152, (double) 152, (double) 152, (double) 152, (double) 152, (double) 152);
      try { 
        Line.getTransform(affineTransform0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non-invertible affine transform collapses some lines into single points
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line0);
      assertTrue(boolean0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.isParallelTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.contains(vector2D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3.141592653589793);
      boolean boolean0 = line0.contains(vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = line0.sameOrientationAs(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      double double0 = line0.getOffset(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = line0.intersection(line0);
      assertEquals(Double.NaN, vector2D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(-0.0, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.getReverse();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 3.141592653589793);
      line0.revertSelf();
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.revertSelf();
      assertEquals(-0.0, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 4060.6753879899748);
      double double0 = line0.getOriginOffset();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeHyperplane();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Line line1 = line0.copySelf();
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-647.214052998));
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D1 = line0.getPointAt(vector1D0, 1777.26465153977);
      assertTrue(vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-132.0024539494), (-606.9911591));
      Line line0 = new Line(vector2D0, (-606.9911591));
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector2D vector2D1 = line0.toSpace(vector1D0);
      assertEquals(559.4354795220358, line0.getOriginOffset(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.wholeSpace();
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-647.214052998));
      line0.setOriginOffset((-647.214052998));
      assertEquals((-647.214052998), line0.getOriginOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((-2834.517), (-2834.517));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      assertNotNull(transform0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.translateToPoint(vector2D0);
      assertTrue(vector2D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Line line0 = null;
      try {
        line0 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      line0.toSubSpace(vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01);
  }
}

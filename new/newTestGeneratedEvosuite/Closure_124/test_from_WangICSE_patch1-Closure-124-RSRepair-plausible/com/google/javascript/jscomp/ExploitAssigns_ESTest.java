/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:38:57 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("X4Ga7&#%Z}(I>!JKB?");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.setWasEmptyNode(true);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("com.google.javascript.jscomp.ExploitAssigns");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.setVarArgs(true);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isLabelName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("jv|b!y*R)nNci!SNJx");
      Node node1 = new Node(32, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isOnlyModifiesArgumentsCall());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isFromExterns());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(42, 2, 53);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isWhile());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("om.google.javascrip7.jscomp.ExploitAssigns");
      Node node1 = new Node(40, node0, node0, 29, 31);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isAssignAdd());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(4, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isTry());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertTrue(node1.mayMutateGlobalStateOrThrow());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(100, 817, 817);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isBreak());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((-584), (-1), (-1));
      node0.setOptionalArg(true);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isObjectLit());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("om.google.javascript.jscomp.ExploitAssgns");
      Node node1 = new Node(39, node0, node0, 54, 32);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertTrue(node2.isNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("T");
      Node node1 = new Node(26, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("com.google.javascript.jscomp.ExploitAssigns");
      Node node1 = new Node(38, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("com.google.javascript.jscomp.ExploitAssigns");
      Node node1 = new Node(52, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isAssign());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("S");
      Node node1 = new Node(108, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node0 = Node.newString("com.google.javascript.jscomp.ExploitAssigns", 98, 2031);
      Node node1 = new Node(98, node0, node0, node0, 4095, 0);
      Node node2 = peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
      Node node3 = exploitAssigns0.optimizeSubtree(node2);
      assertFalse(node3.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((-214748364));
      Node node1 = new Node(33, node0, node0, node0, 516, 30);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(105, 105, 105);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isLabelName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SyntheticAst syntheticAst0 = new SyntheticAst("D]ENLeLbZ=PV");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, (InputId) null, true);
      Node node0 = compilerInput0.getAstRoot((AbstractCompiler) null);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isWith());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("=/dhkCz");
      Node node1 = new Node(43, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertSame(node2, node1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("w");
      Node node1 = new Node(130, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("S");
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isExprResult());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(37, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(86, nodeArray0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(101);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("X0ID#^_");
      Node node1 = Node.newString("X0ID#^_");
      Node node2 = new Node(47, node1, node0, node0, node0);
      Node node3 = exploitAssigns0.optimizeSubtree(node2);
      assertFalse(node3.isFalse());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isGetProp());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("com.google.javascript.jscomp.ExploitAssigns");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.setLength(2);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("");
      Node node1 = new Node(56, node0, node0, node0, node0);
      node1.setLength((-1110));
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newString("a*hQhvU");
      Node node1 = new Node(51, node0, node0, node0, 55, 42);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertNull(node2.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ExploitAssigns", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(118, 0, 0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isNumber());
  }
}

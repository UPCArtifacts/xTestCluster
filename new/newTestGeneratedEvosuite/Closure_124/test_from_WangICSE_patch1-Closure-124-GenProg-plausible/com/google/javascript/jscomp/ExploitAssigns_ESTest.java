/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:32:55 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExploitAssigns_ESTest extends ExploitAssigns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node((-610), 417, 417);
      node0.setVarArgs(true);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertTrue(node1.mayMutateGlobalStateOrThrow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(2317);
      Node node1 = new Node(49, node0, (-219), 33);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(47, node0, node0, node0, node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isNot());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = Node.newNumber((double) 100);
      Node node1 = new Node(100, node0, node0);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("NEA=ujy-pCb>P^WV", "NEA=ujy-pCb>P^WV");
      node0.setOptionalArg(true);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(38, 38, 0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(52, 52, 30);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(887, 887, 887);
      Node node1 = new Node(51, node0, node0, 31, 31);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(86, 86, 0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(52, Node.LENGTH);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("E=W4ezGg$sOe", "E=W4ezGg$sOe");
      Node node1 = new Node(101, node0, node0, node0, node0, 120, 1951);
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      assertFalse(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(21, 21, (-42));
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("NEA=ujy-pCb>P^WV", "NEA=ujy-pCb>P^WV");
      node0.setSourceEncodedPosition(4272);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node0 = new Node(0, 0, 0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("E=W4ezGg$sOe", "");
      node0.setChangeTime(1);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        exploitAssigns0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ExploitAssigns", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("E=WezGg$sOe", "E=WezGg$sOe");
      Node node1 = Node.newString("E=WezGg$sOe", 31, 37);
      node0.addChildrenToBack(node1);
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node2.isAdd());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("E=WezGg$sOe", "E=WezGg$sOe");
      node0.addChildrenToBack(node0);
      Node node1 = exploitAssigns0.optimizeSubtree(node0);
      assertFalse(node1.isCast());
  }
}

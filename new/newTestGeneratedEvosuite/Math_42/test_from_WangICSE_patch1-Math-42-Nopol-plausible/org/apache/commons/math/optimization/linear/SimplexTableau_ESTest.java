/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 10:03:13 GMT 2022
 */

package org.apache.commons.math.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexTableau_ESTest extends SimplexTableau_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 0.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.hashCode();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1330.0));
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2685.514), 166);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2685.514));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-334.17));
      assertEquals(6, doubleArray0.length);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(6, doubleArray0.length);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0, relationship0, openMapRealVector0, 13.997017716372785);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(12.997017716372785, linearConstraint0.getValue(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(12.997017716372785, linearConstraint0.getValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1723.3692));
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals((-1723.3692), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals((-1723.3692), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(linearConstraint0));
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, true, 1.0);
      assertEquals(9, doubleArray0.length);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals((-1723.3692), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList1.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau1);
      assertFalse(linkedList1.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertEquals(9, doubleArray0.length);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals((-1723.3692), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertFalse(linkedList1.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1330.0));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 192, 192);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 192, relationship0, arrayRealVector0, (-1330.0));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals((-1522.0), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals((-1522.0), linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(linkedList0.contains(linearConstraint0));
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 192, 192);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau1);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1103.75617);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2670.05023), 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.divideRow(0, 2096.9904756);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 13.997017716372785;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 13.997017716372785);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.997017716372785, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {13.997017716372785, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-226.7220444992));
      assertEquals(2, doubleArray0.length);
      assertEquals(13.997017716372785, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {13.997017716372785, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.isOptimal();
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(13.997017716372785, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {13.997017716372785, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1330.0));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1330.0);
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 633.2539541);
      assertEquals(9, doubleArray0.length);
      assertEquals(633.2539541, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {(-1330.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(633.2539541, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {(-1330.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 192, 192);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      simplexTableau0.dropPhase1Objective();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(linearConstraint0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1323.9509785062226));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 772.9721217, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.initializeColumnLabels();
      assertEquals(8, doubleArray0.length);
      assertEquals((-1323.9509785062226), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1103.75617);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-2670.05023), 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.subtractRow(0, 0, 1860.394589613);
      assertEquals(2, doubleArray0.length);
      assertEquals(1103.75617, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 871.95);
      assertEquals(7, doubleArray0.length);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 5013.5138);
      assertEquals(7, doubleArray0.length);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.setEntry(0, 0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 768.689838);
      assertEquals(2, doubleArray0.length);
      assertEquals(768.689838, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 450.220613874772);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(768.689838, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getWidth();
      assertEquals(2, doubleArray0.length);
      assertEquals(5, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(768.689838, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-1.0), realPointValuePair0.getValue(), 0.01);
      assertNotNull(realPointValuePair0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertEquals(7, doubleArray0.length);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2323.17436398497);
      assertEquals(7, doubleArray0.length);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getSlackVariableOffset();
      assertEquals(7, doubleArray0.length);
      assertEquals(9, int0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getRhsOffset();
      assertEquals(6, doubleArray0.length);
      assertEquals(8, int0);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, 0, 0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getOriginalNumDecisionVariables();
      assertEquals(6, doubleArray0.length);
      assertEquals(6, int0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-170.85752988317626));
      assertEquals(5, doubleArray0.length);
      assertEquals((-170.85752988317626), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2049.17044686, 0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-170.85752988317626), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals((-170.85752988317626), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 192);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 192, relationship0, arrayRealVector0, 192);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1430.1593056));
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(1, int0);
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(linearConstraint0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertEquals(7, doubleArray0.length);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2323.17436398497);
      assertEquals(7, doubleArray0.length);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumObjectiveFunctions();
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int0);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 14.643915673026754);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14.643915673026754, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-37.10863352971352), 0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14.643915673026754, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(0, int0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(14.643915673026754, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, int0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0, relationship0, openMapRealVector0, 13.997017716372785);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(12.997017716372785, linearConstraint0.getValue(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(12.997017716372785, linearConstraint0.getValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-12);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 193);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(9, doubleArray0.length);
      assertEquals(1, int0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192, arrayRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-894);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-894.0)}, doubleArray1, 0.01);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(arrayRealVector0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(894.0, double0, 0.01);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-894.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 871.95);
      assertEquals(7, doubleArray0.length);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 5013.5138);
      assertEquals(7, doubleArray0.length);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getHeight();
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int0);
      assertEquals(871.95, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-745.263));
      assertEquals(7, doubleArray0.length);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2323.17436398497);
      assertEquals(7, doubleArray0.length);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = simplexTableau0.getEntry(0, 0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-745.263), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1413.5005));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1413.5005), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-837.804935106), 0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1413.5005), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = simplexTableau0.getEntry(0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1413.5005), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, (int)integer0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(integer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0, relationship0, openMapRealVector0, 1.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1891.19094);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1891.19094, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, 11);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1891.19094, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(11);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, (int)integer0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1891.19094, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(integer0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 0.9897552822772121);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.9897552822772121, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 0.9897552822772121);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.9897552822772121, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = simplexTableau0.getBasicRow(0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.9897552822772121, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(integer0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-789.0));
      assertEquals(6, doubleArray0.length);
      assertEquals((-789.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-789.0));
      assertEquals(6, doubleArray0.length);
      assertEquals((-789.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getArtificialVariableOffset();
      assertEquals(6, doubleArray0.length);
      assertEquals(8, int0);
      assertEquals((-789.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2445.3052965907);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealMatrix realMatrix0 = simplexTableau0.createTableau(false);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(8, realMatrix0.getColumnDimension());
      assertNotNull(realMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.normalizeConstraints((Collection<LinearConstraint>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3931), (-3931));
      assertEquals((-3931), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      // Undeclared exception!
      try { 
        SimplexTableau.getInvertedCoefficientSum(openMapRealVector0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      assertEquals(10, doubleArray0.length);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      assertEquals(10, doubleArray0.length);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        simplexTableau0.getEntry(183, 183);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (183)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 220);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(220.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 220);
      assertEquals(0, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(220.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      try { 
        simplexTableau0.getBasicRow(220);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column index (220)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 192);
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1988.2238128279707));
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(192, arrayRealVector0.getDimension());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      // Undeclared exception!
      try { 
        simplexTableau0.divideRow(192, (-1988.2238128279707));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (192)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(2110);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2110, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1330.0));
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2110, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1330.0), 781);
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2110, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-42.780225470286474), (-365));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(2110, arrayRealVector0.getDimension());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 498.1370093574901, 219);
      assertFalse(simplexTableau2.equals((Object)simplexTableau0));
      assertFalse(simplexTableau2.equals((Object)simplexTableau1));
      assertEquals(2110, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-431));
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-431), openMapRealVector0.getDimension());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-974.5325495405305));
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-431), openMapRealVector0.getDimension());
      assertEquals((-974.5325495405305), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-0.001468658447265625), (-431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -429 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, true, 1.0, 201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), (-1));
      assertEquals((-1), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-1));
      assertEquals((-1), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 101.88822787, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 13.997017716372785);
      assertEquals(9, doubleArray0.length);
      assertEquals(13.997017716372785, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector1, relationship0, 13.997017716372785);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(13.997017716372785, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(18, arrayRealVector1.getDimension());
      assertFalse(arrayRealVector1.isNaN());
      assertFalse(arrayRealVector1.isInfinite());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(13.997017716372785, linearConstraint0.getValue(), 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 13.965574260849785, 3105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1152, 1152);
      assertEquals(1152, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-1266.0047828340291), relationship0, openMapRealVector0, 1152);
      assertEquals(1152, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2418.0047828340294, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearConstraint0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(linearConstraint0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-365.51));
      assertEquals(1152, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-365.51), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 50.297595623804426);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-502), (-502));
      assertEquals((-502), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-208.81017485));
      assertEquals((-502), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-208.81017485), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-208.81017485));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -500 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau((LinearObjectiveFunction) null, linkedList0, goalType0, false, 1.0E-12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-525));
      assertEquals((-525), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, (-525), relationship0, openMapRealVector0, 1.0);
      assertEquals((-525), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(526.0, linearConstraint0.getValue(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.offerLast(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-525), openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(526.0, linearConstraint0.getValue(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.4000239620898467);
      assertEquals(10, doubleArray0.length);
      assertEquals(1.4000239620898467, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3219, 3219);
      assertEquals(3219, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 1.4000239620898467, relationship0, arrayRealVector0, 3219);
      assertEquals(3219, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(3217.59997603791, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(3219, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(3217.59997603791, linearConstraint0.getValue(), 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      SimplexTableau simplexTableau0 = null;
      try {
        simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.4000239620898467);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 192);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(arrayRealVector0, 192, relationship0, arrayRealVector0, 192);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1430.1593056));
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(192.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertTrue(list0.contains(linearConstraint0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2678.7267819394165);
      assertEquals(2, doubleArray0.length);
      assertEquals(2678.7267819394165, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2678.7267819394165, 1112);
      assertEquals(2, doubleArray0.length);
      assertEquals(2678.7267819394165, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, true, 2678.7267819394165, 1112);
      assertEquals(2, doubleArray0.length);
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(2678.7267819394165, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(2, doubleArray0.length);
      assertFalse(goalType0.equals((Object)goalType1));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertEquals(2678.7267819394165, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(goalType0, goalType1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(goalType1, goalType0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 220);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(220.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 220, 220);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(220.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 220, 220);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(220.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean0);
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(220.0, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(192);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1330.0));
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 192, 192);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 192, 250);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau1);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertEquals(192, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(arrayRealVector0.isInfinite());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, 1.0, relationship0, openMapRealVector0, 1.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(linearConstraint0));
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-0.999999999999));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1627.4799028631792), (-2751));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0, (-795));
      assertEquals(9, doubleArray0.length);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau1);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals(simplexTableau1);
      assertEquals(9, doubleArray0.length);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-3618.5072438887));
      assertEquals(6, doubleArray0.length);
      assertEquals((-3618.5072438887), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 173.603115822, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-3618.5072438887), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1298.278425);
      assertEquals(6, doubleArray0.length);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1298.278425, linearConstraint0.getValue(), 0.01);
      assertNotNull(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.offerLast(linearConstraint0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1298.278425, linearConstraint0.getValue(), 0.01);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-3618.5072438887));
      assertEquals(6, doubleArray0.length);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals((-3618.5072438887), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotNull(simplexTableau1);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau1.equals(simplexTableau0);
      assertEquals(6, doubleArray0.length);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-3618.5072438887), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertTrue(linkedList0.contains(linearConstraint0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2660.334921795903);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-955.9), 293);
      assertEquals(6, doubleArray0.length);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray1, 1225.2849498927972);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(1225.2849498927972, linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, true, (-2381.009921));
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0, linkedList0.size());
      assertEquals(1225.2849498927972, linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertNotNull(simplexTableau1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertEquals(2660.334921795903, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1225.2849498927972, linearObjectiveFunction1.getConstantTerm(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-0.999999999999));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1627.4799028631792), (-2751));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0, (-795));
      assertEquals(9, doubleArray0.length);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau1);
      assertEquals(9, doubleArray0.length);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1879.82));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0, 11);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.equals("9");
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals((-1879.82), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(220);
      assertEquals(220, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, (-1330.0));
      assertEquals(220, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 220, 220);
      assertEquals(220, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      
      boolean boolean0 = simplexTableau0.equals(simplexTableau0);
      assertTrue(boolean0);
      assertEquals(220, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector0.isInfinite());
      assertFalse(arrayRealVector0.isNaN());
      assertEquals((-1330.0), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-0.999999999999));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1627.4799028631792), (-2751));
      assertEquals(9, doubleArray0.length);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertNotNull(simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau1.equals(simplexTableau0);
      assertEquals(9, doubleArray0.length);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-0.999999999999), linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 338.97137756157565);
      assertEquals(2, doubleArray0.length);
      assertEquals(338.97137756157565, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, Double.POSITIVE_INFINITY);
      assertEquals(2, doubleArray0.length);
      assertEquals(338.97137756157565, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(2, doubleArray0.length);
      assertEquals(338.97137756157565, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(338.97137756157565, realPointValuePair0.getValue(), 0.01);
      assertNotNull(realPointValuePair0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 21.907261279742507);
      assertEquals(9, doubleArray0.length);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 0.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(9, doubleArray0.length);
      assertEquals(21.907261279742507, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
      assertNotNull(realPointValuePair0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0E-12);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 13.997017716372785, (-312));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertNotNull(simplexTableau0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = simplexTableau0.isOptimal();
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0E-12, linearObjectiveFunction0.getConstantTerm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, 1513.3426756167898);
      linkedList0.add(linearConstraint0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2697, 1513.3426756167898);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 2678.7267819394165);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1543.5), 2697);
      // Undeclared exception!
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 832.16281062397);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 832.16281062397);
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1.0));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(openMapRealVector0, relationship0, (-1277.180234531211));
      linkedList0.addLast(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1.0E-12);
      simplexTableau0.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 3406.38);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 2678.7267819394165, relationship0, doubleArray0, (-2694.9524));
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0, (-1377));
      simplexTableau0.dropPhase1Objective();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, (-0.999999999999));
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0E-12, 0);
      // Undeclared exception!
      try { 
        simplexTableau0.subtractRow(0, (-2751), (-795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-2,751)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2318, 2318);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1.0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 1496.451441978, 2318);
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(1.0, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2660.3349217959);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2660.3349217959);
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 13.997017716372785;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector1, 13.997017716372785);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 13.997017716372785);
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, 2678.7267819394165, relationship0, doubleArray0, 2678.7267819394165);
      linkedList0.add(linearConstraint0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2678.7267819394165);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 2678.7267819394165, (-1064));
      simplexTableau0.dropPhase1Objective();
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertEquals(2678.7267819394165, realPointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1.0);
      // Undeclared exception!
      try { 
        simplexTableau0.setEntry(1797, 258, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,797)
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 1154.2584777);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 1154.2584777);
      double[][] doubleArray1 = simplexTableau0.getData();
      assertEquals(1, doubleArray1.length);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 14:49:31 GMT 2022
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.WarningLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WarningLevel_ESTest extends WarningLevel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WarningLevel[] warningLevelArray0 = WarningLevel.values();
      assertEquals(3, warningLevelArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WarningLevel warningLevel0 = WarningLevel.DEFAULT;
      // Undeclared exception!
      try { 
        warningLevel0.setOptionsForWarningLevel((CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.WarningLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WarningLevel warningLevel0 = WarningLevel.VERBOSE;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      warningLevel0.setOptionsForWarningLevel(compilerOptions0);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      WarningLevel warningLevel0 = WarningLevel.DEFAULT;
      warningLevel0.setOptionsForWarningLevel(compilerOptions0);
      assertTrue(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.checkSuspiciousCode);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      WarningLevel warningLevel0 = WarningLevel.valueOf("QUIET");
      warningLevel0.setOptionsForWarningLevel(compilerOptions0);
      assertFalse(compilerOptions0.deadAssignmentElimination);
  }
}

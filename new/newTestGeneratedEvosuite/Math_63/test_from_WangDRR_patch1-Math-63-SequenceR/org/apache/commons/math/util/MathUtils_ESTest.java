/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 16:12:54 GMT 2022
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1851.0542592215609;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1275;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 1,275)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1073741823);
      MathUtils.distanceInf(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      MathUtils.distanceInf(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      MathUtils.distance(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 63;
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        MathUtils.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 670;
      MathUtils.distance1(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.pow(6722166367014452318L, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.pow(12, (long) 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.pow((-613), 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.scalb((-1424L), 2751);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.lcm((-5L), (long) (-523170343));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.lcm((long) 632988495, (long) 1017);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.lcm((-335), (-80));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.lcm((-843), 429);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.indicator(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.indicator(504.8145206187);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.gcd((long) 0, (-26L));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.gcd(0, (-1099));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.factorialDouble((short)0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.factorialDouble(20);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals((-3339.7523607763806), 2902.06044211945, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.equalsIncludingNaN(667.63292991503, 1.4456468917292502E-16, 667.63292991503);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.equals((-566.0), (double) 1, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.equals((double) 41, (double) 9);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.cosh(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, (-1063895040));
  }

//   @Test(timeout = 4000)
//   public void test031()  throws Throwable  {
//       MathUtils.subAndCheck((-9223372036854775808L), 194L);
//   }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.addAndCheck((long) 0, (-4280L));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.subAndCheck(9154082963658192752L, 9154082963658192752L);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.subAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.subAndCheck((-1025), (int) (short)940);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.sinh(0L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.sinh(114.0342117814617);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.scalb(3668.107283209062, 124);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.round(0.0F, 7958);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.round((float) 11, 11);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.round((-1496.7F), 11);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.round(0.0, 2658);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.round(0.6748413502920589, 2658);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
      MathUtils.pow(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = BigInteger.ONE;
      MathUtils.pow(bigInteger1, bigInteger2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (int) (short)2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      MathUtils.pow(bigInteger1, (int) (short)3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathUtils.pow((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.pow(4095L, 2432902008176640000L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.pow(61152508359336418L, 100);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.pow(2047L, 3477);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.pow(82, 40320L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.pow(19, 201L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.pow(104, 104);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.normalizeAngle(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.normalizeAngle((-180.95953792), (-1423.0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.mulAndCheck(4357, 0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathUtils.mulAndCheck(7958, 7958);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.log((short)10, (short)1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MathUtils.log(1.1102230246251565E-16, 0.5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.log(1702.87874695369, 1.8189894035458565E-12);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 124;
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.hash((double) 14);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[6];
      MathUtils.distanceInf(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[8];
      intArray1[0] = Integer.MIN_VALUE;
      MathUtils.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[8];
      MathUtils.distance1(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 41;
      int[] intArray1 = new int[5];
      MathUtils.distance(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1L;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 6722166367014452318L);
      MathUtils.distance(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MathUtils.addAndCheck(2146982016, 30);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-2175.3), 61, 66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        MathUtils.pow(bigInteger0, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, (long) (short)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.pow((BigInteger) null, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog(2113396605);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialDouble(2126221433);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[7];
      // Undeclared exception!
      try { 
        MathUtils.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        MathUtils.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[8];
      // Undeclared exception!
      try { 
        MathUtils.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(11, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 11, k = 17
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientDouble(2146435072, 2134227576);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 0, k = 9
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4577762542105553392L, 4577762542105553392L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MathUtils.mulAndCheck((long) 0, 90L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MathUtils.mulAndCheck((long) (-1), 9197687445229928448L);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (-4565538178601058324L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathUtils.mulAndCheck((-1424L), (-1L));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MathUtils.mulAndCheck(62681L, 62681L);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2147409012, 63);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathUtils.mulAndCheck((-1282), 14);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathUtils.indicator(2390.81F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathUtils.indicator((-2553.608F));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathUtils.gcd(5040L, 5040L);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MathUtils.gcd(6068, (int) (byte)110);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MathUtils.gcd(2146982046, 2146982046);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathUtils.factorialLog(41);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MathUtils.factorial((short)0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathUtils.equals(7535403.0, 7535403.0, 2731);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathUtils.equals((double) (-1984L), (double) 632988495, 1876);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(3.834E-20, (double) 9, 2146379532);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathUtils.equals(3.141592653589793, (-960.64706), 183);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MathUtils.equals((double) 0, 1.494140625, 1.494140625);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathUtils.equals((double) 636L, 1486.86071375, (double) (-1015683981));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) Float.NaN, (double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathUtils.equalsIncludingNaN(1851.0542592215609, 1851.0542592215609);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathUtils.equals((double) 4, (double) 4);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(4357, 15);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(1075, (-1396));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) Float.NaN;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = Double.POSITIVE_INFINITY;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) (-4565538178601058304L);
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4095L;
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1,781.819)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 267.7467614837482;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1,781.819 > 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1781.819183711;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,781.819 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.checkOrder(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.distance1(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      try { 
        MathUtils.pow(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-89,060,441,849,856^-89,060,441,849,856)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MathUtils.pow(bigInteger0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 41);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)100, mockRandom0);
      try { 
        MathUtils.pow(bigInteger0, (-1838L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (633,825,300,132,561,444,830,651,089,027^-1,838)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MathUtils.pow(bigInteger0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        MathUtils.pow(bigInteger0, (-694));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (10^-694)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        MathUtils.pow((-8L), (-2961L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-8^-2,961)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathUtils.pow(5040L, 5040L);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        MathUtils.pow(49L, (-1908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (49^-1,908)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        MathUtils.pow(20, (-136427955086L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (20^-136,427,955,086)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        MathUtils.pow(132, (-2083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (132^-2,083)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MathUtils.pow(13, 14);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathUtils.subAndCheck((-38L), (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathUtils.subAndCheck(0, (-107));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathUtils.sign((short) (-722));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathUtils.sign((short)559);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathUtils.sign(2156L);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathUtils.sign(0L);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathUtils.sign((-4233L));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MathUtils.sign((-1353));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathUtils.sign(14);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MathUtils.sign((float) (-4203L));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathUtils.sign((double) (-1423L));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MathUtils.sign((double) 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MathUtils.sign(2841.0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathUtils.sign((byte) (-106));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathUtils.sign((byte)127);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathUtils.round(1697.593F, (-699), 3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-1423L), (int) (byte)44, 802);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 802, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MathUtils.round(46.66F, 7, 7);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathUtils.round((float) 3471, 113, 5);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathUtils.round((float) (-1025), (-699), 3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathUtils.round((float) (short)13, (-579), (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathUtils.round(Float.NaN, (-1063895040), 0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2211.4501);
      doubleArray0[1] = Double.NaN;
      MathUtils.normalizeArray(doubleArray0, 468.8855094009);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = Double.NaN;
      try { 
        MathUtils.normalizeArray(doubleArray0, 468.8855094009);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      try { 
        MathUtils.normalizeArray(doubleArray0, 1008.584223);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 6
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      try { 
        MathUtils.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.normalizeArray((double[]) null, 681.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathUtils.scalb(Double.NaN, 125);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathUtils.scalb(0L, 97);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MathUtils.mulAndCheck((long) 1, (long) 0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-756L), 9197687445229928448L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MathUtils.mulAndCheck(72L, (-923L));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathUtils.mulAndCheck((-1424L), (long) 0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(731, 1603333731);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(14, (-715827883));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test192()  throws Throwable  {
//       // Undeclared exception!
//       try { 
//         MathUtils.lcm((long) (-1), (-9223372036854775808L));
//        //  fail("Expecting exception: ArithmeticException");
//        // Unstable assertion
//       } catch(ArithmeticException e) {
//          //
//          // overflow: lcm(-1, -9,223,372,036,854,775,808) is 2^63
//          //
//          verifyException("org.apache.commons.math.MathRuntimeException", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MathUtils.lcm((long) (-3044), (long) 0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MathUtils.lcm(0L, 549L);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MathUtils.lcm(4, 0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MathUtils.lcm(0, 0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MathUtils.indicator((short)2432);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MathUtils.indicator((short) (-9438));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MathUtils.indicator(1671L);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MathUtils.indicator((-1424L));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MathUtils.indicator(2878);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MathUtils.indicator((-158));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MathUtils.round((-1.0F), (-699), 2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MathUtils.indicator(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MathUtils.indicator((-2479.754));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MathUtils.indicator((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MathUtils.indicator(0.0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MathUtils.indicator((byte)1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MathUtils.indicator((byte) (-25));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MathUtils.gcd(5040L, 1L);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-1342L), (-4564488382293475328L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MathUtils.gcd(619L, (-1L));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MathUtils.gcd(39L, 0L);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MathUtils.gcd((-3933L), 4369852279402070330L);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MathUtils.gcd(0L, (long) 0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MathUtils.gcd((int) (short)1, (-3103));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MathUtils.gcd((-1299), 3108);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MathUtils.gcd(9, 0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MathUtils.gcd(0, 0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-1590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,590
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MathUtils.factorialDouble((byte)127);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(9970);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,431,655,764
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = new double[9];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MathUtils.equalsIncludingNaN(0.49999999999999994, 0.49999999999999994, 7);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MathUtils.equalsIncludingNaN(Double.NaN, 408.3528133796, 85);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MathUtils.compareTo(Float.NaN, Float.NaN, Float.NaN);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equalsIncludingNaN((double) 2146982046, (double) 30, 4194304);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.equals(Double.NaN, 3.834E-20, (-558));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MathUtils.equalsIncludingNaN(10.0, (-0.12502530217170715), 1524.8942);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-3031.018331), (double) Float.NaN, (double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MathUtils.equals((-5904.1538039), (-5904.1538039), (-5904.1538039));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MathUtils.equalsIncludingNaN((-1473.4), (-1473.4), (-1473.4));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MathUtils.equalsIncludingNaN((double) Float.NaN, (-3031.018331));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MathUtils.compareTo(41, 3.3452526613163927E49, (-2479.754));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MathUtils.compareTo(11, 1.4456468917292502E-16, 11);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-80), (-80));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -80
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientLog(2147483640, 1073741824);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1073741824, 55);
      assertEquals(975.3654010924661, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1701, 1701);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(783, (-2686));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(3, 1);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(11, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble((short)13, (short)13);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(4194304, (byte)127);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(66, (-399));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble((short)13, 8);
      assertEquals(1287.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(7958, (-13273944));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(76, (byte)1);
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(4194304, 4194304);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9223372036854775770L, 4062L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 4,062 + 9,223,372,036,854,775,770
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-9223372036854775808L), 1167L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,808 + -1,167
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) 2146982016, (long) 11);
      assertEquals(2146982027L, long0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-1L), 115L);
      assertEquals((-116L), long0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(Integer.MAX_VALUE, 130);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 2,147,483,647 + 130
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-1467), (-1467));
      assertEquals((-2934), int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2147483647), (-248));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -2,147,483,647 + -248
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double double0 = MathUtils.round((double) (-1424L), 2544);
      assertEquals((-1424.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(41, 41);
      assertEquals(41.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MathUtils.sinh((-735.82354715));
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(29791, int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = MathUtils.hash((-2030.07051));
      assertEquals((-212223902), int0);
  }
}

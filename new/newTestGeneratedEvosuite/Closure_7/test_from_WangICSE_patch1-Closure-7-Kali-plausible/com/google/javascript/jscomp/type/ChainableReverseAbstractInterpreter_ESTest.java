/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 15 17:00:03 GMT 2022
 */

package com.google.javascript.jscomp.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnionType;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChainableReverseAbstractInterpreter_ESTest extends ChainableReverseAbstractInterpreter_ESTest_scaffolding {

//   @Test(timeout = 4000)
//   public void test000()  throws Throwable  {
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       Node node0 = new Node(33);
//       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
//       node0.addChildToFront(node0);
//       modificationVisitor0.caseVoidType();
//       // Undeclared exception!
//       semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
//   }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(233, 233, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType0.getElementsType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType1, "function", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType1, "function", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(233, 233, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, (JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      Node node0 = new Node(1);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("^` XA/y'}41a", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getConstructor();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "function", true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "function", true);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      simpleErrorReporter0.error("yz", (String) null, 1, 1);
      Node node0 = new Node(0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Named type with empty name component", node0, jSType0);
      enumType0.toMaybeEnumType();
      enumType0.getElementsType();
      Node node1 = new Node(843, node0, node0, node0, node0, 29, 1);
      JSType.toMaybeFunctionType((JSType) enumType0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "undefined", true);
      assertTrue(jSType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(33);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(2, node0, node0, node0);
      node0.addChildToFront(node1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(1014, 233, 233);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      simpleErrorReporter0.warning(":DJK)|5*/w$y{t", "Unknown class name", (-915), 38);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      jqueryCodingConvention0.isValidEnumKey("|/uE@SN");
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention2 = new JqueryCodingConvention(jqueryCodingConvention1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      EnumElementType enumElementType1 = (EnumElementType)closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(enumElementType0);
      assertFalse(enumElementType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = Node.newString("string");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      simpleErrorReporter0.error("Named type with empty name component", "Unknown class name", 204, 123);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      googleCodingConvention0.isPrototypeAlias(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(33);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      Node node1 = new Node(2, node0, node0, node0);
      node0.addChildToFront(node1);
      modificationVisitor0.caseVoidType();
      FlowScope flowScope0 = semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(233, 233, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      node0.getSourceFileName();
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "number", false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      jSType1.forceResolve(simpleErrorReporter1, enumElementType0);
      JSType jSType2 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "m62H/dh>/udVsZ?z", false);
      assertTrue(jSType2.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType jSType1 = closureReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noObjectType0, "NoObject", false);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry3.getDirectImplementors(noObjectType0);
      jSTypeRegistry3.registerPropertyOnType("Not declared as a constructor", functionType0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      FunctionType functionType1 = (FunctionType)semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(functionType0);
      assertFalse(functionType1.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", true);
      assertEquals(BooleanLiteralSet.TRUE, jSType1.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.registerPropertyOnType("vR&'OQgNb\"LS8", jSType0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(unionType0).getAlternates();
      // Undeclared exception!
      try { 
        modificationVisitor0.caseUnionType(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ERnOR_FUNCTIwN_TYPE", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getConstructor();
      Node node1 = new Node(1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      jSTypeRegistry1.createNullableType(enumType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTypeOfResultVisitor", true);
      jSTypeRegistry0.registerPropertyOnType("%tT2:i#FdO}f", enumElementType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(enumElementType0);
      assertFalse(jSType1.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(1, (-227454802), (-2097642732));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      jSType0.isDateType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
      assertFalse(jSType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$1", true);
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "boolean", true);
      assertTrue(jSType2.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry2);
      simpleErrorReporter1.error("Unknown class name", "Node cannot be refined. \n", 1, 329);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Named type with empty name component", false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "boolean", true);
      assertFalse(jSType1.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(38);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(googleCodingConvention0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isRecordType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[3];
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "wY", false);
      jSTypeArray0[0] = jSType2;
      JSType jSType3 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSTypeArray0[0]);
      jSTypeArray0[1] = jSType3;
      JSType jSType4 = modificationVisitor0.caseNullType();
      jSTypeArray0[2] = jSType4;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      jqueryCodingConvention0.describeFunctionBind(node0);
      Node node1 = Node.newString("Node cannot be refined. \n", 1283, 8192);
      googleCodingConvention1.describeFunctionBind(node1, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      closureReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      closureReverseAbstractInterpreter1.nextPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      FlowScope flowScope0 = closureReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseBooleanType();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType2 = jSTypeRegistry0.createNullableType(jSType1);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, " ([3;,Z,I_&F6NEE*", false);
      jSTypeRegistry1.registerPropertyOnType("JSn%c7-+B", jSType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      JSType jSType3 = semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType2);
      assertFalse(jSType3.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(233, 233, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
      assertSame(enumElementType0, jSType1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ERnOR_FUNCTIwN_TYPE", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.registerPropertyOnType("object", jSType0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(1469);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("object", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumType0.getElementsType();
      enumElementType0.getConstructor();
      Node node1 = new Node(995);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "lo,yZf.}(", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      Node node2 = new Node((-1525));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(enumElementType1);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(enumType1, "Named type with empty name component", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(233, 233, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType.toMaybeTemplateType((JSType) functionType0);
      Node node0 = new Node(0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseBooleanType();
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, "ASSIGN_ADD", true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter2, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Named type with empty name component", true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry2);
      Node node1 = new Node((-482884500));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull(parameterizedType0);
      assertSame(jSType0, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)closureReverseAbstractInterpreter0.getFirst();
      Node node0 = new Node(5);
      Node node1 = new Node(5, node0, node0, node0, node0);
      Node node2 = Node.newString(0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", 46, 16);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
      closureReverseAbstractInterpreter1.firstPreciserScopeKnowingConditionOutcome(node2, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter1.nextPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = (ClosureReverseAbstractInterpreter)closureReverseAbstractInterpreter0.getFirst();
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
      ParameterizedType parameterizedType1 = (ParameterizedType)closureReverseAbstractInterpreter2.getRestrictedWithoutNull(parameterizedType0);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      JSType.toMaybeTemplateType(jSType0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "string", true);
      assertFalse(jSType1.isNominalType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "undefined", true);
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ModificationVisitor modificationVisitor1 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      Node node0 = Node.newNumber((double) 0, 366, 366);
      googleCodingConvention0.isPrototypeAlias(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention1);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative1 = JSTypeNative.VOID_TYPE;
      semanticReverseAbstractInterpreter2.getNativeType(jSTypeNative1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry2.createNullableType(jSType0);
      semanticReverseAbstractInterpreter2.getRestrictedByTypeOfResult(jSType0, "k9#lRJyquL=[w(0Nb2", true);
      jSTypeRegistry0.registerPropertyOnType("Not declared as a constructor", jSType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter3 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      JSType jSType2 = semanticReverseAbstractInterpreter2.getRestrictedWithoutNull((JSType) null);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) null);
      Node node0 = new Node(33);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      modificationVisitor0.caseVoidType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(33);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createNullableType(jSType0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "object", false);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) null);
      Node node0 = new Node(33);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias((Node) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      jSType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      jSType1.getRestrictedTypeGivenToBooleanOutcome(true);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Unknown class name", false);
      boolean boolean0 = true;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = null;
      try {
        closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter((CodingConvention) null, jSTypeRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "number", true);
      assertFalse(jSType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      googleCodingConvention0.isPrototypeAlias(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative1 = JSTypeNative.UNKNOWN_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNoType();
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Named type with empty name component", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry1.registerPropertyOnType("Named type with empty name component", jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType3 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType2);
      assertEquals(BooleanLiteralSet.EMPTY, jSType3.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(38, 38, 38);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertSame(jSType1, jSType0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-3046), (-3046), (-3046));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = new Node(46, node0, node0, node0);
      googleCodingConvention0.isPrototypeAlias(node1);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(functionType0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.registerPropertyOnType("Not declared as a constructor", (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

//   @Test(timeout = 4000)
//   public void test044()  throws Throwable  {
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
//       JSType jSType0 = modificationVisitor0.caseNoObjectType();
//       JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
//       JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Not declared as a constructor", false);
//       assertFalse(jSType2.isEnumElementType());
//   }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      jqueryCodingConvention0.isConstant("Z6J");
      Node node0 = new Node((-2032));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Named type with empty name component", false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(1, 0, (-2219));
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      Node node1 = new Node((-1391));
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry2);
      closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType0);
      closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", true);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getTypeIfRefinable(node1, (FlowScope) null);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning((String) null, (String) null, 2, 2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(1, 1, 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("BhW8_0BjFTx(", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getConstructor();
      JSType.toMaybeTemplateType((JSType) enumType0);
      Node node1 = new Node(52);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType1, "Not declared as a constructor", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(enumType0);
      closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "Unknown class name", true);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      Node node2 = new Node(30);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Unknown class name", true);
      JSType jSType2 = semanticReverseAbstractInterpreter1.getTypeIfRefinable(node2, (FlowScope) null);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node((-1736351141));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ERROR_FUNCTION_TYPE", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumType1.getElementsType();
      enumElementType1.getConstructor();
      JSType.toMaybeTemplateType((JSType) null);
      Node node1 = new Node(42);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node1, enumElementType0);
      assertFalse(node1.isIn());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      Node node0 = new Node(1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
      jSType0.isNumberObjectType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "[>|^dU{ +cxNv]&C", false);
      assertFalse(jSType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node((-1736351141));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ERROR_FUNCTION_TYPE", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumType0.getElementsType();
      enumElementType1.getConstructor();
      JSType.toMaybeTemplateType((JSType) null);
      FlowScope flowScope0 = null;
      Node node1 = new Node(42);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      boolean boolean0 = false;
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType0, "Unknown class name", false);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Not declared as a type name", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType[] jSTypeArray0 = new JSType[4];
      enumElementType0.getImplicitPrototype();
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) enumElementType0;
      jSTypeArray0[2] = (JSType) enumElementType1;
      jSTypeArray0[3] = (JSType) enumElementType0;
      FunctionType functionType0 = jSTypeRegistry1.createConstructorType((JSType) null, jSTypeArray0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter1.declareNameInScope((FlowScope) null, node0, functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1736351141
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("$R'n!:5D#", (-261), (-261));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      node0.isFromExterns();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType.toMaybeFunctionType((JSType) null);
      JSType.toMaybeTemplateType((JSType) null);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "function");
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "c$(u:uk )2dU7fTn+w", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) null, jSType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(62, (-2767), 1);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) enumType0, (List<JSType>) linkedList0);
      jSTypeRegistry1.registerPropertyOnType("Unknown class name", functionType0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      assertFalse(jSType2.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      jSTypeRegistry0.getNativeType(jSTypeNative0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "`9t%2;Jk4c8{XE", true);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getTypeIfRefinable((Node) null, (FlowScope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      EnumElementType enumElementType1 = (EnumElementType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
      assertEquals("Unknown class name", enumElementType1.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node((-1736351141));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ERROR_FUNCTION_TYPE", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumType1.getElementsType();
      enumElementType1.getConstructor();
      JSType.toMaybeTemplateType((JSType) null);
      Node node1 = new Node(42);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType1, "Unknown class name", true);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Not declared as a type name", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      Node node2 = new Node(15);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(enumElementType1);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a type name", true);
      assertTrue(jSType1.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "pFBdoI|", true);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertNotSame(jSType1, jSType0);
      assertNotNull(jSType1);
  }

//   @Test(timeout = 4000)
//   public void test057()  throws Throwable  {
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "4Jq{bOBF1Q.aI>#WsK", true);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "object", true);
//       closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType1);
//       JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
//       JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
//       jSTypeNativeArray0[0] = jSTypeNative0;
//       JSTypeNative jSTypeNative1 = JSTypeNative.NO_TYPE;
//       jSTypeNativeArray0[1] = jSTypeNative1;
//       JSTypeNative jSTypeNative2 = JSTypeNative.URI_ERROR_TYPE;
//       jSTypeNativeArray0[2] = jSTypeNative2;
//       JSTypeNative jSTypeNative3 = JSTypeNative.SYNTAX_ERROR_TYPE;
//       jSTypeNativeArray0[3] = jSTypeNative3;
//       JSTypeNative jSTypeNative4 = JSTypeNative.URI_ERROR_TYPE;
//       jSTypeNativeArray0[4] = jSTypeNative4;
//       JSTypeNative jSTypeNative5 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
//       jSTypeNativeArray0[5] = jSTypeNative5;
//       JSType jSType2 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
//       JSType jSType3 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType2, "Not declared as a constructor", false);
//       assertNull(jSType3);
//   }

//   @Test(timeout = 4000)
//   public void test058()  throws Throwable  {
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
//       ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention1);
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
//       Node node0 = Node.newString("pw[2Ww-e");
//       closureCodingConvention0.isPrototypeAlias(node0);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.getFirst();
//       FlowScope flowScope0 = null;
//       Node node1 = Node.newString("!b2qih");
//       simpleErrorReporter0.warning("", "wleiWx[FK1u9oM#^!", (-2101866682), 49);
//       Node node2 = new Node(353, node1, node1, node1, node1, 1610, 49);
//       Node node3 = node1.srcrefTree(node2);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
//       JSType jSType0 = null;
//       semanticReverseAbstractInterpreter2.nextPreciserScopeKnowingConditionOutcome(node3, (FlowScope) null, false);
//       String string0 = "xPz>wl[sT";
//       jqueryCodingConvention0.isConstant(string0);
//       semanticReverseAbstractInterpreter1.declareNameInScope(flowScope0, node2, jSType0);
//       boolean boolean0 = true;
//       FlowScope flowScope1 = semanticReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node2, flowScope0, boolean0);
//       semanticReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
//       semanticReverseAbstractInterpreter2.append(semanticReverseAbstractInterpreter0);
//       boolean boolean1 = false;
//       semanticReverseAbstractInterpreter2.firstPreciserScopeKnowingConditionOutcome(node0, flowScope1, boolean1);
//   }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      simpleErrorReporter0.error((String) null, (String) null, 0, (-441556378));
      JSType jSType1 = modificationVisitor0.caseNumberType();
      jSTypeRegistry0.registerPropertyOnType("rH3|Pl2Kh4}V=6W(", jSType1);
      jSTypeRegistry1.createNullableType(jSType0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry1);
      closureReverseAbstractInterpreter2.getRestrictedByTypeOfResult(jSType0, "*:Z+:BN@", true);
      JqueryCodingConvention jqueryCodingConvention2 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention2, jSTypeRegistry0);
      JSType jSType2 = semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType1);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      simpleErrorReporter0.error("Unknown class name", (String) null, 0, 1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNumberType();
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      jSTypeRegistry0.registerPropertyOnType((String) null, jSType0);
      jSTypeRegistry0.createNullableType(jSType0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", true);
      JqueryCodingConvention jqueryCodingConvention2 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      Node node0 = new Node((-3046), (-3046), 3254);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      googleCodingConvention0.isPrototypeAlias(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$1", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      jSTypeRegistry0.registerPropertyOnType("com.google.common.collect.Lists$2", jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType2 = semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(jSType1);
      assertFalse(jSType2.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(38);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "}l%{.)", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(38);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, nodeArray0[0], jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-85), 33, 33);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias((Node) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      simpleErrorReporter0.warning("Not declared as a type name", "Not declared as a type name", 30, 1846);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "string", false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType2 = closureReverseAbstractInterpreter2.getRestrictedWithoutNull(jSType1);
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", false);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(closureCodingConvention0);
      JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
      assertNotSame(jSType0, jSType2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "4Jq{bOBF1Q.aI>#WsK", true);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "object", true);
      assertNotNull(jSType1);
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Not declared as a constructor", true);
      JSType jSType3 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType2);
      assertNotSame(jSType0, jSType3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning((String) null, (String) null, 2, 2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias((Node) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a constructor", false);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isNullable());
  }

//   @Test(timeout = 4000)
//   public void test068()  throws Throwable  {
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
//       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
//       Node node0 = new Node((-85), 33, 33);
//       GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
//       googleCodingConvention0.isPrototypeAlias((Node) null);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
//       simpleErrorReporter0.warning("Not declared as a type name", "Not declared as a type name", 30, 1846);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
//       JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
//       semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "string", false);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType0);
//       JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "8TK#", false);
//       assertNull(jSType1);
//   }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertEquals("string", jSType1.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$2", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(38);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNoType();
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Named type with empty name component", true);
      assertFalse(jSType2.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType.toMaybeTemplateType(jSType0);
      FlowScope flowScope0 = null;
      Node node0 = new Node(0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType1 = jSTypeRegistry1.getGreatestSubtypeWithProperty((JSType) null, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTrueTypeOfResultVisitor");
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Not declared as a type name", false);
      jSType1.isString();
      boolean boolean0 = true;
      node0.getJSType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, (JSType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(62, 0, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
      enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      NoObjectType noObjectType0 = (NoObjectType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertNull(noObjectType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(0);
      GoogleCodingConvention googleCodingConvention2 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = Node.newString("end index", 49, 2);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node1, jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // STRING end index 49
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(154);
      GoogleCodingConvention googleCodingConvention2 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = Node.newString("uFaxdv*6", 95, 70);
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, true);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // STRING_KEY
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
      assertNotSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      JSType jSType0 = modificationVisitor0.caseNullType();
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node((-641));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      Node node1 = Node.newString("Named type with empty name component", (-1796011074), 2);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node1, (JSType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // STRING Named type with empty name component
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noObjectType0, noObjectType0);
      ParameterizedType parameterizedType1 = (ParameterizedType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, "Named type with empty name component", true);
      assertFalse(noObjectType0.hasCachedValues());
      assertNull(parameterizedType1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeParameterizedType(jSType0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, jSType0);
      ParameterizedType parameterizedType1 = parameterizedType0.toMaybeParameterizedType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType1, "Not declared as a constructor", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.registerPropertyOnType("Named type with empty name component", parameterizedType1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "com.google.javascript.rhino.jstype.TemplateType", true);
      assertFalse(jSType1.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseNoObjectType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a type name", true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a constructor", (Node) null, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType0.getImplicitPrototype();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType1, "Not an assUgnment opX", false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      modificationVisitor0.caseObjectType(enumType0);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, "Named type with empty name component", false);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Named type with empty name component", true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node((-1736351141));
      EnumType enumType0 = jSTypeRegistry0.createEnumType("ERROR_FUNCTION_TYPE", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getConstructor();
      JSType.toMaybeTemplateType((JSType) null);
      FlowScope flowScope0 = null;
      Node node1 = new Node(42);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      boolean boolean0 = true;
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumType1, "Unknown class name", true);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Not declared as a type name", true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType[] jSTypeArray0 = new JSType[4];
      enumElementType0.getImplicitPrototype();
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) enumElementType0;
      jSTypeArray0[2] = (JSType) enumElementType1;
      jSTypeArray0[3] = (JSType) enumElementType0;
      FunctionType functionType0 = jSTypeRegistry1.createConstructorType((JSType) null, jSTypeArray0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter1.declareNameInScope((FlowScope) null, node0, functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1736351141
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      JSType jSType0 = jSTypeRegistry1.getNativeType(jSTypeNative0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node((-3046), (-3046), (-3046));
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      googleCodingConvention0.isPrototypeAlias((Node) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.registerPropertyOnType("SWITCH", (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention1);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, (String) null, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry1.registerPropertyOnType("CharMatcher.SINGLE_WIDTH", (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = Node.newString("Unknown class name", 0, 1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      node0.isFromExterns();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
      Node node1 = Node.newString("Named type with empty name component", 1, 30);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node1, (JSType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // STRING Named type with empty name component 1
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(22, 22, 22);
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ":6p7I JX", false);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "<mXKhM", false);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias((Node) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", false);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isNoType());
  }

//   @Test(timeout = 4000)
//   public void test093()  throws Throwable  {
//       JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
//       Node node0 = new Node(22, 22, 22);
//       node0.removeProp(1922);
//       googleCodingConvention0.isPrototypeAlias(node0);
//       SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
//       JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
//       JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_TYPE;
//       jSTypeNativeArray0[0] = jSTypeNative0;
//       JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
//       jSTypeNativeArray0[1] = jSTypeNative1;
//       JSTypeNative jSTypeNative2 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
//       jSTypeNativeArray0[2] = jSTypeNative2;
//       JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
//       closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
//       JSTypeNative jSTypeNative3 = JSTypeNative.REGEXP_TYPE;
//       JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative3);
//       semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, ":6p7I JX", false);
//       JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "X&Q_h(O/9TVbSj,", false);
//       assertNull(jSType2);
//   }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(38);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      FlowScope flowScope0 = null;
      Node node0 = new Node(38);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      boolean boolean0 = false;
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "~SLH^&KduI.uG\"_?|", false);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "{Y=KJG-O", true);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
      //  // Unstable assertion: assertNull(jSType1);
      
      jSTypeRegistry0.registerPropertyOnType("Named type with empty name component", jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      //  // Unstable assertion: assertSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter1);
      
      semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      //  // Unstable assertion: assertNotSame(semanticReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter1.getRestrictedWithoutNull(jSType0);
      assertSame(jSType0, jSType1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention1);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      FlowScope flowScope0 = null;
      Node node0 = new Node(2743);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "kGLX", false);
      jSType1.isString();
      boolean boolean0 = true;
      closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType1, "com.google.javascript.rhino.jstype.VoidType", true);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, jSType1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2743
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) null);
      LinkedHashSet<EnumElementType> linkedHashSet0 = new LinkedHashSet<EnumElementType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(linkedHashSet0);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(unionType0).isAllType();
      doReturn(false).when(unionType0).isNoType();
      doReturn(linkedList0).when(unionType0).getAlternates();
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType jSType2 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "number to advance cannot be negative", false);
      assertFalse(jSType2.isUnionType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      Node node0 = new Node(75);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      boolean boolean0 = false;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType2 = closureReverseAbstractInterpreter2.getRestrictedByTypeOfResult(jSType1, "undefined", false);
      jSType1.isString();
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType2, "lN/uO|B[X0ID#^_YU", false);
      boolean boolean1 = false;
      semanticReverseAbstractInterpreter1.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter1.declareNameInScope((FlowScope) null, node0, (JSType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 75
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
      assertFalse(jSType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("W.Uer[%vf8s/qJ", "`2", (-2073794324), (-2073794324));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "'n9c", false);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention1);
      Node node0 = Node.newNumber((double) 0, 1, 1);
      googleCodingConvention0.isPrototypeAlias(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention1);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry2);
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSType jSType2 = jSTypeRegistry0.createNullableType(jSType0);
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(jSType2, "&.\")", false);
      JSTypeRegistry jSTypeRegistry3 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry2.registerPropertyOnType("Not declared as a type name", jSType2);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry3);
      JSType jSType3 = semanticReverseAbstractInterpreter1.getRestrictedWithoutUndefined(jSType1);
      assertTrue(jSType3.isUnionType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", false);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(unionType0).getAlternates();
      // Undeclared exception!
      try { 
        modificationVisitor0.caseUnionType(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(22);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>(15, 2);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(unionType0).getAlternates();
      doReturn(47).when(unionType0).visit(any(com.google.javascript.rhino.jstype.Visitor.class));
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.google.javascript.rhino.jstype.JSType
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      jSTypeRegistry1.hasNamespace("{`@\"7lP");
      JSType[] jSTypeArray0 = new JSType[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSTypeArray0[1]);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry1.createFunctionTypeWithVarArgs((ObjectType) null, jSTypeArray0[2], (List<JSType>) linkedList0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isNoType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias((Node) null);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      googleCodingConvention0.isPrototypeAlias((Node) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeParameterizedType((JSType) null);
      ObjectType.cast((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSType jSType0 = jSTypeRegistry0.createNullableType(objectType0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isRecordType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newNumber(1.0);
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative1 = JSTypeNative.NULL_VOID;
      semanticReverseAbstractInterpreter1.getNativeType(jSTypeNative1);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "object", true);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a constructor", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter2 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType2 = semanticReverseAbstractInterpreter2.getRestrictedWithoutUndefined(jSType1);
      assertTrue(jSType2.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      modificationVisitor0.caseBooleanType();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      modificationVisitor0.caseNumberType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)closureReverseAbstractInterpreter2.getRestrictedByTypeOfResult(jSType0, "function", true);
      assertNull(noObjectType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber(0.0);
      jqueryCodingConvention0.describeFunctionBind(node0);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeRegistry0.createConstructorType(jSTypeArray0[0], jSTypeArray0);
      jSTypeArray0[2].differsFrom(jSTypeArray0[2]);
      jSTypeRegistry0.createFunctionType(jSTypeArray0[1], jSTypeArray0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSTypeArray0[2], "Not declared as a type name", false);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSTypeArray0[0]);
      assertFalse(jSType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
      assertFalse(jSType1.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(22);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(unionType0).getAlternates();
      // Undeclared exception!
      try { 
        modificationVisitor0.caseUnionType(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "object", true);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "VV ", true);
      assertTrue(jSType1.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      JSType jSType1 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, jSType0, (List<JSType>) linkedList0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType1, jSTypeArray0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(38);
      nodeArray0[0] = node0;
      JSTypeNative jSTypeNative1 = JSTypeNative.TYPE_ERROR_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative1);
      Node node1 = new Node(1, nodeArray0, (-2073794324), 55);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, functionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(38);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      jSTypeRegistry1.hasNamespace("{`@\"7lP");
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = new Node(0);
      Node node1 = new Node(36, node0, node0, node0, node0);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a constructor", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      ObjectType objectType0 = enumType1.getImplicitPrototype();
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) enumType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[0] = (JSType) enumType0;
      jSTypeArray0[5] = (JSType) objectType0;
      jSTypeArray0[6] = (JSType) enumType1;
      jSTypeArray0[7] = jSType0;
      FunctionType functionType0 = jSTypeRegistry1.createConstructorType(jSTypeArray0[0], jSTypeArray0);
      jSType0.differsFrom(functionType0);
      jSTypeRegistry1.createFunctionType((JSType) objectType0, jSTypeArray0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSTypeArray0[6], "And(", false);
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumType1);
      assertFalse(jSType1.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "4Jq{bOBF1Q.aI>#WsK", true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "}Y1;KD~MIR;bY/+Z+Fr", true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "number", true);
      assertFalse(jSType1.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter1);
      boolean boolean0 = false;
      semanticReverseAbstractInterpreter1.getRestrictedByTypeOfResult(objectType0, "Not declared as a constructor", true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a constructor", true);
      Node node0 = Node.newString("ir<VX8");
      FlowScope flowScope0 = null;
      node0.cloneTree();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome((Node) null, (FlowScope) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "object", true);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter1.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "Not declared as a type name", true);
      JSType jSType1 = closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult((JSType) null, "string", true);
      assertFalse(jSType1.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(22);
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
      closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(objectType0, "Not declared as a constructor", false);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, "Not declared as a constructor", true);
      node0.cloneTree();
      node0.setVarArgs(false);
      JSType jSType0 = closureReverseAbstractInterpreter1.getRestrictedWithoutUndefined((JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber(0.0);
      jqueryCodingConvention0.describeFunctionBind(node0);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = jSType0;
      semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      jSTypeArray0[4] = jSType1;
      JSType.toMaybeTemplateType(jSTypeArray0[0]);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, jSType1, (List<JSType>) linkedList0);
      jSTypeArray0[5] = jSType2;
      jSTypeArray0[6] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, functionType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // NUMBER 0.0
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[6] = jSType0;
      jSTypeArray0[7] = jSType0;
      jSTypeArray0[8] = jSType0;
      jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      modificationVisitor0.caseStringType();
      Iterable<JSType> iterable0 = jSTypeRegistry1.getTypesWithProperty("Not declared as a constructor");
      UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
      doReturn(iterable0).when(unionType0).getAlternates();
      doReturn("Unknown class name").when(unionType0).visit(any(com.google.javascript.rhino.jstype.Visitor.class));
      JSType jSType0 = modificationVisitor0.caseUnionType(unionType0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.google.javascript.rhino.jstype.JSType
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      JSType jSType1 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType.toMaybeTemplateType(jSType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, jSType0, (List<JSType>) linkedList0);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType1, jSTypeArray0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(38);
      nodeArray0[0] = node0;
      Node node1 = new Node(1, nodeArray0, (-2073794324), 55);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node1, jSType1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      jSTypeRegistry1.hasNamespace("{`@\"7lP");
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      Node node0 = new Node((-2823));
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a type name", node0, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      enumType1.getImplicitPrototype();
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionType((JSType) enumType1, jSTypeArray0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertFalse(jSType1.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      Node node0 = new Node(233, 233, 62);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      enumType0.getElementsType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumType0);
      assertFalse(jSType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertFalse(jSType1.isNullType());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(688, "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByFalseTypeOfResultVisitor");
      Node node1 = new Node(688, node0, node0, node0, node0, 53, 53);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("|", node1, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSType jSType0 = enumElementType0.getPrimitiveType();
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) enumType1;
      jSTypeRegistry0.createConstructorType(jSType0, true, jSTypeArray0);
      node1.isOptionalArg();
      JSType jSType1 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "|", ":Np>,", 0, (-1910));
      EnumType enumType2 = jSTypeRegistry0.createEnumType("|", node1, jSType1);
      ObjectType objectType0 = enumType2.getImplicitPrototype();
      objectType0.autoboxesTo();
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull(objectType0);
      node0.cloneTree();
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      simpleErrorReporter0.warning("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByOneTypeOfResultVisitor", "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByOneTypeOfResultVisitor", 48, 48);
      simpleErrorReporter0.error("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByOneTypeOfResultVisitor", "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByOneTypeOfResultVisitor", 48, 48);
      closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      assertSame(chainableReverseAbstractInterpreter0, semanticReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      Node node0 = new Node(0, 0, (-2251));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      jqueryCodingConvention0.getAssertionFunctions();
      JSType jSType0 = null;
      closureReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
      // Undeclared exception!
      try { 
        jqueryCodingConvention0.isPrototypeAlias(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newNumber((-902.9282552), 0, 0);
      Node node1 = new Node(4095, node0);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      FlowScope flowScope0 = null;
      Node node2 = null;
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      simpleErrorReporter0.warning("6q ", "not a StringNode", 0, 0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertFalse(jSType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      jqueryCodingConvention0.isConstantKey("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTrueTypeOfResultVisitor");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[7];
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.ARRAY_TYPE;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList1);
      jqueryCodingConvention0.getObjectLiteralCast(node0);
      jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) linkedList0);
      jqueryCodingConvention0.isValidEnumKey("^lY[E.");
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.EVAL_ERROR_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.ARRAY_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.NUMBER_STRING;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.NUMBER_OBJECT_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative7 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative7);
      assertFalse(jSType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(44, 0, 0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // TRUE 0
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) null);
      Node node0 = new Node(33);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
      assertSame(closureReverseAbstractInterpreter0, chainableReverseAbstractInterpreter0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter1 = semanticReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
      // Undeclared exception!
      try { 
        chainableReverseAbstractInterpreter1.append(semanticReverseAbstractInterpreter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(1);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(closureCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(22, 22, 22);
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, ":6p7I JX", false);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "<mXKhM", false);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(googleCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(22);
      googleCodingConvention0.isPrototypeAlias(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
      closureReverseAbstractInterpreter1.getRestrictedByTypeOfResult(objectType0, "Not declared as a constructor", false);
      closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, "Not declared as a constructor", true);
      semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
      Node node1 = Node.newString("^\"9");
      node1.cloneTree();
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      node1.setVarArgs(true);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node1, (FlowScope) null, false);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, (JSType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // SUB
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", true);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(38);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
      semanticReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome((Node) null, (FlowScope) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(4, "");
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.overwriteDeclaredType("Not declared as a constructor", jSType1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention1, jSTypeRegistry0);
      FlowScope flowScope0 = closureReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome((Node) null, (FlowScope) null, false);
      assertNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(functionType0);
      assertFalse(jSType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
      // Undeclared exception!
      try { 
        semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(functionType0);
      assertFalse(jSType1.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isConstantKey("f\"&Y,_FNk/o,f O");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(5, 5, 0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        googleCodingConvention0.isOptionalParameter(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}

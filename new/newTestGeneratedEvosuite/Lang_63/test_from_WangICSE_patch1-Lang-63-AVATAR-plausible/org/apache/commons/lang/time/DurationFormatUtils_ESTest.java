/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 11 02:58:30 GMT 2022
 */

package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[7];
      String string0 = (String)DurationFormatUtils.d;
      assertNotNull(string0);
      assertEquals("d", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d", Integer.MAX_VALUE);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, Integer.MAX_VALUE);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      String string1 = (String)DurationFormatUtils.d;
      assertNotNull(string1);
      assertEquals("d", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("d", (-3502));
      assertNotNull(durationFormatUtils_Token2);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("d", (-635));
      assertNotNull(durationFormatUtils_Token3);
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(thaiBuddhistDate0, 8192);
      assertNotNull(durationFormatUtils_Token4);
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      StringWriter stringWriter0 = new StringWriter(541);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(stringBuffer0);
      assertNotNull(durationFormatUtils_Token5);
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token(durationFormatUtils_Token1, 1983);
      assertNotNull(durationFormatUtils_Token6);
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token6;
      String string2 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, Integer.MAX_VALUE, 1983, 1983, (-2), Integer.MAX_VALUE, (-3502), 541, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, durationFormatUtils_TokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = DurationFormatUtils.formatPeriod((-4751997474L), (-18L), "*&D@/^LH.1H*y0jOI;)", true, timeZone0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-448L), (-448L));
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      assertNotNull(durationFormatUtils_Token0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer("");
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(stringBuffer1);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertFalse(boolean0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = DurationFormatUtils.formatPeriodISO(0L, 2429L);
      assertNotNull(string0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      assertNotNull(calendar0);
      assertTrue(calendar0.equals((Object)mockGregorianCalendar0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotSame(calendar0, mockGregorianCalendar0);
      
      int int0 = DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, calendar0, 2, 110);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertEquals("GMT", timeZone0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1103055681320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2004,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=349,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, int0);
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-149L), true, true);
      //  // Unstable assertion: assertNotNull(string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[8];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", 3);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("K~pv[ICfI", 3);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1, (-2256));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("%TX)Q?.!Cw<_!", 1122);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      String string1 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals("M", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token4);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token("4F*#");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token5);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token(durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token6);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token6;
      String string2 = (String)DurationFormatUtils.y;
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals("y", string2);
      
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token("y");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token7);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token6));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token5));
      
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token7;
      String string3 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 3, (-2256), (-2256), 3, (-2256), 411, 1122, true);
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals("", string3);
      //  // Unstable assertion: assertEquals(8, durationFormatUtils_TokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2165), "");
      assertNotNull(simpleTimeZone0);
      assertEquals((-2165), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2165,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      String string0 = DurationFormatUtils.formatPeriod((-2419200000L), 1047L, "7)0UjvHRz[J0P+Yi", false, (TimeZone) simpleTimeZone0);
      assertNotNull(string0);
      assertEquals((-2165), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2165,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-1642L), (-1642L));
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023");
      assertNotNull(durationFormatUtils_Token0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string1 = DurationFormatUtils.formatDurationWords(3314L, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = durationFormatUtils_Token0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = (String)DurationFormatUtils.y;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("y", string3);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("y");
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string4 = DurationFormatUtils.formatDurationISO((-1291L));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = DurationFormatUtils.formatDurationISO((-1642L));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(337L, true, true);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      assertNotNull(durationFormatUtils_Token0);
      
      String string1 = (String)DurationFormatUtils.y;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("y", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("y");
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[8];
      String string0 = (String)DurationFormatUtils.y;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("y", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y", 121);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 256);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("y", 72);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 599);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token4);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token3, (-1403));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token5);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token((Object) null);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token6);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token6;
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token(object0, 121);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token7);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token2));
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token7;
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token(durationFormatUtils_Token7);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token8);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token7));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token2));
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token8;
      durationFormatUtils_Token3.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token7));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token8));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token7);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token5);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token6);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token8);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token4);
      
      Clock clock0 = MockClock.systemDefaultZone();
      //  // Unstable assertion: assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      //  // Unstable assertion: assertNotNull(localDate0);
      
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(localDate0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token9);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token7));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token8));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token9;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 599, 1825, 1825, (-1123), (-1720), (-1123), 0, true);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertEquals(8, durationFormatUtils_TokenArray0.length);
      
      String string2 = DurationFormatUtils.formatDurationHMS(599);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      
      String string3 = (String)DurationFormatUtils.s;
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertEquals("s", string3);
      
      boolean boolean0 = durationFormatUtils_Token6.equals("s");
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token7);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token5);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token9);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token4);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token8);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(583L, 583L, (String) null, false, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(72, "Minimum abbreviation width is 4");
      assertNotNull(simpleTimeZone0);
      assertEquals(72, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Minimum abbreviation width is 4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Minimum abbreviation width is 4,offset=72,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      String string0 = DurationFormatUtils.formatPeriod((-80L), 2419200027L, "Minimum abbreviation width is 4", true, (TimeZone) simpleTimeZone0);
      assertNotNull(string0);
      assertEquals(72, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Minimum abbreviation width is 4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Minimum abbreviation width is 4,offset=72,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, true, false);
      //  // Unstable assertion: assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationHMS(0L);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string2 = DurationFormatUtils.formatPeriodISO(0L, 0L);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[8];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000002000java.lang.StringBuffer@000000002100java.lang.StringBuffer@0000000022000", 123);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      String string3 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertEquals("M", string3);
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token1, 3221);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      String string4 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertEquals("M", string4);
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token4);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token((Object) null, 4);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token5);
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token(durationFormatUtils_Token2, 4);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token6);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token6;
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token((Object) null);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token7);
      
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token7;
      String string5 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 123, 123, (-2192), 123, 365, 4, (-1571), true);
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertEquals("", string5);
      //  // Unstable assertion: assertEquals(8, durationFormatUtils_TokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.lexx((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(2419200000L, false, false);
      //  // Unstable assertion: assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-333));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-333));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_Token1.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string1 = DurationFormatUtils.formatDurationWords(2419200000L, true, false);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string2 = DurationFormatUtils.formatPeriod((long) (-333), (-2072L), "28java.lang.StringBuffer@00000000230java.lang.StringBuffer@00000000240java.lang.StringBuffer@00000000250java.lang.StringBuffer@0000000026");
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000230java.lang.StringBuffer@00000000240java.lang.StringBuffer@00000000250java.lang.StringBuffer@0000000026");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      
      String string3 = DurationFormatUtils.formatDuration(497L, " 1 seconds", true);
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-1642L), (-1642L));
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023");
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertTrue(boolean0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023", 77);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean1 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      assertNotNull(string0);
      assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      assertNotNull(durationFormatUtils_Token0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string1 = DurationFormatUtils.formatPeriod((-1L), (-174L), "", true, timeZone0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", string1);
      
      int int0 = timeZone0.getOffset((-1L));
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, int0);
      
      String string2 = (String)DurationFormatUtils.S;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S", string2);
      
      String string3 = DurationFormatUtils.formatPeriod((-2051L), 224L, "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration(1L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration((-89L), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(2419200000L);
      assertNotNull(string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[2];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("672java.lang.StringBuffer@000000000800java.lang.StringBuffer@000000000900java.lang.StringBuffer@0000000010000");
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      String string1 = (String)DurationFormatUtils.s;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("s", (-333));
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertEquals(2, durationFormatUtils_TokenArray0.length);
      
      String string2 = DurationFormatUtils.formatDuration((-59999L), "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      StringWriter stringWriter0 = new StringWriter();
      //  // Unstable assertion: assertNotNull(stringWriter0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      //  // Unstable assertion: assertNotNull(charBuffer0);
      //  // Unstable assertion: assertEquals(0, charBuffer0.length());
      //  // Unstable assertion: assertFalse(charBuffer0.isDirect());
      //  // Unstable assertion: assertEquals("", charBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, charBuffer0.remaining());
      //  // Unstable assertion: assertTrue(charBuffer0.hasArray());
      //  // Unstable assertion: assertEquals(0, charBuffer0.arrayOffset());
      //  // Unstable assertion: assertEquals(0, charBuffer0.position());
      //  // Unstable assertion: assertEquals(0, charBuffer0.limit());
      //  // Unstable assertion: assertFalse(charBuffer0.hasRemaining());
      //  // Unstable assertion: assertEquals(0, charBuffer0.capacity());
      //  // Unstable assertion: assertFalse(charBuffer0.isReadOnly());
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1414L), (-203L));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@00000000221java.lang.StringBuffer@0000000023211java.lang.StringBuffer@0000000024", 0, 121);
      //  // Unstable assertion: assertNotNull(stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertEquals(121, stringBuffer0.length());
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string2 = DurationFormatUtils.formatDuration((-2510L), "Q `[");
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(charBuffer0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertEquals(0, charBuffer0.length());
      //  // Unstable assertion: assertFalse(charBuffer0.isDirect());
      //  // Unstable assertion: assertEquals("", charBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, charBuffer0.remaining());
      //  // Unstable assertion: assertTrue(charBuffer0.hasArray());
      //  // Unstable assertion: assertEquals(0, charBuffer0.arrayOffset());
      //  // Unstable assertion: assertEquals(0, charBuffer0.position());
      //  // Unstable assertion: assertEquals(0, charBuffer0.limit());
      //  // Unstable assertion: assertFalse(charBuffer0.hasRemaining());
      //  // Unstable assertion: assertEquals(0, charBuffer0.capacity());
      //  // Unstable assertion: assertFalse(charBuffer0.isReadOnly());
      
      Object object0 = durationFormatUtils_Token1.getValue();
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals("M", object0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      
      String string3 = DurationFormatUtils.formatDuration(1872L, "java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@00000000221java.lang.StringBuffer@0000000023211java.lang.StringBuffer@0000000024", true);
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.H;
      assertNotNull(string0);
      assertEquals("H", string0);
      
      String string1 = DurationFormatUtils.formatDuration(86403893L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertNotNull(durationFormatUtils_Token0);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertEquals("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", object0);
      
      String string2 = DurationFormatUtils.formatDuration(1L, "H", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0", string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      StringWriter stringWriter0 = new StringWriter();
      //  // Unstable assertion: assertNotNull(stringWriter0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      //  // Unstable assertion: assertNotNull(charBuffer0);
      //  // Unstable assertion: assertEquals(0, charBuffer0.arrayOffset());
      //  // Unstable assertion: assertEquals(0, charBuffer0.length());
      //  // Unstable assertion: assertFalse(charBuffer0.isDirect());
      //  // Unstable assertion: assertFalse(charBuffer0.isReadOnly());
      //  // Unstable assertion: assertEquals(0, charBuffer0.capacity());
      //  // Unstable assertion: assertEquals(0, charBuffer0.limit());
      //  // Unstable assertion: assertFalse(charBuffer0.hasRemaining());
      //  // Unstable assertion: assertEquals("", charBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, charBuffer0.position());
      //  // Unstable assertion: assertEquals(0, charBuffer0.remaining());
      //  // Unstable assertion: assertTrue(charBuffer0.hasArray());
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1414L), (-203L));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@00000000221java.lang.StringBuffer@0000000023211java.lang.StringBuffer@0000000024", 0, 121);
      //  // Unstable assertion: assertNotNull(stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = new StringBuffer("M");
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertEquals("M", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string2 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      String string3 = DurationFormatUtils.formatPeriodISO(121, 1L);
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token((Object) null, 2625);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token2;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 2866);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token3;
      String string4 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 2796, 0, 0, 3, 3, 0, 0, false);
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertEquals("", string4);
      //  // Unstable assertion: assertEquals(9, durationFormatUtils_TokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;
      assertNotNull(string0);
      assertEquals("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", string0);
      
      String string1 = DurationFormatUtils.formatDurationHMS(0L);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = DurationFormatUtils.formatPeriodISO(48L, 0L);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = DurationFormatUtils.formatDuration((-1L), "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("...");
      assertNotNull(durationFormatUtils_TokenArray0);
      assertEquals(1, durationFormatUtils_TokenArray0.length);
      
      System.setCurrentTimeMillis(96L);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("", 656);
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = durationFormatUtils_Token0.toString();
      assertNotNull(string0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals("...");
      assertFalse(boolean0);
      
      boolean boolean1 = durationFormatUtils_Token0.equals("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      durationFormatUtils_Token0.increment();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6), string0);
      assertNotNull(simpleTimeZone0);
      assertEquals((-6), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      durationFormatUtils_Token0.increment();
      String string1 = DurationFormatUtils.formatPeriod((-5476L), (long) (-6), "_O/9I-}J;]@+a!tnx0", false, (TimeZone) simpleTimeZone0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-6), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      String string2 = DurationFormatUtils.formatDurationWords((-500L), false, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = DurationFormatUtils.formatPeriod((-4902L), (-2070L), "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = DurationFormatUtils.formatDuration((-4465L), "]|HTP:QW", true);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod((-1843L), 840L, "qMMAkDJ");
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatPeriodISO(515L, 4181L);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = DurationFormatUtils.formatDurationISO(822L);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@000000000400java.lang.StringBuffer@0000000005");
      assertNotNull(durationFormatUtils_Token0);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string1));
      assertTrue(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string2));
      
      String string3 = DurationFormatUtils.formatDuration(2587L, " 0 minutes", true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 2498;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(object0, 2498);
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = durationFormatUtils_Token0.toString();
      assertNotNull(string0);
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      // Undeclared exception!
      DurationFormatUtils.lexx(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-1L), (-1L));
      assertNotNull(string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string1 = DurationFormatUtils.formatPeriod((-174L), (-1L), "java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023", true, timeZone0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", timeZone0.getID());
      
      int int0 = timeZone0.getOffset((-1L));
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, int0);
      
      String string2 = (String)DurationFormatUtils.S;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("S", string2);
      
      String string3 = DurationFormatUtils.formatPeriod(2683L, (long) 0, "uEs/lorR#Ys,Hm.oPM");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = DurationFormatUtils.formatDuration(1429L, "java.lang.StringBuffer@0000000051-2java.lang.StringBuffer@0000000052java.lang.StringBuffer@000000005300java.lang.StringBuffer@00000000540");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      assertNotNull(durationFormatUtils_Token0);
      
      int int1 = durationFormatUtils_Token0.getCount();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect((Calendar) null, (Calendar) null, 6, (-2431));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(2419200000L, false, false);
      //  // Unstable assertion: assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-333));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-333));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_Token1.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string1 = DurationFormatUtils.formatDurationHMS(0L);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string2 = DurationFormatUtils.formatDuration((long) (-333), "");
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals("", string2);
      
      String string3 = DurationFormatUtils.formatPeriod(0L, 2419200000L, "");
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertTrue(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals("", string3);
      
      String string4 = DurationFormatUtils.formatPeriodISO((-333), (-333));
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      //  // Unstable assertion: assertNotNull(durationFormatUtils0);
      
      String string5 = DurationFormatUtils.formatDurationHMS((-333));
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      
      durationFormatUtils_Token0.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      String string6 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertEquals("", string6);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      String string7 = DurationFormatUtils.formatPeriod((-3893L), 86400000L, "b1{5R");
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      
      String string8 = DurationFormatUtils.formatPeriod((long) (-333), 2419200000L, "");
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string8.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertEquals("", string8);
      
      Calendar calendar0 = MockCalendar.getInstance();
      //  // Unstable assertion: assertNotNull(calendar0);
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      durationFormatUtils_Token1.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      String string9 = DurationFormatUtils.formatPeriod(2419200000L, 0L, "E&e1mAPRp", false, timeZone0);
      //  // Unstable assertion: assertNotNull(string9);
      //  // Unstable assertion: assertFalse(string9.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string8));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string5));
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 3819, (-1));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      StringWriter stringWriter0 = new StringWriter();
      //  // Unstable assertion: assertNotNull(stringWriter0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      //  // Unstable assertion: assertNotNull(charBuffer0);
      //  // Unstable assertion: assertEquals(0, charBuffer0.remaining());
      //  // Unstable assertion: assertEquals(0, charBuffer0.capacity());
      //  // Unstable assertion: assertFalse(charBuffer0.isReadOnly());
      //  // Unstable assertion: assertTrue(charBuffer0.hasArray());
      //  // Unstable assertion: assertFalse(charBuffer0.isDirect());
      //  // Unstable assertion: assertEquals(0, charBuffer0.position());
      //  // Unstable assertion: assertEquals(0, charBuffer0.limit());
      //  // Unstable assertion: assertEquals(0, charBuffer0.length());
      //  // Unstable assertion: assertEquals(0, charBuffer0.arrayOffset());
      //  // Unstable assertion: assertFalse(charBuffer0.hasRemaining());
      //  // Unstable assertion: assertEquals("", charBuffer0.toString());
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1414L), (-203L));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@00000000221java.lang.StringBuffer@0000000023211java.lang.StringBuffer@0000000024", 0, 121);
      //  // Unstable assertion: assertNotNull(stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertEquals(121, stringBuffer0.length());
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string2 = DurationFormatUtils.formatPeriodISO(0, (-203L));
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(charBuffer0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertEquals(0, charBuffer0.remaining());
      //  // Unstable assertion: assertEquals(0, charBuffer0.capacity());
      //  // Unstable assertion: assertFalse(charBuffer0.isReadOnly());
      //  // Unstable assertion: assertTrue(charBuffer0.hasArray());
      //  // Unstable assertion: assertFalse(charBuffer0.isDirect());
      //  // Unstable assertion: assertEquals(0, charBuffer0.position());
      //  // Unstable assertion: assertEquals(0, charBuffer0.limit());
      //  // Unstable assertion: assertEquals(0, charBuffer0.length());
      //  // Unstable assertion: assertEquals(0, charBuffer0.arrayOffset());
      //  // Unstable assertion: assertFalse(charBuffer0.hasRemaining());
      //  // Unstable assertion: assertEquals("", charBuffer0.toString());
      
      Object object0 = durationFormatUtils_Token1.getValue();
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertEquals("M", object0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string3 = DurationFormatUtils.formatDuration(1872L, "java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@00000000221java.lang.StringBuffer@0000000023211java.lang.StringBuffer@0000000024", true);
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("M", (-90));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      
      boolean boolean1 = durationFormatUtils_Token1.equals(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token3);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token2);
      
      String string4 = DurationFormatUtils.formatDurationHMS((-2505L));
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      StringWriter stringWriter0 = new StringWriter();
      //  // Unstable assertion: assertNotNull(stringWriter0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      //  // Unstable assertion: assertNotNull(charBuffer0);
      //  // Unstable assertion: assertEquals(0, charBuffer0.remaining());
      //  // Unstable assertion: assertEquals(0, charBuffer0.capacity());
      //  // Unstable assertion: assertFalse(charBuffer0.isReadOnly());
      //  // Unstable assertion: assertEquals(0, charBuffer0.position());
      //  // Unstable assertion: assertEquals(0, charBuffer0.limit());
      //  // Unstable assertion: assertFalse(charBuffer0.hasRemaining());
      //  // Unstable assertion: assertFalse(charBuffer0.isDirect());
      //  // Unstable assertion: assertEquals(0, charBuffer0.length());
      //  // Unstable assertion: assertTrue(charBuffer0.hasArray());
      //  // Unstable assertion: assertEquals("", charBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, charBuffer0.arrayOffset());
      
      String string1 = DurationFormatUtils.formatPeriodISO((-1414L), (-203L));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@00000000221java.lang.StringBuffer@0000000023211java.lang.StringBuffer@0000000024", 0, 121);
      //  // Unstable assertion: assertNotNull(stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      //  // Unstable assertion: assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertEquals(121, stringBuffer0.length());
      //  // Unstable assertion: assertSame(stringWriter0, stringWriter1);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration((-1664L), (String) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-1369L), "H");
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("0", string0);
      
      String string1 = DurationFormatUtils.formatDurationWords((-1369L), true, true);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      String string2 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals("0java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012-1java.lang.StringBuffer@0000000013");
      //  // Unstable assertion: assertFalse(boolean0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      //  // Unstable assertion: assertNotNull(calendar0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      
      int int0 = DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 0, 0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(0, int0);
      
      String string3 = DurationFormatUtils.formatPeriodISO(0, (-1369L));
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[7];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token0;
      boolean boolean1 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "0");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(7, durationFormatUtils_TokenArray0.length);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(object0.equals((Object)string2));
      //  // Unstable assertion: assertTrue(object0.equals((Object)string0));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string3));
      //  // Unstable assertion: assertFalse(object0.equals((Object)string1));
      //  // Unstable assertion: assertEquals("0", object0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = DurationFormatUtils.lexx("");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_TokenArray1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_TokenArray1.equals((Object)durationFormatUtils_TokenArray0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_TokenArray1, durationFormatUtils_TokenArray0);
      //  // Unstable assertion: assertEquals(0, durationFormatUtils_TokenArray1.length);
      
      String string4 = DurationFormatUtils.formatPeriod(1169L, (-518L), "java.lang.StringBuffer@00000000310java.lang.StringBuffer@00000000320java.lang.StringBuffer@00000000330java.lang.StringBuffer@00000000340java.lang.StringBuffer@00000000350java.lang.StringBuffer@0000000036-1java.lang.StringBuffer@000000003731java.lang.StringBuffer@0000000038");
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)object0));
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      String string5 = DurationFormatUtils.formatPeriod(60000L, 1L, "java.lang.StringBuffer@0000000049000-1687java.lang.StringBuffer@0000000050java.lang.StringBuffer@0000000051java.lang.StringBuffer@0000000052java.lang.StringBuffer@0000000053java.lang.StringBuffer@0000000054java.lang.StringBuffer@0000000055java.lang.StringBuffer@0000000056java.lang.StringBuffer@0000000057");
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)object0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      
      boolean boolean2 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(1029L, 1029L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(1715L);
      assertNotNull(string0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000211java.lang.StringBuffer@0000000022715java.lang.StringBuffer@0000000023");
      assertNotNull(stringBuffer0);
      assertEquals(273, stringBuffer0.length());
      
      stringBuffer0.ensureCapacity((-399));
      assertEquals(273, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0, (-399));
      assertNotNull(durationFormatUtils_Token0);
      assertEquals(273, stringBuffer0.length());
      
      stringBuffer0.trimToSize();
      assertEquals(273, stringBuffer0.length());
      
      String string1 = "";
      StringBuffer stringBuffer1 = new StringBuffer("");
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      StringBuffer stringBuffer2 = stringBuffer0.append(stringBuffer1);
      assertNotNull(stringBuffer2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertEquals(273, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(273, stringBuffer2.length());
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(stringBuffer1, stringBuffer2);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertNotSame(stringBuffer2, stringBuffer1);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertEquals(273, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1, (-399));
      assertNotNull(durationFormatUtils_Token2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertEquals(273, stringBuffer0.length());
      
      long long0 = 0L;
      boolean boolean0 = false;
      String string2 = DurationFormatUtils.formatDurationWords(0L, false, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = DurationFormatUtils.formatDuration(1715L, " 1 second", true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("", (-399));
      assertNotNull(durationFormatUtils_Token3);
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      
      String string4 = (String)DurationFormatUtils.y;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("y", string4);
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token("y");
      assertNotNull(durationFormatUtils_Token4);
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(4, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, (-399), (-399));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      int int0 = 0;
      int int1 = DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 0, 0);
      assertTrue(int1 == int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(0, int1);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      assertNotNull(durationFormatUtils_Token0);
      
      int int2 = durationFormatUtils_Token0.getCount();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        durationFormatUtils_Token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[3];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      String string2 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 0, 0, 1000, 0, (-441), 1, 277, false);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertEquals("", string2);
      //  // Unstable assertion: assertEquals(3, durationFormatUtils_TokenArray0.length);
      
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertTrue(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      
      String string3 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      String string4 = DurationFormatUtils.formatDuration((long) 1000, "java.lang.String@0000000002java.lang.String@0000000002java.lang.String@0000000002");
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-1762L), "uZ(.M9HK0)-[2*q");
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000060java.lang.StringBuffer@00000000070java.lang.StringBuffer@0000000008", (-1804));
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("java.lang.StringBuffer@00000000060java.lang.StringBuffer@00000000070java.lang.StringBuffer@0000000008");
      assertNotNull(durationFormatUtils_TokenArray0);
      assertEquals(5, durationFormatUtils_TokenArray0.length);
      
      durationFormatUtils_Token0.increment();
      String string1 = DurationFormatUtils.formatDurationHMS(1203L);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = durationFormatUtils_Token0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = DurationFormatUtils.formatPeriodISO(4103L, 1203L);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = DurationFormatUtils.formatDurationISO(1203L);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token0);
      assertFalse(boolean0);
      assertEquals(5, durationFormatUtils_TokenArray0.length);
      
      String string5 = DurationFormatUtils.formatDuration(1203L, "CCdEx (");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, (-1804), (-1804), 115, 0, 0, 1000, (-1804), false);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(5, durationFormatUtils_TokenArray0.length);
      
      String string7 = DurationFormatUtils.formatDurationHMS((-1762L));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      durationFormatUtils_Token0.increment();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      ZoneId zoneId0 = timeZone0.toZoneId();
      assertNotNull(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      
      String string8 = DurationFormatUtils.formatPeriod(1203L, (long) 1000, "java.lang.StringBuffer@00000000410java.lang.StringBuffer@00000000420java.lang.StringBuffer@00000000430java.lang.StringBuffer@00000000440java.lang.StringBuffer@00000000450java.lang.StringBuffer@0000000046-2java.lang.StringBuffer@000000004700java.lang.StringBuffer@0000000048", true, timeZone0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("GMT", timeZone0.getID());
      
      String string9 = DurationFormatUtils.formatPeriodISO(1000, 4103L);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = DurationFormatUtils.formatDuration(0L, "", true);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertEquals("", string10);
      
      String string11 = (String)DurationFormatUtils.S;
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertEquals("S", string11);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("S", (-3995));
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      String string12 = DurationFormatUtils.formatPeriodISO(0, 1000);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      
      String string13 = DurationFormatUtils.formatPeriod(1481L, (long) (-3995), "//5\";`&0ogFK[(o`a*");
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string9));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(1L);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.format((DurationFormatUtils.Token[]) null, (-1454), 3, (-1454), (-1454), 3, 33, 3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.S;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("S", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("S");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, (-877));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1, (-877));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      
      boolean boolean0 = durationFormatUtils_Token2.equals("S");
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      
      String string1 = DurationFormatUtils.formatDurationISO((-877));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[8];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token2;
      String string2 = durationFormatUtils_Token2.toString();
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals("", string2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      durationFormatUtils_Token0.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token1;
      String string3 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token1;
      durationFormatUtils_Token2.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token0;
      String string4 = durationFormatUtils_Token1.toString();
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertEquals("", string4);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token1;
      durationFormatUtils_Token1.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      
      String string5 = durationFormatUtils_Token0.toString();
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      
      String string6 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 0, 0, 0, (-3965), 1, 0, (-3965), false);
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string5));
      //  // Unstable assertion: assertEquals("", string6);
      //  // Unstable assertion: assertEquals(8, durationFormatUtils_TokenArray0.length);
      
      durationFormatUtils_Token0.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      
      String string7 = DurationFormatUtils.formatDurationHMS((-877));
      //  // Unstable assertion: assertNotNull(string7);
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("-3965-3965-3965", (-1482));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000003500java.lang.StringBuffer@000000003600java.lang.StringBuffer@000000003723");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token4);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      
      String string8 = DurationFormatUtils.formatDuration((-1L), "yGEA<Jt(B}p", false);
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-507L), "pd72`Y/,>QcSR9Is'hP", false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("...");
      assertNotNull(durationFormatUtils_TokenArray0);
      assertEquals(1, durationFormatUtils_TokenArray0.length);
      
      System.setCurrentTimeMillis(96L);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("", 656);
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = durationFormatUtils_Token0.toString();
      assertNotNull(string0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals("...");
      assertFalse(boolean0);
      
      boolean boolean1 = durationFormatUtils_Token0.equals("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      durationFormatUtils_Token0.increment();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(656, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=656,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(656, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      String string1 = DurationFormatUtils.formatPeriod(2665L, 1832L, ">,q}Q/m1mi", false, (TimeZone) simpleTimeZone0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=656,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(656, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      String string2 = DurationFormatUtils.formatDurationWords(0L, true, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = DurationFormatUtils.formatPeriod((-2489L), 2665L, " 1 days");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = durationFormatUtils_Token0.equals("0java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = DurationFormatUtils.formatDuration(600L, "{q?|p)0xLw*@d[rR4", true);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";n]TfapakA(<~", 0, 0, 0, 0, 0, 0, 0, 3372);
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(";n]TfapakA(<~", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=;n]TfapakA(<~,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=3372,endTimeMode=0]", simpleTimeZone0.toString());
      
      simpleTimeZone0.setEndRule(0, 0, 2297, 3372);
      assertEquals("java.util.SimpleTimeZone[id=;n]TfapakA(<~,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=2297,endTime=3372,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(";n]TfapakA(<~", simpleTimeZone0.getID());
      
      simpleTimeZone0.setID("");
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=2297,endTime=3372,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      simpleTimeZone0.setStartRule(2297, 0, 0, 157, false);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=2297,startDay=0,startDayOfWeek=0,startTime=157,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=2297,endTime=3372,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      String string0 = DurationFormatUtils.formatPeriod(0L, 0L, ";n]TfapakA(<~", false, (TimeZone) simpleTimeZone0);
      assertNotNull(string0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=2297,startDay=0,startDayOfWeek=0,startTime=157,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=2297,endTime=3372,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(";n]TfapakA(<~", 3372);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = simpleTimeZone0.getDisplayName(false, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=2297,startDay=0,startDayOfWeek=0,startTime=157,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=2297,endTime=3372,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("GMT+00:00", string2);
      
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      String string3 = durationFormatUtils_Token0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals("java.lang.StringBuffer@0000000002");
      assertFalse(boolean0);
      
      String string4 = DurationFormatUtils.formatDurationHMS(0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = DurationFormatUtils.formatPeriodISO(3372, 3372);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = DurationFormatUtils.formatDurationISO(0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx(";n]TfapakA(<~");
      assertNotNull(durationFormatUtils_TokenArray0);
      assertEquals(1, durationFormatUtils_TokenArray0.length);
      
      String string7 = DurationFormatUtils.formatDurationHMS((-379L));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = DurationFormatUtils.lexx("0java.lang.StringBuffer@000000007000java.lang.StringBuffer@000000007100java.lang.StringBuffer@000000007221");
      assertNotNull(durationFormatUtils_TokenArray1);
      assertFalse(durationFormatUtils_TokenArray1.equals((Object)durationFormatUtils_TokenArray0));
      assertNotSame(durationFormatUtils_TokenArray1, durationFormatUtils_TokenArray0);
      assertEquals(5, durationFormatUtils_TokenArray1.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 1294L;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration(1294L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.H;
      assertNotNull(string0);
      assertEquals("H", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H");
      assertNotNull(durationFormatUtils_Token0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(stringBuffer0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertEquals("", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertEquals("", stringWriter0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration((long) 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO((-1624L));
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@0000000021-1java.lang.StringBuffer@000000002276java.lang.StringBuffer@0000000023");
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(97L, "", false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[4];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("");
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      String string1 = (String)DurationFormatUtils.s;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("s", (-2556));
      assertNotNull(durationFormatUtils_Token2);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token2, (-2556));
      assertNotNull(durationFormatUtils_Token3);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token((Object) null);
      assertNotNull(durationFormatUtils_Token4);
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token3, (-2556));
      assertNotNull(durationFormatUtils_Token5);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token(durationFormatUtils_Token5, (-2556));
      assertNotNull(durationFormatUtils_Token6);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token6);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      assertFalse(boolean0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token6);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token6);
      assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token5, durationFormatUtils_Token6);
      assertNotSame(durationFormatUtils_Token5, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token5, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token5, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token5, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token5, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token6, durationFormatUtils_Token5);
      assertEquals(4, durationFormatUtils_TokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("");
      assertNotNull(durationFormatUtils_TokenArray0);
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      
      String string0 = (String)DurationFormatUtils.y;
      assertNotNull(string0);
      assertEquals("y", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y");
      assertNotNull(durationFormatUtils_Token0);
      
      String string1 = DurationFormatUtils.formatPeriod((-632L), 2454L, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = DurationFormatUtils.formatDuration((-2190L), "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(4978L, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(object0, 1247);
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = durationFormatUtils_Token0.toString();
      assertNotNull(string0);
      
      String string1 = durationFormatUtils_Token0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      durationFormatUtils_Token0.increment();
      String string2 = durationFormatUtils_Token0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      durationFormatUtils_Token0.increment();
      String string3 = durationFormatUtils_Token0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      durationFormatUtils_Token0.increment();
      String string4 = durationFormatUtils_Token0.toString();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      String string5 = (String)DurationFormatUtils.y;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("y", string5);
      
      boolean boolean0 = durationFormatUtils_Token0.equals("y");
      assertFalse(boolean0);
      
      String string6 = DurationFormatUtils.formatPeriod(1167L, 1167L, "~!FY=MwwfeF~29Y[C=");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = DurationFormatUtils.formatDurationHMS(1247);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[4];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(string4);
      assertNotNull(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token0;
      durationFormatUtils_Token0.increment();
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      String string8 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1247, 1247, 1247, 0, 1247, 0, 0, false);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertEquals(4, durationFormatUtils_TokenArray0.length);
      
      String string9 = DurationFormatUtils.formatDurationHMS(1247);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      
      String string10 = DurationFormatUtils.formatPeriodISO(1247, 1167L);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      
      String string11 = DurationFormatUtils.formatDuration((long) 0, "@+01M3CnC", true);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertEquals(1253, int0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      String string12 = DurationFormatUtils.formatDurationWords(1247, true, false);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-1642L), (-1642L));
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration((-1642L), "java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(72, "Strings must not be null");
      DurationFormatUtils.formatPeriod((-80L), 2419200027L, "Minimum abbreviation width is 4", false, (TimeZone) simpleTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "0java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011java.lang.StringBuffer@000000001228java.lang.StringBuffer@00000000130java.lang.StringBuffer@0000000014");
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      StringWriter stringWriter0 = new StringWriter();
      DurationFormatUtils.formatDurationWords(3314L, true, false);
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(simpleTimeZone0);
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("H", (-5132));
      durationFormatUtils_Token0.equals(durationFormatUtils_Token2);
      String string1 = DurationFormatUtils.formatDurationISO((-2332796107L));
      String string2 = DurationFormatUtils.formatDurationISO((-80L));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-4751996076L), (-1751L));
      String string1 = DurationFormatUtils.formatPeriod((-4751996076L), (-1751L), "");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-1341L), 2419200000L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO(2344L, 2344L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(86403891L, 86403891L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-4751996054L), (-1751L));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DurationFormatUtils.formatDurationWords(2419200000L, false, false);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-333));
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("28java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-333));
      durationFormatUtils_Token1.increment();
      DurationFormatUtils.formatDurationHMS(0L);
      DurationFormatUtils.formatDuration((long) (-333), "");
      DurationFormatUtils.formatPeriod(0L, 2419200000L, "");
      DurationFormatUtils.formatPeriodISO((-333), (-333));
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      DurationFormatUtils.formatDurationHMS((-333));
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.formatPeriod((-3893L), 86400000L, "b1{5R");
      DurationFormatUtils.formatPeriod((long) (-333), 2419200000L, "");
      Calendar calendar0 = MockCalendar.getInstance();
      durationFormatUtils_Token1.increment();
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 3819, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DurationFormatUtils.formatDurationHMS(0L);
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H", 0);
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      String string1 = (String)DurationFormatUtils.M;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("M");
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("M", (-1100));
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token3);
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000000800java.lang.StringBuffer@000000000900java.lang.StringBuffer@0000000010000");
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token5;
      String string2 = (String)DurationFormatUtils.S;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token("S");
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token6;
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token((Object) null, 0);
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token7;
      String string3 = (String)DurationFormatUtils.m;
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token("m", 0);
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token8;
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(durationFormatUtils_Token5, 0);
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token9;
      Object object0 = new Object();
      DurationFormatUtils.Token durationFormatUtils_Token10 = new DurationFormatUtils.Token(object0);
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[8];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("");
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("");
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      String string0 = (String)DurationFormatUtils.y;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("y", 2167);
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token2);
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token2);
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 2167);
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token((Object) null, 1000);
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token(durationFormatUtils_Token6);
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token7;
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token(durationFormatUtils_Token5);
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(durationFormatUtils_Token8, 0);
      durationFormatUtils_Token7.increment();
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token9;
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token6);
      //  // Unstable assertion: assertTrue(boolean0);
      
      durationFormatUtils_Token8.increment();
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1000, 0, (-299), 0, 0, 0, 35, false);
      //  // Unstable assertion: assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      String string0 = DurationFormatUtils.formatDurationISO(1553L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(durationFormatUtils0, (-1835));
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils0);
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("H");
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token((Object) null, (-1835));
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", 5);
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token(durationFormatUtils_Token5);
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token6;
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token(durationFormatUtils_Token1);
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token7;
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token(durationFormatUtils_Token6, 5);
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token8;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(stringBuffer0);
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token9;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1083, 5, (-1835), 5, 0, 1083, (-1835), true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("4Jr<T%q^");
      assertEquals(1, durationFormatUtils_TokenArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), (-13));
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, (-13), (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(86403893L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-724L), false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod((-1843L), 840L, "qMMAkDJ");
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      String string1 = DurationFormatUtils.formatDuration(1872L, "java.lang.StringBuffer@000000000400java.lang.StringBuffer@0000000005");
      assertFalse(string1.equals((Object)string0));
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      int int0 = durationFormatUtils_Token0.getCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS((-3357L));
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[1];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000000800java.lang.StringBuffer@0000000009-3java.lang.StringBuffer@000000001043");
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, (-2020), 2237, 2237, (-2020), 2237, 2237, 2237, false);
      assertEquals("", string1);
      
      String string2 = DurationFormatUtils.formatDurationISO(2314L);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      Object object0 = new Object();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(object0);
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token((Object) null);
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token2, 1122);
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token("H");
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token4);
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token("EdLTMh;N-O`m!L>YF&", 1);
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token6;
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token("EdLTMh;N-O`m!L>YF&");
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token7;
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token(durationFormatUtils_Token2, 11);
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(durationFormatUtils_Token8, (-1405));
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token9;
      DurationFormatUtils.Token durationFormatUtils_Token10 = new DurationFormatUtils.Token(durationFormatUtils_Token7, 1000);
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token10;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 328, 1122, (-1405), 1, (-1405), 1000, 1, true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d gMRV");
      boolean boolean0 = durationFormatUtils_Token0.equals("d gMRV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DurationFormatUtils.formatDurationHMS(1178L);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000000800java.lang.StringBuffer@000000000901java.lang.StringBuffer@0000000010178", 60);
      boolean boolean0 = durationFormatUtils_Token0.equals("0java.lang.StringBuffer@000000000800java.lang.StringBuffer@000000000901java.lang.StringBuffer@0000000010178");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.m;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("m", 3894);
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.getValue();
      durationFormatUtils_Token0.equals("m");
      String string1 = (String)DurationFormatUtils.d;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("d");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.set(3894, 3894, 0, 0, 0);
      mockGregorianCalendar0.setLenient(true);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar1, 3894, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3894
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DurationFormatUtils.formatDurationISO(2419200000L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-795), (-795), 0);
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, (-795), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -795
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      durationFormatUtils_Token0.getCount();
      String string0 = DurationFormatUtils.formatDuration(150L, "%0_fm]E'o~u3WI3!");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DurationFormatUtils.formatDurationWords(0L, false, false);
      DurationFormatUtils.formatDurationISO(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, (-1673), (-1673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(86403893L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DurationFormatUtils.formatDuration((-3906L), "");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
      simpleTimeZone0.getDisplayName();
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      mockGregorianCalendar0.clone();
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, 240, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 240
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(2419200000L, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-1642L), (-1642L));
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000210java.lang.StringBuffer@0000000022000java.lang.StringBuffer@0000000023");
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(1L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      durationFormatUtils_Token1.getCount();
      durationFormatUtils_Token1.increment();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      durationFormatUtils_Token0.toString();
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      int int0 = (-3359);
      int int1 = 1723;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, (CharSequence) "java.lang.StringBuffer@0000000003", (-3359), 1723);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}

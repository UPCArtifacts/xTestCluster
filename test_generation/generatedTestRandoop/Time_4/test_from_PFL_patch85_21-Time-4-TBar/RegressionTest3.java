import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial16.minus(readablePeriod20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField23 = partial21.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        int int40 = partial0.size();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int[] intArray37 = partial32.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        int[] intArray57 = partial46.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray57, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray57);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int81 = partial79.get(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray53 = new int[] {};
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray52, intArray53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial55.withPeriodAdded(readablePeriod56, (int) (short) 100);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        boolean boolean61 = partial55.isAfter((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial51.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeField[] dateTimeFieldArray63 = partial51.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        int int65 = partial51.indexOf(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial55.without(dateTimeFieldType60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial61.without(dateTimeFieldType63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = partial64.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNull(dateTimeFormatter65);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial3.without(dateTimeFieldType6);
        java.lang.Class<?> wildcardClass8 = partial7.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial15.withPeriodAdded(readablePeriod16, (int) (byte) 0);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial19.getValues();
        boolean boolean27 = partial18.isMatch((org.joda.time.ReadablePartial) partial19);
        boolean boolean28 = partial13.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial18.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial18.minus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial31.minus(readablePeriod32);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial16.without(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial23.withChronologyRetainFields(chronology27);
        org.joda.time.Chronology chronology29 = partial23.getChronology();
        org.joda.time.Partial partial30 = partial16.withChronologyRetainFields(chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial16.toString(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial1.toString(dateTimeFormatter17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial22.withPeriodAdded(readablePeriod23, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        int[] intArray35 = partial30.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray35, chronology36);
        boolean boolean38 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial25.plus(readablePeriod39);
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = partial40.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial40.getFieldTypes();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = partial43.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray46 = new int[] {};
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray46, chronology47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        int[] intArray54 = partial49.getValues();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray54, chronology55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray58);
        org.joda.time.Partial partial62 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial43.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        java.lang.String str69 = partial65.toString();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        boolean boolean77 = partial75.isBefore((org.joda.time.ReadablePartial) partial76);
        boolean boolean78 = partial70.isBefore((org.joda.time.ReadablePartial) partial75);
        int[] intArray79 = partial70.getValues();
        boolean boolean80 = partial65.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial65.withPeriodAdded(readablePeriod81, (int) (short) 100);
        boolean boolean84 = partial61.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime89 = partial85.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime92 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial45.toString(dateTimeFormatter69);
        int int71 = partial45.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = partial45.getFormatter();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter72);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = partial3.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray6, intArray8, chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime17 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = partial3.isMatch((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial20.withChronologyRetainFields(chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial20.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial26.toString(dateTimeFormatter28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = partial26.withChronologyRetainFields(chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial51.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial51.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial51.withChronologyRetainFields(chronology55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial51.isMatch((org.joda.time.ReadablePartial) partial57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = partial57.toString(dateTimeFormatter59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial61.toString(dateTimeFormatter63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial67 = partial61.withPeriodAdded(readablePeriod65, (int) (byte) 100);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        boolean boolean71 = partial61.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial73.withChronologyRetainFields(chronology75);
        boolean boolean78 = partial73.equals((java.lang.Object) 10.0f);
        boolean boolean79 = partial61.isMatch((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology80 = partial61.getChronology();
        org.joda.time.Partial partial81 = partial57.withChronologyRetainFields(chronology80);
        boolean boolean82 = partial26.equals((java.lang.Object) partial81);
        org.joda.time.Chronology chronology83 = partial81.getChronology();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial81.plus(readablePeriod84);
        boolean boolean86 = partial3.isMatch((org.joda.time.ReadablePartial) partial85);
        org.joda.time.Chronology chronology87 = partial85.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 0, chronology87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        org.joda.time.Partial partial56 = partial49.withChronologyRetainFields(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField58 = partial49.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = partial1.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial1.without(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial1.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        java.lang.String str17 = partial9.toStringList();
        java.lang.String str19 = partial9.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial0.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial0.plus(readablePeriod55);
        java.lang.String str57 = partial0.toString();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial0.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial0.plus(readablePeriod55);
        int[] intArray57 = partial0.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial6.indexOf(dateTimeFieldType10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial6.withPeriodAdded(readablePeriod12, (int) (byte) 10);
        int[] intArray15 = partial14.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial40.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial40.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial48.withChronologyRetainFields(chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial48.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        boolean boolean58 = partial40.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial60.withPeriodAdded(readablePeriod66, (int) (byte) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial68.withPeriodAdded(readablePeriod75, (int) ' ');
        org.joda.time.Chronology chronology78 = partial77.getChronology();
        org.joda.time.Partial partial79 = partial40.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial79.getFieldTypes();
        boolean boolean81 = partial0.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        org.joda.time.Partial partial83 = partial79.without(dateTimeFieldType82);
        org.joda.time.ReadablePartial readablePartial84 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = partial79.isAfter(readablePartial84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial83);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        int int41 = partial39.size();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial42.getFormatter();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial53.withChronologyRetainFields(chronology57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = partial53.toString("[]", locale60);
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean63 = partial39.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial65.plus(readablePeriod69);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        java.lang.String str74 = partial71.toString();
        boolean boolean75 = partial65.isAfter((org.joda.time.ReadablePartial) partial71);
        java.lang.String str76 = partial71.toStringList();
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = partial71.getFields();
        int int78 = partial42.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(chronology79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial80.withPeriodAdded(readablePeriod81, (int) (byte) 0);
        boolean boolean84 = partial71.isBefore((org.joda.time.ReadablePartial) partial80);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        java.lang.String str58 = partial41.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        java.util.Locale locale70 = null;
        java.lang.String str71 = partial61.toString("[]", locale70);
        org.joda.time.DurationFieldType durationFieldType72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial74 = partial61.withFieldAddWrapped(durationFieldType72, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial13.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial13.getFieldTypes();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        int[] intArray25 = partial21.getValues();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial26.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial26.toString(dateTimeFormatter28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial26.withChronologyRetainFields(chronology30);
        java.util.Locale locale33 = null;
        java.lang.String str34 = partial26.toString("[]", locale33);
        boolean boolean35 = partial21.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial21.toString(dateTimeFormatter36);
        int[] intArray38 = partial21.getValues();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean49 = partial39.isMatch((org.joda.time.ReadablePartial) partial48);
        boolean boolean51 = partial48.equals((java.lang.Object) 10);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial52.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial52.toString(dateTimeFormatter54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial52.withChronologyRetainFields(chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial52.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial60.withChronologyRetainFields(chronology64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial60.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        boolean boolean70 = partial52.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial72.plus(readablePeriod76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial80 = partial72.withPeriodAdded(readablePeriod78, (int) (byte) 10);
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial89 = partial80.withPeriodAdded(readablePeriod87, (int) ' ');
        org.joda.time.Chronology chronology90 = partial89.getChronology();
        org.joda.time.Partial partial91 = partial52.withChronologyRetainFields(chronology90);
        org.joda.time.Partial partial92 = partial48.withChronologyRetainFields(chronology90);
        org.joda.time.Partial partial93 = new org.joda.time.Partial(chronology90);
        org.joda.time.Partial partial94 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray38, chronology90);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial51);
        java.lang.String str53 = partial51.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial29.equals((java.lang.Object) partial40);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial29.withPeriodAdded(readablePeriod61, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial63.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        org.joda.time.Partial partial66 = partial63.without(dateTimeFieldType65);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = partial66.getValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(partial66);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial5.getFields();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        java.lang.String str17 = partial8.toStringList();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial5.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial30.withChronologyRetainFields(chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial36.withChronologyRetainFields(chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial36.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        java.lang.String str56 = partial53.toString();
        boolean boolean57 = partial47.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial53.toDateTime(readableInstant59);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        boolean boolean68 = partial63.equals((java.lang.Object) 10.0f);
        int int69 = partial63.size();
        boolean boolean70 = partial53.isEqual((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = partial72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean78 = partial35.isMatch((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean79 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime80 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = null;
        java.lang.String str82 = partial27.toString(dateTimeFormatter81);
        java.lang.String str83 = partial27.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[]" + "'", str82, "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        java.lang.String str22 = partial18.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial18.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray28, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial25.plus(readablePeriod40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        boolean boolean44 = partial1.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        org.joda.time.Partial partial46 = partial42.without(dateTimeFieldType45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial42.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.lang.String str76 = partial43.toStringList();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial77.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial77.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial77.withPeriodAdded(readablePeriod81, (int) (byte) 100);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        boolean boolean86 = partial84.isBefore((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial77.isBefore((org.joda.time.ReadablePartial) partial85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial77.withPeriodAdded(readablePeriod88, 0);
        boolean boolean91 = partial43.isAfter((org.joda.time.ReadablePartial) partial77);
        int int92 = partial43.size();
        java.lang.String str94 = partial43.toString("[]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = null;
        java.lang.String str96 = partial43.toString(dateTimeFormatter95);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial18.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = partial22.indexOf(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial38.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial38.toString(dateTimeFormatter40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial38.withChronologyRetainFields(chronology42);
        org.joda.time.Chronology chronology44 = partial43.getChronology();
        org.joda.time.Partial partial45 = partial37.withChronologyRetainFields(chronology44);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial45);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology59 = partial37.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial34.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        boolean boolean51 = partial46.equals((java.lang.Object) 10.0f);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology53 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.minus(readablePeriod54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial55.isSupported(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = partial55.getChronology();
        org.joda.time.Partial partial59 = partial33.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray61 = new int[] {};
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray60, intArray61, chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        int[] intArray69 = partial64.getValues();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray60, intArray69, chronology70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial73.withChronologyRetainFields(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial73.plus(readablePeriod77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial73.withPeriodAdded(readablePeriod79, (int) (byte) 10);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime87 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial81.withPeriodAdded(readablePeriod88, (int) ' ');
        boolean boolean91 = partial71.isAfter((org.joda.time.ReadablePartial) partial81);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        int int93 = partial81.indexOf(dateTimeFieldType92);
        int int94 = partial59.compareTo((org.joda.time.ReadablePartial) partial81);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial29.toString("[]", locale37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial9.minus(readablePeriod40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial9.plus(readablePeriod42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = partial43.with(dateTimeFieldType44, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial0.withPeriodAdded(readablePeriod15, (int) (byte) 1);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial18.toString(dateTimeFormatter20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (int) (byte) 100);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial18.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        boolean boolean35 = partial30.equals((java.lang.Object) 10.0f);
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology37 = partial18.getChronology();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial18.minus(readablePeriod38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int[] intArray48 = partial41.getValues();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray51 = new int[] {};
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray51, chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        int[] intArray59 = partial54.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray59, chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial66.withPeriodAdded(readablePeriod67, (int) (short) 100);
        int[] intArray70 = partial66.getValues();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        java.lang.String str76 = partial72.toString();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial72.withPeriodAdded(readablePeriod77, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray82 = new int[] {};
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(dateTimeFieldTypeArray81, intArray82, chronology83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray82, chronology85);
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.Partial partial88 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = partial88.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = partial87.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime92 = partial86.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Chronology chronology94 = partial79.getChronology();
        org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray70, chronology94);
        org.joda.time.Partial partial96 = partial17.withChronologyRetainFields(chronology94);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(partial96);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial5.getFields();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        java.lang.String str17 = partial8.toStringList();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        java.lang.String str25 = partial5.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        boolean boolean27 = partial9.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial37.withPeriodAdded(readablePeriod44, (int) ' ');
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial9.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = partial0.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        boolean boolean56 = partial51.equals((java.lang.Object) 10.0f);
        int int57 = partial51.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray59 = new int[] {};
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray59, chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial62.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray67, chronology68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial71.plus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial71.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial88 = partial79.withPeriodAdded(readablePeriod86, (int) ' ');
        boolean boolean89 = partial69.isAfter((org.joda.time.ReadablePartial) partial79);
        int int90 = partial51.compareTo((org.joda.time.ReadablePartial) partial69);
        boolean boolean91 = partial49.isEqual((org.joda.time.ReadablePartial) partial51);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial49.minus(readablePeriod92);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(partial93);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        int int51 = partial50.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial50.getFieldTypes();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        boolean boolean63 = partial53.isMatch((org.joda.time.ReadablePartial) partial62);
        boolean boolean65 = partial62.equals((java.lang.Object) 10);
        java.lang.String str66 = partial62.toString();
        int[] intArray67 = partial62.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray52, intArray67);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        java.lang.String str12 = partial9.toString();
        boolean boolean13 = partial3.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial14.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial14.withPeriodAdded(readablePeriod18, (int) (byte) 100);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial14.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        boolean boolean31 = partial26.equals((java.lang.Object) 10.0f);
        boolean boolean32 = partial14.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology33 = partial14.getChronology();
        boolean boolean34 = partial3.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        java.lang.String str40 = partial36.toString();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial41.isBefore((org.joda.time.ReadablePartial) partial46);
        int[] intArray50 = partial41.getValues();
        boolean boolean51 = partial36.isEqual((org.joda.time.ReadablePartial) partial41);
        java.lang.String str52 = partial36.toStringList();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial54.withPeriodAdded(readablePeriod60, (int) (byte) 10);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = partial14.isAfter((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology71 = partial36.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial5.without(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial5.withFieldAddWrapped(durationFieldType8, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial54.getValues();
        org.joda.time.Chronology chronology59 = partial54.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial61 = partial5.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial5.plus(readablePeriod62);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray65 = new int[] {};
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray64, intArray65, chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial67.withPeriodAdded(readablePeriod68, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray72 = new int[] {};
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray72, chronology73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        int[] intArray80 = partial75.getValues();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray80, chronology81);
        boolean boolean83 = partial70.isMatch((org.joda.time.ReadablePartial) partial82);
        int[] intArray84 = partial70.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        org.joda.time.Partial partial86 = partial70.without(dateTimeFieldType85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = partial70.getFormatter();
        boolean boolean88 = partial5.isMatch((org.joda.time.ReadablePartial) partial70);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNull(dateTimeFormatter87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial21.indexOf(dateTimeFieldType25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int int36 = partial27.size();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial37.withChronologyRetainFields(chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial37.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial43.toString(dateTimeFormatter45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial47.withPeriodAdded(readablePeriod51, (int) (byte) 100);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial47.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        boolean boolean64 = partial59.equals((java.lang.Object) 10.0f);
        boolean boolean65 = partial47.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology66 = partial47.getChronology();
        org.joda.time.Partial partial67 = partial43.withChronologyRetainFields(chronology66);
        boolean boolean68 = partial27.isEqual((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial21.isBefore((org.joda.time.ReadablePartial) partial67);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial55.without(dateTimeFieldType60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial61.without(dateTimeFieldType63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial64);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(partial64);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial15.plus(readablePeriod19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        java.lang.String str24 = partial21.toString();
        boolean boolean25 = partial15.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial34.toDateTime(readableInstant40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        boolean boolean49 = partial44.equals((java.lang.Object) 10.0f);
        int int50 = partial44.size();
        boolean boolean51 = partial34.isEqual((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = partial26.isMatch((org.joda.time.ReadableInstant) dateTime55);
        int int59 = partial0.compareTo((org.joda.time.ReadablePartial) partial26);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.minus(readablePeriod30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial31.getFieldTypes();
        org.joda.time.Chronology chronology33 = partial31.getChronology();
        boolean boolean34 = partial6.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial6.without(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = partial36.get(dateTimeFieldType37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        int[] intArray17 = partial6.getValues();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial18.toString(dateTimeFormatter20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial24.toString(dateTimeFormatter25);
        int[] intArray27 = partial24.getValues();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial28.withChronologyRetainFields(chronology32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = partial28.toString("[]", locale35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial37.withChronologyRetainFields(chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial37.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = partial45.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial45.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial45.withChronologyRetainFields(chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial45.isMatch((org.joda.time.ReadablePartial) partial51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial51.toString(dateTimeFormatter53);
        boolean boolean55 = partial37.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial57.withPeriodAdded(readablePeriod63, (int) (byte) 10);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial65.withPeriodAdded(readablePeriod72, (int) ' ');
        org.joda.time.Chronology chronology75 = partial74.getChronology();
        org.joda.time.Partial partial76 = partial37.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial77 = partial28.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial78 = partial24.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial79 = partial6.withChronologyRetainFields(chronology75);
        org.joda.time.DurationFieldType durationFieldType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial82 = partial6.withFieldAddWrapped(durationFieldType80, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial79);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial33.isBefore((org.joda.time.ReadablePartial) partial38);
        int[] intArray42 = partial33.getValues();
        boolean boolean43 = partial28.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = partial33.isSupported(dateTimeFieldType44);
        boolean boolean46 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        java.lang.String str47 = partial33.toStringList();
        java.lang.String str48 = partial33.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial42.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        java.lang.String str57 = partial50.toStringList();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean67 = partial50.isEqual((org.joda.time.ReadablePartial) partial58);
        int[] intArray68 = partial58.getValues();
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray68);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial52.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial52.withPeriodAdded(readablePeriod58, (int) (byte) 10);
        boolean boolean61 = partial50.isMatch((org.joda.time.ReadablePartial) partial52);
        org.joda.time.ReadablePartial readablePartial62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = partial50.isBefore(readablePartial62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial1.toString(dateTimeFormatter10);
        int[] intArray12 = partial1.getValues();
        java.lang.String str13 = partial1.toString();
        java.lang.String str14 = partial1.toStringList();
        org.joda.time.Chronology chronology15 = partial1.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial25.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray31 = new int[] {};
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray31, chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int[] intArray39 = partial34.getValues();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray39, chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial46);
        boolean boolean48 = partial28.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial50.withChronologyRetainFields(chronology52);
        java.lang.String str54 = partial50.toString();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial55.isBefore((org.joda.time.ReadablePartial) partial60);
        int[] intArray64 = partial55.getValues();
        boolean boolean65 = partial50.isEqual((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial50.withPeriodAdded(readablePeriod66, (int) (short) 100);
        boolean boolean69 = partial46.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType79 = partial1.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial1.toString(dateTimeFormatter10);
        java.lang.String str12 = partial1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = partial1.getField((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial42.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        boolean boolean51 = partial39.isMatch((org.joda.time.ReadablePartial) partial50);
        int[] intArray52 = partial39.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = partial39.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial8.toString(dateTimeFormatter24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        org.joda.time.Partial partial27 = partial8.without(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial7.without(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        int[] intArray17 = partial6.getValues();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial18.toString(dateTimeFormatter20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial24.toString(dateTimeFormatter25);
        int[] intArray27 = partial24.getValues();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial28.withChronologyRetainFields(chronology32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = partial28.toString("[]", locale35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial37.withChronologyRetainFields(chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial37.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = partial45.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial45.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial45.withChronologyRetainFields(chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial45.isMatch((org.joda.time.ReadablePartial) partial51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial51.toString(dateTimeFormatter53);
        boolean boolean55 = partial37.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial57.withPeriodAdded(readablePeriod63, (int) (byte) 10);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial65.withPeriodAdded(readablePeriod72, (int) ' ');
        org.joda.time.Chronology chronology75 = partial74.getChronology();
        org.joda.time.Partial partial76 = partial37.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial77 = partial28.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial78 = partial24.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial79 = partial6.withChronologyRetainFields(chronology75);
        org.joda.time.Chronology chronology80 = partial6.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadablePartial) partial46);
        boolean boolean49 = partial46.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial46.plus(readablePeriod50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial46.getFieldTypes();
        boolean boolean53 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial46.indexOf(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial6.without(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        java.lang.String str33 = partial29.toString();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial34.isBefore((org.joda.time.ReadablePartial) partial39);
        int[] intArray43 = partial34.getValues();
        boolean boolean44 = partial29.isEqual((org.joda.time.ReadablePartial) partial34);
        java.lang.String str45 = partial29.toStringList();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial47.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial9.without(dateTimeFieldType64);
        boolean boolean66 = partial6.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        int int68 = partial65.indexOf(dateTimeFieldType67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = partial65.isSupported(dateTimeFieldType69);
        org.joda.time.DateTimeField[] dateTimeFieldArray71 = partial65.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray71);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        int int40 = partial1.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial41.minus(readablePeriod61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial62.isSupported(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial62.plus(readablePeriod65);
        boolean boolean67 = partial1.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        org.joda.time.Partial partial69 = partial1.without(dateTimeFieldType68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = partial70.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray73 = new int[] {};
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray72, intArray73, chronology74);
        boolean boolean76 = partial70.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = partial75.getFields();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        boolean boolean85 = partial83.isBefore((org.joda.time.ReadablePartial) partial84);
        boolean boolean86 = partial78.isBefore((org.joda.time.ReadablePartial) partial83);
        java.lang.String str87 = partial78.toStringList();
        org.joda.time.Partial partial88 = new org.joda.time.Partial();
        org.joda.time.Partial partial89 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.DateTime dateTime91 = partial89.toDateTime(readableInstant90);
        org.joda.time.DateTime dateTime92 = partial88.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean93 = partial78.isMatch((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime94 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime94);
        java.lang.String str96 = partial69.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial12.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        int int21 = partial7.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial20.isSupported(dateTimeFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial20.indexOf(dateTimeFieldType27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = partial20.toString("[]", locale30);
        org.joda.time.Chronology chronology32 = partial20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 10, chronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial36.isBefore((org.joda.time.ReadablePartial) partial41);
        int[] intArray45 = partial41.getValues();
        org.joda.time.Chronology chronology46 = partial41.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial(chronology46);
        org.joda.time.Partial partial49 = partial35.withChronologyRetainFields(chronology46);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial49);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology12);
        int int15 = partial14.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = partial14.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        java.lang.String str26 = partial22.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int[] intArray36 = partial27.getValues();
        boolean boolean37 = partial22.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial22.withPeriodAdded(readablePeriod38, (int) (short) 100);
        boolean boolean41 = partial18.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial18.plus(readablePeriod42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial43.withChronologyRetainFields(chronology44);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial1.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = partial1.toString(dateTimeFormatter3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial1.withPeriodAdded(readablePeriod5, (int) (byte) 100);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        boolean boolean11 = partial1.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial1.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray17);
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray17);
        java.lang.String str22 = partial21.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial23.toString(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial24.withPeriodAdded(readablePeriod28, (int) (byte) 100);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        boolean boolean34 = partial24.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        boolean boolean41 = partial36.equals((java.lang.Object) 10.0f);
        boolean boolean42 = partial24.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology43 = partial24.getChronology();
        boolean boolean44 = partial13.isEqual((org.joda.time.ReadablePartial) partial24);
        boolean boolean45 = partial7.isEqual((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = partial24.indexOf(dateTimeFieldType46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial24.plus(readablePeriod48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DurationFieldType durationFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial53 = partial50.withFieldAdded(durationFieldType51, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(partial49);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial34.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        boolean boolean51 = partial46.equals((java.lang.Object) 10.0f);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology53 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.minus(readablePeriod54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial55.getFieldTypes();
        org.joda.time.Chronology chronology57 = partial55.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial59 = partial24.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = partial59.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial0.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial0.without(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType26 = partial24.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        java.lang.String str13 = partial9.toString();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime18 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial14.isBefore((org.joda.time.ReadablePartial) partial19);
        int[] intArray23 = partial14.getValues();
        boolean boolean24 = partial9.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial9.withPeriodAdded(readablePeriod25, (int) (short) 100);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial28.minus(readablePeriod48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray51 = new int[] {};
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray51, chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        int[] intArray59 = partial54.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray59, chronology60);
        boolean boolean62 = partial49.equals((java.lang.Object) partial61);
        int int63 = partial27.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial49.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial49.plus(readablePeriod66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = partial67.indexOf(dateTimeFieldType68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial67.plus(readablePeriod70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = partial73.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray78 = new int[] {};
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray77, intArray78, chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray78, chronology81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = partial84.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime87 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean89 = partial73.isMatch((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        org.joda.time.Partial partial92 = partial71.without(dateTimeFieldType91);
        boolean boolean93 = partial7.isMatch((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        java.lang.String str7 = partial4.toStringList();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial4.minus(readablePeriod8);
        java.lang.String str11 = partial9.toString("[]");
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        java.lang.String str29 = partial26.toString();
        boolean boolean30 = partial20.isAfter((org.joda.time.ReadablePartial) partial26);
        boolean boolean31 = partial12.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial26.indexOf(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = partial26.getChronology();
        org.joda.time.Partial partial35 = partial9.withChronologyRetainFields(chronology34);
        java.lang.Class<?> wildcardClass36 = chronology34.getClass();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str20 = partial11.toStringList();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isMatch((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial0.withChronologyRetainFields(chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.plus(readablePeriod35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        java.lang.String str40 = partial37.toString();
        boolean boolean41 = partial31.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial37.toDateTime(readableInstant43);
        boolean boolean46 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial18.indexOf(dateTimeFieldType25);
        java.util.Locale locale28 = null;
        java.lang.String str29 = partial18.toString("[]", locale28);
        org.joda.time.Chronology chronology30 = partial18.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial31.withFieldAddWrapped(durationFieldType32, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.lang.String str76 = partial43.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = partial43.isSupported(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        java.util.Locale locale51 = null;
        java.lang.String str52 = partial0.toString("[]", locale51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        int[] intArray54 = partial53.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial15.withPeriodAdded(readablePeriod16, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        int[] intArray28 = partial23.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray28, chronology29);
        boolean boolean31 = partial18.isMatch((org.joda.time.ReadablePartial) partial30);
        boolean boolean32 = partial7.isEqual((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial18.getFormatter();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial40.toString(dateTimeFormatter41);
        int[] intArray43 = partial40.getValues();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial44.withPeriodAdded(readablePeriod48, (int) (byte) 100);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial44.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial55.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial56.withChronologyRetainFields(chronology58);
        boolean boolean61 = partial56.equals((java.lang.Object) 10.0f);
        boolean boolean62 = partial44.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology63 = partial44.getChronology();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial44.minus(readablePeriod64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = partial65.getFieldTypes();
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial40.isBefore((org.joda.time.ReadablePartial) partial65);
        boolean boolean69 = partial18.isBefore((org.joda.time.ReadablePartial) partial65);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        boolean boolean23 = partial0.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology24 = partial0.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial25.withPeriodAdded(readablePeriod36, 0);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        java.lang.String str44 = partial40.toString();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        boolean boolean53 = partial45.isBefore((org.joda.time.ReadablePartial) partial50);
        int[] intArray54 = partial45.getValues();
        boolean boolean55 = partial40.isEqual((org.joda.time.ReadablePartial) partial45);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial40.withPeriodAdded(readablePeriod56, (int) (short) 100);
        boolean boolean59 = partial25.isEqual((org.joda.time.ReadablePartial) partial58);
        int int60 = partial25.size();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial25.withPeriodAdded(readablePeriod61, (int) (byte) 0);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        java.lang.String str69 = partial65.toString();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial65.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray75 = new int[] {};
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray74, intArray75, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray75, chronology78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime87 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean88 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial18.without(dateTimeFieldType62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType65 = partial18.getFieldType((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial5 = partial2.withPeriodAdded(readablePeriod3, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial5.toString(dateTimeFormatter6);
        java.lang.String str8 = partial5.toStringList();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial34.toDateTime(readableInstant40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        boolean boolean49 = partial44.equals((java.lang.Object) 10.0f);
        int int50 = partial44.size();
        boolean boolean51 = partial34.isEqual((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean59 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean60 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean61 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial9.plus(readablePeriod62);
        int[] intArray64 = partial63.getValues();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial65.minus(readablePeriod66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(partial67);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial6.minus(readablePeriod8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.minus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial12.withChronologyRetainFields(chronology16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = partial12.toString("[]", locale19);
        java.lang.String str21 = partial12.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = partial12.indexOf(dateTimeFieldType22);
        boolean boolean24 = partial11.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        org.joda.time.Partial partial31 = partial25.without(dateTimeFieldType30);
        boolean boolean32 = partial12.isMatch((org.joda.time.ReadablePartial) partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial23.withPeriodAdded(readablePeriod27, (int) (byte) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial23.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        boolean boolean41 = partial23.isMatch((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology42 = partial23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial23.minus(readablePeriod43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial44.getFieldTypes();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial46.getValues();
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial55.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology64 = partial55.getChronology();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray53, chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial65.without(dateTimeFieldType66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(partial67);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial0.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = partial0.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial0.toString(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        java.lang.String str26 = partial22.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int[] intArray36 = partial27.getValues();
        boolean boolean37 = partial22.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial22.withPeriodAdded(readablePeriod38, (int) (short) 100);
        boolean boolean41 = partial18.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial43.plus(readablePeriod47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial43.withPeriodAdded(readablePeriod49, (int) (byte) 10);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial51.withPeriodAdded(readablePeriod58, (int) ' ');
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        int int68 = partial60.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial61.getFieldTypes();
        boolean boolean70 = partial22.isBefore((org.joda.time.ReadablePartial) partial61);
        java.util.Locale locale72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = partial61.toString("", locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        boolean boolean27 = partial19.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        int int38 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial37.isSupported(dateTimeFieldType39);
        boolean boolean41 = partial9.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DurationFieldType durationFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial44 = partial9.withFieldAdded(durationFieldType42, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        org.joda.time.Partial partial52 = partial50.without(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = partial52.withFieldAdded(durationFieldType53, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial52);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial9.isSupported(dateTimeFieldType14);
        boolean boolean17 = partial9.equals((java.lang.Object) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial9.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(dateTimeFormatter18);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        int int50 = partial36.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = partial49.getFields();
        boolean boolean52 = partial30.isEqual((org.joda.time.ReadablePartial) partial49);
        int[] intArray53 = partial30.getValues();
        java.lang.String str54 = partial30.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial15.toString(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        boolean boolean65 = partial55.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean66 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial67.toString(dateTimeFormatter69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial67.withPeriodAdded(readablePeriod71, (int) (byte) 100);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial67.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        boolean boolean84 = partial79.equals((java.lang.Object) 10.0f);
        boolean boolean85 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology86 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial67.minus(readablePeriod87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial88.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = partial88.getChronology();
        org.joda.time.Partial partial92 = partial61.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = partial43.withChronologyRetainFields(chronology91);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = null;
        boolean boolean95 = partial43.isSupported(dateTimeFieldType94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType97 = partial43.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial26.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial26.without(dateTimeFieldType28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = partial30.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial30.minus(readablePeriod40);
        int[] intArray42 = partial30.getValues();
        boolean boolean43 = partial29.isMatch((org.joda.time.ReadablePartial) partial30);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        int int40 = partial1.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial41.minus(readablePeriod61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial62.isSupported(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial62.plus(readablePeriod65);
        boolean boolean67 = partial1.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        org.joda.time.Partial partial69 = partial1.without(dateTimeFieldType68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = partial70.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray73 = new int[] {};
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray72, intArray73, chronology74);
        boolean boolean76 = partial70.isAfter((org.joda.time.ReadablePartial) partial75);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = partial75.getFields();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        boolean boolean85 = partial83.isBefore((org.joda.time.ReadablePartial) partial84);
        boolean boolean86 = partial78.isBefore((org.joda.time.ReadablePartial) partial83);
        java.lang.String str87 = partial78.toStringList();
        org.joda.time.Partial partial88 = new org.joda.time.Partial();
        org.joda.time.Partial partial89 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.DateTime dateTime91 = partial89.toDateTime(readableInstant90);
        org.joda.time.DateTime dateTime92 = partial88.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean93 = partial78.isMatch((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime94 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.Partial partial96 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial9.withPeriodAdded(readablePeriod14, (int) '4');
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = partial17.getFields();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial17.withPeriodAdded(readablePeriod25, 1);
        boolean boolean28 = partial9.isMatch((org.joda.time.ReadablePartial) partial27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial9.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Partial partial28 = partial7.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial28.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial66.withPeriodAdded(readablePeriod67, (int) (short) 100);
        org.joda.time.Chronology chronology70 = partial69.getChronology();
        org.joda.time.Partial partial71 = partial42.withChronologyRetainFields(chronology70);
        boolean boolean72 = partial30.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial75 = partial30.withField(dateTimeFieldType73, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial1.getFieldTypes();
        java.lang.String str5 = partial1.toString("[]");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        int int7 = partial1.indexOf(dateTimeFieldType6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial9.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial26.equals((java.lang.Object) boolean29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        java.lang.String str41 = partial38.toString();
        boolean boolean42 = partial32.isAfter((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial38.toDateTime(readableInstant44);
        boolean boolean47 = partial26.isAfter((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = partial48.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial57.minus(readablePeriod58);
        boolean boolean60 = partial26.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        boolean boolean67 = partial61.isAfter((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = partial61.getChronology();
        boolean boolean69 = partial26.equals((java.lang.Object) chronology68);
        int int70 = partial1.compareTo((org.joda.time.ReadablePartial) partial26);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        java.lang.String str20 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = partial1.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = partial6.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = partial57.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        java.util.Locale locale51 = null;
        java.lang.String str52 = partial0.toString("[]", locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial0.without(dateTimeFieldType53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray62 = partial55.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial55.isSupported(dateTimeFieldType63);
        boolean boolean65 = partial0.equals((java.lang.Object) partial55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial55.toString(dateTimeFormatter66);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial24.withPeriodAdded(readablePeriod28, (int) (byte) 100);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        boolean boolean34 = partial24.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        boolean boolean41 = partial36.equals((java.lang.Object) 10.0f);
        boolean boolean42 = partial24.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology43 = partial24.getChronology();
        boolean boolean44 = partial13.isEqual((org.joda.time.ReadablePartial) partial24);
        boolean boolean45 = partial7.isEqual((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = partial24.indexOf(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial24.toString(dateTimeFormatter48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property51 = partial24.property(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial6.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = partial41.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = partial41.getChronology();
        org.joda.time.Partial partial45 = partial14.withChronologyRetainFields(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial14.toString(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        org.joda.time.Partial partial3 = partial0.without(dateTimeFieldType2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property5 = partial3.property(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(partial3);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        int int18 = partial12.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        int[] intArray28 = partial23.getValues();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray28, chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial40.withPeriodAdded(readablePeriod47, (int) ' ');
        boolean boolean50 = partial30.isAfter((org.joda.time.ReadablePartial) partial40);
        int int51 = partial12.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial52.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial52.toString(dateTimeFormatter54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial52.withPeriodAdded(readablePeriod56, (int) (byte) 100);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial52.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        boolean boolean69 = partial64.equals((java.lang.Object) 10.0f);
        boolean boolean70 = partial52.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology71 = partial52.getChronology();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial52.minus(readablePeriod72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = partial73.isSupported(dateTimeFieldType74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial73.plus(readablePeriod76);
        boolean boolean78 = partial12.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial12.plus(readablePeriod79);
        boolean boolean81 = partial9.isBefore((org.joda.time.ReadablePartial) partial80);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        java.lang.String str38 = partial34.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        int[] intArray48 = partial39.getValues();
        boolean boolean49 = partial34.isEqual((org.joda.time.ReadablePartial) partial39);
        java.lang.String str50 = partial34.toStringList();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial52.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial52.withPeriodAdded(readablePeriod58, (int) (byte) 10);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = partial12.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial71 = partial12.withField(dateTimeFieldType69, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial41.plus(readablePeriod58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = partial41.indexOf(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = partial8.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial24.with(dateTimeFieldType25, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial3.with(dateTimeFieldType9, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial18.indexOf(dateTimeFieldType25);
        java.util.Locale locale28 = null;
        java.lang.String str29 = partial18.toString("[]", locale28);
        org.joda.time.Chronology chronology30 = partial18.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = partial31.getFields();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        java.lang.String str15 = partial11.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial11.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray21, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = partial18.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial(chronology33);
        org.joda.time.Partial partial35 = partial6.withChronologyRetainFields(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = partial6.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial7.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial7.toString(dateTimeFormatter9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial7.withChronologyRetainFields(chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial7.isMatch((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        int int34 = partial20.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (-1));
        boolean boolean40 = partial13.isMatch((org.joda.time.ReadablePartial) partial39);
        int[] intArray41 = partial39.getValues();
        int int42 = partial4.compareTo((org.joda.time.ReadablePartial) partial39);
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = partial4.toString("", locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial11.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial53.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial53.getFormatter();
        java.lang.String str57 = partial53.toStringList();
        boolean boolean58 = partial51.isAfter((org.joda.time.ReadablePartial) partial53);
        java.util.Locale locale60 = null;
        java.lang.String str61 = partial53.toString("[]", locale60);
        int[] intArray62 = partial53.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        java.lang.String str19 = partial15.toString();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial20.isBefore((org.joda.time.ReadablePartial) partial25);
        int[] intArray29 = partial20.getValues();
        boolean boolean30 = partial15.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial15.withPeriodAdded(readablePeriod31, (int) (short) 100);
        boolean boolean34 = partial0.isEqual((org.joda.time.ReadablePartial) partial33);
        int int35 = partial0.size();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial0.withPeriodAdded(readablePeriod36, (int) (byte) 0);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        int[] intArray48 = partial44.getValues();
        org.joda.time.Chronology chronology49 = partial44.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial50.minus(readablePeriod51);
        boolean boolean53 = partial0.isMatch((org.joda.time.ReadablePartial) partial50);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology29);
        java.lang.String str33 = partial31.toString("[]");
        org.joda.time.DurationFieldType durationFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = partial31.withFieldAddWrapped(durationFieldType34, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        org.joda.time.Chronology chronology63 = partial61.getChronology();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial61.plus(readablePeriod64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(chronology66);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        int[] intArray10 = partial6.getValues();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        int int30 = partial16.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial29.isSupported(dateTimeFieldType31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial35 = partial29.withPeriodAdded(readablePeriod33, (-1));
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial35.minus(readablePeriod36);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial37.getFields();
        java.lang.String str39 = partial37.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial37.toString(dateTimeFormatter40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial37.minus(readablePeriod42);
        int int44 = partial6.compareTo((org.joda.time.ReadablePartial) partial43);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial21.getFormatter();
        int[] intArray25 = partial21.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial16.plus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial22.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial30.withChronologyRetainFields(chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial30.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        boolean boolean40 = partial22.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial41.isBefore((org.joda.time.ReadablePartial) partial46);
        int[] intArray50 = partial46.getValues();
        org.joda.time.Chronology chronology51 = partial46.getChronology();
        boolean boolean52 = partial22.isEqual((org.joda.time.ReadablePartial) partial46);
        boolean boolean53 = partial16.isEqual((org.joda.time.ReadablePartial) partial46);
        java.lang.String str54 = partial46.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }
}

